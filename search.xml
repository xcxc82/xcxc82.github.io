<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022/12/2小记</title>
      <link href="/2022/12/02/2022-12-2%E5%B0%8F%E8%AE%B0/"/>
      <url>/2022/12/02/2022-12-2%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="02bba5906fa0d9eae7a880daaadec74e1e37788df1b7925dbe2d82118b41df5e">4630436162ade97ba2718b7d0c4b3b63aaf3284bd84dca750135f04888824a77e283e4531aa01e932a8b1815ad26da52fcafa1b7191e5f2d2ec783fdb51149b0058f7a41d5f4ea39d0bfae46dbc8f60888601bb7d4c0b47abd8e0bc8e7578058986e86e7097638f4309909e7c26df805625ad6ba4515480a358e38891b6a418435cf23485976cc41008e0ff9758055c1fa2b7a680a1c0bf74af8e5ab5620272de8ddb634cd93b47061f9c7ab35ad070020d201a85823852254585f11f53a97e0d2f18b88beb29a7dfc98c8364ee3cc597dee85a58943dea1b4bbe4834f029066e89c4a0c28d7f74de51c83f7f841c4b9e55243ca921bbc310428abb380f610366a66c9b50a1f48e5665d4b5e59b037737f741542ab72962bacf45fdd199138b66f099b52c03afb451bf6f5e3f0c124844b743773d7d9da1d26befdf24e62780e4e4545ea5cd9cae85623a877d63e8c6c31a1c70264fc4bea1e70d11461611fefd6925642821744963de7f0f84af61699e7deacec2ebe8b31198bc60da88423fd7649ccb9fc92015a43e350b738b01029e0315b5e5ded7e5c298779a717249b0c26dce8c9ae3dfc0054405d79bbf7f1295c63181a277d5ad36e7e7e4a190cba2612c9075d85e133312b9db208ecb9b06c2ab5c4638dcc64533539c725f7c6ed21ac7fccb389677e38664e35aba16cc6b19cdabc2400577b7453afc8857bf8a94f9b9ce054a1fd71dedf688fe57df238969ccfb974a1b3aca426370679e69a1d081d6ce54a239ea81be1ebf37d423e1d6df36631921415ecbcde296684a2fc54bb215448f64cbb07e10a6fadf21c7ef4fbb97119cadbb1e3391f8728ad9dbf5f00cfc7a02769ec2bf401c2cef9da4701e55672681214e39b0af7220bb8bd52b9e0582948fb164b6ebc1f75798e6679b5c2138139ce7d0c0393b080314b818f8deb39b6ea6dc3a19e75447871fe39e476c208053d01acfcb01e89564098d0732ac82a40f0f2d25ee5c29c88e2f28069bf595699c2ffb64c08ba78d834928760270825e2ff01805eec213358b60c7d0d2c3455867a49e0cf195b206c78bbdb168bdd8ce7f432cd8f8d54f9ba3babbd12127c39e1806bed583d66e9125144ec4e5a84132ec52a14837d2618dedde58921dbe02020fe9c24c0c558f169c0646e86d4dc49081123164900734b76d80cdb9b6d1b6a37d63c0e3ab07f71d0b396be77d51aeb6da458476d08e3e56b3ff324023e93c628005eed566edb16c0b973c005115941fa03c3bde7872ee2b5cf9676336b813514094823a2a66ef8fcfcf22028939543650000c2013f892f1a6ed9303ac58aafbe9e8ef809f2621672af83e35b5c12dc278ffd955ddd5a97a8e3ef567a5847ad6e72fe7a8ee90e810806edbd9d61a6189ed35140697f10a6489acc1eff74e0e75363a5cd978ae9fe2bfa003036b20d2dd894fa13262d81b32d874b21635706b9ded5ad852dfa6a400c2ddcfcd133942641cb3ae38a5e2a2bc89c7e465ec6bcf2993a14ed9640a1e77da5454d392c1ac88773c8f0f0d23fbf90f9ddc0c2c4eda0b05c513bd6a6f431a140da1a1d1167324582daccdd182830c0f84d61d7648b9b209e7747580d82833d968b05826c311b72006214f02a7eb7673b0d92c6bd2c9b62f273e21fd61391d6762e36719cbba1bed59772131ad2cbfca7bb0f658ddbc194be0f5a402181174212457290a74c8bed24da5b46a98e3e2b3d9d3175d5d0482a5119bb2e91d12d448fda8c3a381783ef6f0730aa62f8562102b6e529fb461051de20923ba71e76c114acf7a52660e3ae8e8dc578f834d1f5a2fd0a633c0153702c04fd84a3156557fae7c2502f027cb44be80b25dbcada3fb1692f8592b1f13bab3c719ab823074fd3474545d5a0c7a32d71d1fde522ac92aacf56e59a8efad86d53d50ae00191225e70760d6650901ed5d790557586c1db847cc30eb46c8a5b6c2e4e2eb5d5ddeb70c29ab6daeff479dcf8c191b3f3735a202b65c2adb822f10dcfe71524adf0f64c03f07cbcba97fd9c3d5084c02e2e286c4ae241f0f83def09edc08bf04641c18a3948af9c0d08d77044a87746f3b414a27e58ff1d426b43f1ba0bcf4acda82003d847a5d2e50e48caa83326d1cff8ed3d3dd17bbe975db32ab868ecbcfae6d306bcba283831f72841b6267888796fb91f4951606d98a8c0d7cf9060689ae863b2c372a4d552e808f05fcd730dd7480cb8b88ced59535c6f78a1eb8651b48d1be5823f4767688551245a876aa0883840063d1ec79c17908e86a418397a6607fb1e06de8b75e4808dc13eb45bb01f47d7999302811b99efa88405a2b3d84040c5fc57ed3dc52ab0b899b3e204806203f04611252bc97847d56433c14cb8a40dc909d317eca876ba95876596b0a4889024896b605b7c5caa2d5c260b15960b6a9d5a69759411a889c7c48d358d4dc0740be3198f5ccfd42c83d3792e289bed9230d8dbde85f79944af553202181e7aed38e9e7a06f10a71767c1d2f7c6fc612fd8c07471f0e8228aae4be5114d1737e0e4f7e0c299e8649888621c63abd406256e284943043e9557e5be4c9ba079481df76d67e97d21707958f05ea2ff85d20adba099decb261674b55ca7b60a987b59293b24b08ee7477e0830fbec9c97204892873fd1f83d1cc27c4bfbeff4ca5df3b0025ccd6c5955ada973ffaa66d1f8c7fd6c32103075c74b2ddc2d9dc009b4b11e7ce70485c621500829697bbdf2f15a856844a1422f5d06d53c35a5f32b693ce75e7dbe626750a3ece2a175eb10b9e9ac082ce284745882ba3410427d1ac0b7267d20d99402e2a2071da084ca1120806a620fccfd8b1dead46c3d5fda7a7f80930f7513d16de166eb56c119181b249a79a01ee95d309c18d558266ba29b854806e486191aaada40491e6c7940d67a8afb6121d6393a3c28a6b4985a59b39eca6e4fac515777bad791578595850612d1072327955113ca1217d7f68affc9c6e8f49e22e9400b89efb94b78e83e93726732fb8391390b88928832b08d27bf72159781f11a53fa236f968475ca234ede111a38ea34f5ac251da4c45c5e5d2ecd5553964a8e89a9e3811d5137a4637deeb414cce44196b997595a1b3b3c553722e37985fd804f50dc2c7544772c72b3de82f86b4df627b406caaa085ea6a9fcc8b3872b2863b1cdba62fd8c64d82a6c5204e69838a310810c16a157620523bcbb6aadc00340e45552a932cdb27da0946c7ce7d08427b7eed49366817204943adaa9645a422590f6815d66042cf3d97713b3d0cfad87c15aa809eb2ee22328e9b6a32f76b03314c8fe6565f24e09f9bff183cef1e925223ae861cd3786b0f02e440a78eb1e3b9edd5e6cf73f0ffaa2c9ebc20214f27fa82452592fe6bb434a035ab2f647051c71b41af261f2042211477f3b075d1eb938d0b5d989965cc19faefd81124fcd45737a4bfcc322702b6684136d15efb3e3bddfdc852d2ccbcd7b11da1f927957fabaf091f79ac7df92b0ba991d7ac6952e358af425472dfc1cc58f7744a2bee19ee71141ff6e2df0daacc1b3d0f10fcb58a425ae7ed9f2d5e7947e0bee2b83858a70323a9328f38a737b31b9877fdff24edad64f66f8573a9dcc286c943600286ed696aabcf7b97589935eea6f2d7004ad3d88783d50d4faf0dfc43b9514279d49256c98c75e3c1fe4df92979d67536013ac29928d3bec611acc6fa8f9ddc5246cee33b24f4b3bb3959c7896448059bda98ace98e217d9e5b5601b0141cc38cc900e488cd99012f7c9b44c55c61977bc9db00a39</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板库</title>
      <link href="/2022/11/26/%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
      <url>/2022/11/26/%E6%A8%A1%E6%9D%BF%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dc0525aa316736c1d840217958312abb6b8d49d899a515bd2feacb577b11bafb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《算法竞赛进阶指南》第五章 读书笔记</title>
      <link href="/2022/11/17/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E3%80%8B%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/17/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E3%80%8B%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p><del>可爱的数据结构!</del></p></li><li><p>竞赛复健,自用向整理</p></li><li>为简约文本,代码均省略开头部分</li><li>书中所有例题均在acwing上可以找到</li></ul><h3 id="0x40-数据结构进阶"><a href="#0x40-数据结构进阶" class="headerlink" title="0x40 数据结构进阶"></a>0x40 数据结构进阶</h3><h4 id="0x41-并查集"><a href="#0x41-并查集" class="headerlink" title="0x41 并查集"></a>0x41 并查集</h4><ul><li><p>定义: 一种用于动态维护若干个不重叠集合的数据结构</p></li><li><p>支持的操作</p><p>1.Get: 查询一个元素属于哪个集合</p><p>2.Merge: 将两个集合合并为一个集合</p><p>我们使用一个树状结构来存储每个集合,树上的每个节点都是一个元素,树根即为代表元素。</p></li><li><p>优化方法</p><p>1.路径压缩: 一个个往上找树根显然效率太慢。因此我们在每次执行Get操作时,把访问过的节点全部指向树根,这种优化方法就称为路径压缩。每次Get的均摊复杂度为$O(logn)$</p><p>2.按秩合并: 又称启发式合并。即在每次合并时都选择将小的集合合并到大的集合上。单独采用按秩合并的均摊复杂度也为$O(logn)$,但同时采用路径压缩和按秩合并优化的并查集,每次Get操作的均摊复杂度可以进一步降低到$O(α(n))$,其中$α(n)$为反阿克曼函数,其在$n&lt;2^{10^{19729}}$的时候都满足$α(n)&lt;5$,增长率非常慢,可以当作常数看。</p><p>一般来说,在算法竞赛中只需要采用路径压缩即可,代码见下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fa[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==fa[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">Get</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2)</span></span>&#123;</span><br><span class="line">fa[<span class="built_in">Get</span>(x1)] = <span class="built_in">Get</span>(x2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>例题: 程序自动分析</p><p>先把相等的数合并到一个集合中,再判断不相等的数是否合法,用一个并查集来实现即可。这里数比较大,需要先离散化一下(从此题也可以发现,并查集擅长维护具有传递性的关系)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fa[MAXN&lt;&lt;<span class="number">1</span>],n,T,b[MAXN&lt;&lt;<span class="number">1</span>],cnt,c[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">condition</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,e;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++) fa[i] = i;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+cnt+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]!=b[i<span class="number">-1</span>]) c[++top] = b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;i++)&#123;</span><br><span class="line">b[i] = c[i];</span><br><span class="line">&#125;</span><br><span class="line">cnt = top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>,r = cnt;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(b[mid]==x) <span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">if</span>(b[mid]&gt;x) r = mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==fa[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">Get</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2)</span></span>&#123;</span><br><span class="line">fa[<span class="built_in">Get</span>(x1)] = <span class="built_in">Get</span>(x2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="type">bool</span> check = <span class="number">1</span>;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i].x = <span class="built_in">read</span>(),a[i].y = <span class="built_in">read</span>(),a[i].e = <span class="built_in">read</span>();</span><br><span class="line">b[++cnt] = a[i].x,b[++cnt] = a[i].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].e==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">Merge</span>(<span class="built_in">Query</span>(a[i].x),<span class="built_in">Query</span>(a[i].y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].e!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Get</span>(<span class="built_in">Query</span>(a[i].x))==<span class="built_in">Get</span>(<span class="built_in">Query</span>(a[i].y)))&#123;</span><br><span class="line">check = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(check) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>“带边权”与”扩展域”并查集</p><p>例题: 银河英雄传说</p><p>并查集所构成的集合是树形的,因此,我们可以给每条边加上边权。定义每条连向自己父亲的边代表二者之间的距离(包括父节点),在每次路径压缩时更新边权,并维护每个集合的大小,每次合并时增加一条大小为父集合大小的新边即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,fa[MAXN],d[MAXN],T,size[MAXN];</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="type">int</span> root = <span class="built_in">Get</span>(fa[x]);</span><br><span class="line">d[x]+=d[fa[x]];</span><br><span class="line"><span class="keyword">return</span> fa[x] = root; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> x2)</span></span>&#123;</span><br><span class="line">x1 = <span class="built_in">Get</span>(x1),x2 = <span class="built_in">Get</span>(x2);</span><br><span class="line">fa[x1] = x2;</span><br><span class="line">d[x1] += size[x2];</span><br><span class="line">size[x2] += size[x1];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=MAXN;i++) fa[i] = i,size[i] = <span class="number">1</span>;</span><br><span class="line">T = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">read</span>(),y = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">Merge</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Get</span>(x)!=<span class="built_in">Get</span>(y)) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==y||d[x]-d[y]==<span class="number">0</span>) cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="built_in">abs</span>(d[x]-d[y])<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  例题: P5937 [CEOI1999] Parity Game</p><p>  区间问题不太好做,考虑转化: 可以发现若区间$[l,r]$的有奇数个$1$,则前$l-1$个数和前$r$个数中的$1$的个数必定相同,反之,则必定不同,且该关系具有传递性。考虑把每个变量$x$拆成两个节点$x_1$和$x_2$,分别代表$x$为奇数的集合和$x$为偶数的集合,每次判断对应条件是否成立,并合并对应集合</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,cnt,tot,fa[MAXN],a[MAXN],c[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ask</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line">&#125;q[MAXN];</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==fa[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">Get</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">fa[<span class="built_in">Get</span>(x)] = <span class="built_in">Get</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">discrete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+tot+<span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">unique</span>(a+<span class="number">1</span>,a+tot+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,x)-a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">q[i].l = <span class="built_in">read</span>(),q[i].r = <span class="built_in">read</span>();</span><br><span class="line">a[++tot] = q[i].l<span class="number">-1</span>,a[++tot] = q[i].r;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;o&#x27;</span>) q[i].id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> q[i].id = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">discrete</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++) fa[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">Query</span>(q[i].l<span class="number">-1</span>),y = <span class="built_in">Query</span>(q[i].r);</span><br><span class="line"><span class="keyword">if</span>(q[i].id==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Get</span>(x)==<span class="built_in">Get</span>(y)||<span class="built_in">Get</span>(x+n)==<span class="built_in">Get</span>(y+n))&#123;</span><br><span class="line">cout&lt;&lt;i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Merge</span>(x,y+n),<span class="built_in">Merge</span>(x+n,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Get</span>(x+n)==<span class="built_in">Get</span>(y)||<span class="built_in">Get</span>(x)==<span class="built_in">Get</span>(y+n))&#123;</span><br><span class="line">cout&lt;&lt;i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Merge</span>(x,y),<span class="built_in">Merge</span>(x+n,y+n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  例题: 食物链</p><p>  食物链是环形的,因此考虑把每个点扩展为”同类”,”天敌”,”食物”三个集合,每次加入新条件后进行集合合并即可</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,k,x,y,cnt,d;</span><br><span class="line"><span class="type">int</span> fa[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">Get</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">fa[<span class="built_in">Get</span>(x)] = <span class="built_in">Get</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),k = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>*n;i++) fa[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">d = <span class="built_in">read</span>(),x = <span class="built_in">read</span>(),y = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(x&gt;n||y&gt;n) cnt++;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Get</span>(x+n)==<span class="built_in">Get</span>(y)||<span class="built_in">Get</span>(x+<span class="number">2</span>*n)==<span class="built_in">Get</span>(y)) cnt++;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Merge</span>(x,y),<span class="built_in">Merge</span>(x+n,y+n),<span class="built_in">Merge</span>(x+<span class="number">2</span>*n,y+<span class="number">2</span>*n); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Get</span>(x)==<span class="built_in">Get</span>(y)||<span class="built_in">Get</span>(x+<span class="number">2</span>*n)==<span class="built_in">Get</span>(y)||x==y) cnt++;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Merge</span>(x+n,y),<span class="built_in">Merge</span>(y+<span class="number">2</span>*n,x),<span class="built_in">Merge</span>(x+<span class="number">2</span>*n,y+n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x42-树状数组"><a href="#0x42-树状数组" class="headerlink" title="0x42 树状数组"></a>0x42 树状数组</h4><ul><li><p>定义: 一种用于维护序列前缀和的数据结构</p></li><li><p>原理: 把一个整数$x$拆分为若干个$2$的整数次幂,即$x = 2^{i<em>1}+2^{i_2}+\cdots+2^{i_m}$,假设$i$递减,进一步将其划分为若干个小区间,即为: $[1,2^{i_1}],[2^{i_1}+1,2^{i_1}+2^{i_2}],\cdots [\sum\limits</em>{k=1}^{m-1}2^{i<em>{k}}+1,\sum\limits</em>{k=1}^m2^{i_{k}}]$,可以发现,以$R$为结尾的区间,其区间长度就等于lowbit(R),即最小的$2$的次幂。</p><p>设$c_i$保存序列中区间$[i-lowbit(i)+1,i]$中所有数的合,如果把数组$c$看作一个树形结构,就会像下图这样,其中,每个节点$c[i]$的父节点即为$c[i+lowbit(i)]$:</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/vbrr8g2v.png" alt=""></p><center>早期写的sb博客《树状数组的两个小推论》里做的图</center><p>基于上面这种思想建立的数据结构,就称为树状数组(Binary Indexed Trees)。</p></li><li><p>支持的操作:</p><p>1.查询前缀和: 像上述思想那样,若要查询区间$[1,x]$,的前缀和,只需将$x$分解为若干个2的整数次幂,然后累计$c$数组的和即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">sum+=c[x];</span><br><span class="line">x-=<span class="built_in">Lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>2.单点增加: 给序列中的$a[x]$加上$y$,同时正确维护前缀和。根据上述的树形性质,只有节点$c[x]$与其父节点包含$a[x]$,因此只需要从节点$c[x]$开始,一路向上修改即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">c[x]+=y;</span><br><span class="line">x+=<span class="built_in">Lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.O(n)建树: 用处不大的方法。正序扫描序列,用子节点去更新父节点的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">x = <span class="built_in">read</span>();</span><br><span class="line">c[i]+=x;</span><br><span class="line">fa = i+(i&amp;-i);</span><br><span class="line"><span class="keyword">if</span>(fa&lt;=n) c[fa]+=c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>计算逆序对个数:</p><p>定义一个权值数组,然后倒序统计即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">f1[i][<span class="number">0</span>] = <span class="built_in">Query</span>(a[i]<span class="number">-1</span>);</span><br><span class="line">f1[i][<span class="number">1</span>] = <span class="built_in">Query</span>(maxa) - <span class="built_in">Query</span>(a[i]);</span><br><span class="line"><span class="built_in">Add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>例题: 楼兰图腾</p><p>每个点的横纵坐标都不相同,因此只需要计算出每个节点左右大于/小于该节点$y$坐标的点的数量即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[MAXN],n,c[MAXN],maxa;</span><br><span class="line"><span class="type">int</span> f1[MAXN][<span class="number">2</span>],f2[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ansv,ansn;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">sum+=c[x];</span><br><span class="line">x-=<span class="built_in">Lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">c[x]+=y;</span><br><span class="line">x+=<span class="built_in">Lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>(),maxa = <span class="built_in">max</span>(maxa,a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">f1[i][<span class="number">0</span>] = <span class="built_in">Query</span>(a[i]<span class="number">-1</span>);</span><br><span class="line">f1[i][<span class="number">1</span>] = <span class="built_in">Query</span>(maxa) - <span class="built_in">Query</span>(a[i]);</span><br><span class="line"><span class="built_in">Add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">f2[i][<span class="number">0</span>] = <span class="built_in">Query</span>(a[i]<span class="number">-1</span>);</span><br><span class="line">f2[i][<span class="number">1</span>] = <span class="built_in">Query</span>(maxa) - <span class="built_in">Query</span>(a[i]);</span><br><span class="line"><span class="built_in">Add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ansn+=(<span class="type">long</span> <span class="type">long</span>)f1[i][<span class="number">0</span>]*f2[i][<span class="number">0</span>];</span><br><span class="line">ansv+=(<span class="type">long</span> <span class="type">long</span>)f1[i][<span class="number">1</span>]*f2[i][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ansv&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ansn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例题: 一个简单的整数问题</p><p>区间修改+单点求和。利用差分的思想,使用树状数组维护该序列的差分数组,对于区间$[l,r]$的修改,改动节点$c<em>l$和$c</em>{r+1}$即可,对于单点求和,计算其前缀和即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,a[MAXN],c[MAXN],x,y,z,C;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">sum+=c[x];</span><br><span class="line">x-=<span class="built_in">Lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">c[x]+=y;</span><br><span class="line">x+=<span class="built_in">Lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">Add</span>(i,a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;C;</span><br><span class="line"><span class="keyword">if</span>(C==<span class="number">2</span>)&#123;</span><br><span class="line">x = <span class="built_in">read</span>();</span><br><span class="line">cout&lt;&lt;<span class="built_in">Query</span>(x)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">x = <span class="built_in">read</span>(),y = <span class="built_in">read</span>(),z = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">Add</span>(x,z),<span class="built_in">Add</span>(y+<span class="number">1</span>,-z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例题: 一个简单的整数问题2:</p><p>区间修改+区间求和。我们设$b$表示原数组的差分数组,那么查询前$x$个数的和的表达式就为:</p><script type="math/tex; mode=display">\begin{split}\sum\limits_{i=1}^x\sum\limits_{j=1}^ib_j & = \sum\limits_{i=1}^x(x-i+1)b_i  \\& = x×\sum\limits_{i=1}^xb_i - \sum\limits_{i=1}^x(i-1)b_i\end{split}</script><p>因此,我们只需要在树状数组中维护数组$b_i$的前缀和和$(i-1)b_i$的前缀和即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,ind,X,x,y,z,fa;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum,sum2,S,S2,c[MAXN],b[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">b[x]+=y;</span><br><span class="line">c[x]+=y*ind;</span><br><span class="line">x+=x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">sum = <span class="number">0</span>,sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">sum+=b[x];</span><br><span class="line">sum2+=c[x];</span><br><span class="line">x-=x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> X*sum-sum2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">x = <span class="built_in">read</span>();</span><br><span class="line">b[i]+=(x-y);</span><br><span class="line">c[i]+=(<span class="type">long</span> <span class="type">long</span>)(i<span class="number">-1</span>)*(x-y);</span><br><span class="line">fa = i+(i&amp;-i);</span><br><span class="line"><span class="keyword">if</span>(fa&lt;=n) b[fa]+=b[i],c[fa]+=c[i];</span><br><span class="line">y = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">z = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(z==<span class="number">2</span>)&#123;</span><br><span class="line">x = <span class="built_in">read</span>(),y = <span class="built_in">read</span>();</span><br><span class="line">X = x<span class="number">-1</span>;</span><br><span class="line">S = <span class="built_in">Query</span>(X);</span><br><span class="line">X = y;</span><br><span class="line">S2 = <span class="built_in">Query</span>(X);</span><br><span class="line"><span class="built_in">write</span>(S2-S),<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">x = <span class="built_in">read</span>(),y = <span class="built_in">read</span>(),z = <span class="built_in">read</span>();</span><br><span class="line">ind = x<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">Add</span>(x,z);</span><br><span class="line">ind = y;</span><br><span class="line"><span class="built_in">Add</span>(y+<span class="number">1</span>,-z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例题: 谜一样的牛</p><p>设$a<em>i$表示小于第$i$个数的数量,可以肯定的是,第$n$个数的大小是确定的。对于第$n-1$个数的大小,若$a</em>{n-1}≥a<em>{n}$,则说明第$n$个数一定比他小,第$i$个数的大小就是$a</em>{n-1}+2$,反之就是$a_{n-1}+1$。以此类推,第$a_i$个数就是目前”没用过的”的数里第$a_i+1$大的数。我们可以用树状数组维护前$i$个数中没用过的数的数量,每次二分查找其值即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,a[MAXN],b[MAXN],c[MAXN],vis[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">c[x]+=y;</span><br><span class="line">x+=<span class="built_in">Lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">res+=c[x];</span><br><span class="line">x-=<span class="built_in">Lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">Add</span>(i,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="type">int</span> now = a[i]+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>,r = n;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Query</span>(mid)&gt;=now) r = mid; </span><br><span class="line"><span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Add</span>(l,<span class="number">-1</span>);</span><br><span class="line">b[i] = l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;b[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="0x43-线段树"><a href="#0x43-线段树" class="headerlink" title="0x43 线段树"></a>0x43 线段树</h4><ul><li><p>定义: 一种用于动态维护区间信息的数据结构,结构见下图:</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/r0ivwet5.png" alt=""></p><p><del>虽然我知道放这图没啥意义但是上面的树状数组放图了那线段树也放个吧</del></p></li><li><p>模板: 区间修改+区间求和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[MAXN],n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].val = tree[lson].val+tree[rson].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">tree[node].l = l,tree[node].r = r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].val = a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>; </span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tree[node].tag) <span class="keyword">return</span>;</span><br><span class="line">tree[lson].val+=tree[node].tag*(tree[lson].r - tree[lson].l+<span class="number">1</span>);</span><br><span class="line">tree[rson].val+=tree[node].tag*(tree[rson].r - tree[rson].l+<span class="number">1</span>);</span><br><span class="line">tree[lson].tag+=tree[node].tag;</span><br><span class="line">tree[rson].tag+=tree[node].tag;</span><br><span class="line">tree[node].tag = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].l&gt;=l&amp;&amp;tree[node].r&lt;=r)&#123;</span><br><span class="line">tree[node].val+=(tree[node].r-tree[node].l+<span class="number">1</span>)*val;</span><br><span class="line">tree[node].tag+=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node);</span><br><span class="line"><span class="type">int</span> mid = (tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mid&lt;r) <span class="built_in">modify</span>(rson,l,r,val);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(lson,l,r,val);</span><br><span class="line"><span class="built_in">pushup</span>(node); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].l&gt;=l&amp;&amp;tree[node].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">return</span> tree[node].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>,mid = (tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(node);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) res+=<span class="built_in">query</span>(rson,l,r);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) res+=<span class="built_in">query</span>(lson,l,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> l,r,mode,v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">mode = <span class="built_in">read</span>(),l = <span class="built_in">read</span>(),r = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(mode==<span class="number">1</span>)&#123;</span><br><span class="line">v = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>,l,r,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,l,r));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例题: Can you answer on these queries III</p><p>经典题。维护三个信息: 从区间左端开始的最大字段和,从区间右端开始的最大字段和,区间最大字段和。合并的方式也很显然,不具体展开了</p><p>这里有一个小trick,将查询函数的返回值定为区间结构体,这样一来就不用写好几个函数进行计算了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[MAXN],n,m,x,y,z;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">int</span> Lmax,Rmax,max,sum;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].sum = tree[rson].sum+tree[lson].sum;</span><br><span class="line">tree[node].Lmax = <span class="built_in">max</span>(tree[lson].Lmax,tree[lson].sum+tree[rson].Lmax);</span><br><span class="line">tree[node].Rmax = <span class="built_in">max</span>(tree[rson].Rmax,tree[rson].sum+tree[lson].Rmax);</span><br><span class="line">tree[node].max = <span class="built_in">max</span>(<span class="built_in">max</span>(tree[lson].max,tree[rson].max),tree[lson].Rmax+tree[rson].Lmax);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">tree[node].l = l,tree[node].r = r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].sum = a[l];</span><br><span class="line">tree[node].max = a[l];</span><br><span class="line">tree[node].Lmax = a[l];</span><br><span class="line">tree[node].Rmax = a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid),<span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].l==tree[node].r&amp;&amp;tree[node].r==x)&#123;</span><br><span class="line">tree[node].sum = y;</span><br><span class="line">tree[node].max = y;</span><br><span class="line">tree[node].Lmax = y;</span><br><span class="line">tree[node].Rmax = y;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = tree[node].l+tree[node].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(lson,x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(rson,x,y);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">st <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=tree[node].l&amp;&amp;y&gt;=tree[node].r)&#123;</span><br><span class="line"><span class="keyword">return</span> tree[node];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = tree[node].l+tree[node].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(y&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(lson,x,y);</span><br><span class="line"><span class="keyword">if</span>(x&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(rson,x,y);</span><br><span class="line">st L = <span class="built_in">query</span>(lson,x,y),R = <span class="built_in">query</span>(rson,x,y),res;</span><br><span class="line">res.Lmax = <span class="built_in">max</span>(L.Lmax,L.sum+R.Lmax);</span><br><span class="line">res.Rmax = <span class="built_in">max</span>(R.Rmax,R.sum+L.Rmax);</span><br><span class="line">res.sum = L.sum+R.sum;</span><br><span class="line">res.max = <span class="built_in">max</span>(<span class="built_in">max</span>(L.max,R.max),L.Rmax+R.Lmax);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">x = <span class="built_in">read</span>(),y = <span class="built_in">read</span>(),z = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&gt;z) <span class="built_in">swap</span>(y,z);</span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,y,z).max&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>,y,z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="0x44-分块"><a href="#0x44-分块" class="headerlink" title="0x44 分块"></a>0x44 分块</h4><h4 id="0x45-点分治"><a href="#0x45-点分治" class="headerlink" title="0x45 点分治"></a>0x45 点分治</h4><h4 id="0x46-二叉查找树与平衡树初步"><a href="#0x46-二叉查找树与平衡树初步" class="headerlink" title="0x46 二叉查找树与平衡树初步"></a>0x46 二叉查找树与平衡树初步</h4><h4 id="0x47-离线分治算法"><a href="#0x47-离线分治算法" class="headerlink" title="0x47 离线分治算法"></a>0x47 离线分治算法</h4><h4 id="0x48-可持久化数据结构"><a href="#0x48-可持久化数据结构" class="headerlink" title="0x48 可持久化数据结构"></a>0x48 可持久化数据结构</h4><h4 id="总结与练习"><a href="#总结与练习" class="headerlink" title="总结与练习"></a>总结与练习</h4>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sb代码合集</title>
      <link href="/2022/11/16/sb%E4%BB%A3%E7%A0%81%E5%90%88%E9%9B%86/"/>
      <url>/2022/11/16/sb%E4%BB%A3%E7%A0%81%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d755494aa87eb7d21c52baef3c946f14a9605a06a4fbc06c80b59c420fa0a361"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《算法竞赛进阶指南》第二章 读书笔记</title>
      <link href="/2022/10/26/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/26/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p><del>是可爱的数据结构!</del></p></li><li><p>竞赛复健,自用向整理</p></li><li>为简约文本,代码均省略开头部分</li><li>书中所有例题均在acwing上可以找到</li></ul><h3 id="0x10-基本数据结构"><a href="#0x10-基本数据结构" class="headerlink" title="0x10 基本数据结构"></a>0x10 基本数据结构</h3><h4 id="0x11-栈"><a href="#0x11-栈" class="headerlink" title="0x11 栈"></a>0x11 栈</h4><ul><li><p>例题: Push,Pop,GetMin</p><ul><li><p>开一个大根堆和一个栈,模拟操作,当栈被弹出的值与大根堆堆顶值相同时,弹出大根堆堆顶即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> s[<span class="number">110</span>];</span><br><span class="line">    <span class="type">int</span> Top = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt; q;</span><br><span class="line">    <span class="built_in">MinStack</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        s[++Top] = x;</span><br><span class="line">        q.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q.<span class="built_in">top</span>()==s[Top]) q.<span class="built_in">pop</span>();</span><br><span class="line">        Top--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s[Top];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 编辑器</p><ul><li><p>开两个栈来模拟左右移动的操作,并记录以$i$为结尾的最大值和前缀和,每次有新值插入光标后时,更新最大值和前缀和即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[MAXN],MAX[MAXN],n,top,k,b[MAXN],top2,sum[MAXN];</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">a[++top] = k;</span><br><span class="line">sum[top] = sum[top<span class="number">-1</span>]+a[top];</span><br><span class="line">MAX[top] = <span class="built_in">max</span>(MAX[top<span class="number">-1</span>],sum[top]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!top) <span class="keyword">return</span>; </span><br><span class="line">MAX[top] = <span class="number">-11451419</span>;</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move_L</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(top==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">b[++top2] = a[top--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move_R</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(top2==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">a[++top] = b[top2--];</span><br><span class="line">sum[top] = sum[top<span class="number">-1</span>]+a[top];</span><br><span class="line">MAX[top] = <span class="built_in">max</span>(MAX[top<span class="number">-1</span>],sum[top]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_max</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> MAX[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 火车进栈</p><ul><li><p>搜索一下即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[MAXN],n,top,b[MAXN],T,cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now==n+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">20</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">cnt++;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(top)&#123;</span><br><span class="line">b[++T] = a[top--];</span><br><span class="line"><span class="built_in">dfs</span>(now);</span><br><span class="line">a[++top] = b[T--];</span><br><span class="line">&#125;</span><br><span class="line">a[++top] = now;</span><br><span class="line"><span class="built_in">dfs</span>(now+<span class="number">1</span>);</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 火车进出栈问题</p><ul><li><p>方法1: 设$f<em>i$表示有$i$个数进栈时的方案数,我们假设第一个数在出栈时排在第$i$个数,有递推式$\sum\limits</em>{i = 1}^{n-1}(f<em>{i-1}×f</em>{n-i})$,会T</p></li><li><p>方法2: dp。设$f<em>{i,j}$表示有$i$个数未入栈,有$j$个数在栈中的方案数,有递推式$f</em>{i,j} = f<em>{i-1,j+1}+f</em>{i,j-1}$,复杂度$O(n^2)$,会T</p></li><li><p>方法3: 卡特兰数。经典问题了,用通项公式求一下卡特兰数就行,要写高精度</p><p><del>你说得对,但是python可以不用写高精度</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">A = math.factorial(<span class="number">2</span> * n)</span><br><span class="line">B = math.factorial(n)</span><br><span class="line"><span class="built_in">print</span>(A // B // B // (n + <span class="number">1</span>))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>表达式计算</p><ul><li><p>中缀表达式: 最常见的表达式,形如$A$  $op$  $B$,其中$op$是操作符</p></li><li><p>后缀表达式: 又称逆波兰式,形如$1$  $2$  $op$,计算流程就是遇到数字把数字压入栈中,遇到计算符把栈头两个元素弹出进行计算,后再将新值压入栈中</p></li><li><p>前缀表达式: 又称波兰式,形如 $op$  $1$  $2$,计算流程同理后缀表达式,只是从后往前扫描</p></li><li><p>中缀表达式转后缀表达式:</p><ul><li><p>1.建立一个用于存储运算符的栈,扫描中缀表达式中的每个值:</p><p>(1).遇到数字,输出该数。</p><p>(2).遇到左括号,把左括号入栈</p><p>(3).遇到右括号,不断取出栈顶并输出,直到栈顶为左括号,然后把左括号出栈</p><p>(4).如果遇到运算符,只要把栈顶符号的优先级不低于新符号,就不断取出栈顶并输出,最后把新符号进栈。优先级为乘除$&gt;$加减$&gt;$左括号</p></li><li><p>2.最后依次取出栈中剩余值并输出,最终输出序列就是一个与原中缀表达式等价的后缀表达式</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Calc_RevPolish</span><span class="params">()</span></span>&#123;<span class="comment">//后缀表达式计算</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">c = s[i];</span><br><span class="line"><span class="keyword">if</span>(c&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;<span class="string">&#x27;9&#x27;</span>) a[++top] = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) x = a[top--],y = a[top--],a[++top] = y-x;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>) x = a[top--],y = a[top--],a[++top] = y+x;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;*&#x27;</span>) x = a[top--],y = a[top--],a[++top] = y*x;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;/&#x27;</span>) x = a[top--],y = a[top--],a[++top] = y/x;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;a[top--];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 表达式计算4</p><ul><li><p>把中缀表达式转化为后缀表达式后计算即可。注意,这里会出现负数的情况,需要把负数$-a$转化为$(0-a)$后再进行计算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[MAXN],ans[MAXN];</span><br><span class="line"><span class="type">int</span> a[MAXN];</span><br><span class="line"><span class="type">int</span> top,maxc[<span class="number">610</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f_pow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) res = res*a;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">a*=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">infix_to_RevPolish</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">char</span> a[MAXN],t = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;9&#x27;</span>) ans[++top] = s[i];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i<span class="number">-1</span>]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[i<span class="number">-1</span>]&lt;=<span class="string">&#x27;9&#x27;</span>) ans[++top] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>) a[++t] = s[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(a[t]!=<span class="string">&#x27;(&#x27;</span>) ans[++top] = a[t--];</span><br><span class="line">t--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(maxc[a[t]]&gt;=maxc[s[i]]&amp;&amp;t)</span><br><span class="line">ans[++top] = a[t--];</span><br><span class="line">a[++t] = s[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[n]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[n]&lt;=<span class="string">&#x27;9&#x27;</span>) ans[++top] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(t) ans[++top] = a[t--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc_RevPolish</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> Top = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>,x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="string">&#x27;(&#x27;</span>||ans[i]==<span class="string">&#x27;)&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(ans[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ans[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">res = res*<span class="number">10</span>+ans[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="string">&#x27;#&#x27;</span>) a[++Top] = res,res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="string">&#x27;+&#x27;</span>) x = a[Top--],y = a[Top--],a[++Top] = y+x;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="string">&#x27;-&#x27;</span>) x = a[Top--],y = a[Top--],a[++Top] = y-x;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="string">&#x27;*&#x27;</span>) x = a[Top--],y = a[Top--],a[++Top] = y*x;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="string">&#x27;/&#x27;</span>) x = a[Top--],y = a[Top--],a[++Top] = y/x;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="string">&#x27;^&#x27;</span>) x = a[Top--],y = a[Top--],a[++Top] = <span class="built_in">f_pow</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[Top]==<span class="number">0</span>) cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;a[Top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">maxc[<span class="built_in">int</span>(<span class="string">&#x27;+&#x27;</span>)] = maxc[<span class="built_in">int</span>(<span class="string">&#x27;-&#x27;</span>)] = <span class="number">1</span>;</span><br><span class="line">maxc[<span class="built_in">int</span>(<span class="string">&#x27;*&#x27;</span>)] = maxc[<span class="built_in">int</span>(<span class="string">&#x27;/&#x27;</span>)] = <span class="number">2</span>;</span><br><span class="line">maxc[<span class="built_in">int</span>(<span class="string">&#x27;^&#x27;</span>)] = <span class="number">3</span>;</span><br><span class="line">cin&gt;&gt;(s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">infix_to_RevPolish</span>(<span class="built_in">strlen</span>(s+<span class="number">1</span>));</span><br><span class="line"><span class="built_in">calc_RevPolish</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>单调栈</p><p>一种用于及时排除无用选择,保持决策集合高度有效性和秩序性的数据结构</p><p>例题: 直方图中最大的矩形</p><ul><li><p>显然,如果下一个矩形比上一个小,那么该矩形利用之前的矩形一起构成一块较大的面积时,这块面积的高度就不可能超过该矩形自己的高度。因此,我们可以建立一个栈,维护若干个单调递增的矩形,并在维护的同时求出其贡献值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="built_in">sizeof</span>(w));</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line">top = <span class="number">0</span>;</span><br><span class="line">s[++top] = a[<span class="number">1</span>],w[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">a[n+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=s[top]) s[++top] = a[i],w[top] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> W = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s[top]&gt;a[i]&amp;&amp;top)&#123;</span><br><span class="line">W+=w[top];</span><br><span class="line">ans = <span class="built_in">max</span>(ans,W*s[top]);</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">s[++top] = a[i],w[top] = W+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="0x12-队列"><a href="#0x12-队列" class="headerlink" title="0x12 队列"></a>0x12 队列</h4><ul><li><p>例题: 小组队列</p><ul><li><p>开个队列数组后模拟操作即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> T,n,a,cnt[<span class="number">1000010</span>],End,id[MAXN],k,ans;</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">memset</span>(id,<span class="number">0</span>,<span class="built_in">sizeof</span>(id));</span><br><span class="line">End = <span class="number">0</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q[MAXN];</span><br><span class="line">k++;</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=T;i++)&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line">cnt[a] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Scenario #&quot;</span>&lt;&lt;k&lt;&lt;endl;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;s)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span>(q[id[cnt[a]]].<span class="built_in">size</span>()) q[id[cnt[a]]].<span class="built_in">push</span>(a);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">q[++End].<span class="built_in">push</span>(a);</span><br><span class="line">id[cnt[a]] = End;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q[i].<span class="built_in">size</span>()) i++;</span><br><span class="line">cout&lt;&lt;q[i].<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">q[i].<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 蚯蚓</p><ul><li><p>也算是经典老题了。之前写的题解:<a href="https://xcxc82.github.io/2020/10/05/p2827/">P2827 蚯蚓</a> (yysy现在再回头看自己之前写的一些题解发现写的是真的烂。。。)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q1,q2,q3;</span><br><span class="line"><span class="type">int</span> MAX,l,r,val;</span><br><span class="line"><span class="type">int</span> n,m,q,u,v,t,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">raed</span>(),m = <span class="built_in">read</span>(),q = <span class="built_in">read</span>(),u = <span class="built_in">raed</span>(),v = <span class="built_in">read</span>(),t = <span class="built_in">raed</span>();</span><br><span class="line"><span class="type">double</span> p = (<span class="type">double</span>)u/v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>(),a[i] = -a[i];</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) q1.<span class="built_in">push</span>(-a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> MAX = <span class="number">-1e9</span>;</span><br><span class="line"><span class="keyword">if</span>(!q1.<span class="built_in">empty</span>()) MAX = <span class="built_in">max</span>(MAX,q1.<span class="built_in">front</span>());</span><br><span class="line"><span class="keyword">if</span>(!q2.<span class="built_in">empty</span>()) MAX = <span class="built_in">max</span>(MAX,q2.<span class="built_in">front</span>());</span><br><span class="line"><span class="keyword">if</span>(!q3.<span class="built_in">empty</span>()) MAX = <span class="built_in">max</span>(MAX,q3.<span class="built_in">front</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!q1.<span class="built_in">empty</span>()&amp;&amp;MAX==q1.<span class="built_in">front</span>()) q1.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!q2.<span class="built_in">empty</span>()&amp;&amp;MAX==q2.<span class="built_in">front</span>()) q2.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!q3.<span class="built_in">empty</span>()&amp;&amp;MAX==q3.<span class="built_in">front</span>()) q3.<span class="built_in">pop</span>();</span><br><span class="line">MAX+=q*(i<span class="number">-1</span>);</span><br><span class="line"><span class="type">int</span> L = (<span class="type">double</span>)(p*MAX),R =  MAX - L;</span><br><span class="line">q2.<span class="built_in">push</span>(L-q*i),q3.<span class="built_in">push</span>(R-q*i);</span><br><span class="line"><span class="keyword">if</span>(i%t==<span class="number">0</span>) cout&lt;&lt;MAX&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> MAX = <span class="number">-1e9</span>;</span><br><span class="line"><span class="keyword">if</span>(!q1.<span class="built_in">empty</span>()) MAX = <span class="built_in">max</span>(MAX,q1.<span class="built_in">front</span>());</span><br><span class="line"><span class="keyword">if</span>(!q2.<span class="built_in">empty</span>()) MAX = <span class="built_in">max</span>(MAX,q2.<span class="built_in">front</span>());</span><br><span class="line"><span class="keyword">if</span>(!q3.<span class="built_in">empty</span>()) MAX = <span class="built_in">max</span>(MAX,q3.<span class="built_in">front</span>());</span><br><span class="line"><span class="keyword">if</span>(!q1.<span class="built_in">empty</span>()&amp;&amp;MAX==q1.<span class="built_in">front</span>()) q1.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!q2.<span class="built_in">empty</span>()&amp;&amp;MAX==q2.<span class="built_in">front</span>()) q2.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!q3.<span class="built_in">empty</span>()&amp;&amp;MAX==q3.<span class="built_in">front</span>()) q3.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(MAX==<span class="number">-1e9</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(i%t==<span class="number">0</span>) cout&lt;&lt;MAX+q*m&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>例题: 双端队列</p><ul><li><p>考虑将原序列$a$进行排序,划分为若干个”队列区间”来处理。对于每个”队列区间”,其包含的数字下标在原序列中一定是成”山谷”状(先递减后递增) 的,因此,若没有相同的数字,只需要统计”山谷”的数量即可。</p></li><li><p>再来看有相同的数时的情况。排序后,对于区间$[l,r]$内相同的数字,其顺序可以任意替换,考虑将相同的数划分为若干个区间来处理。贪心的考虑,对于每个区间,若其能连上前一个”队列区间”,就将其合并进去,否则,新建一个”队列区间”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Nums</span>&#123;</span><br><span class="line"><span class="type">int</span> id,v;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="type">int</span> l[MAXN],r[MAXN],tot,ans = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> MIN[MAXN],MAX[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Nums a,Nums b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.v&lt;b.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(MIN,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(MIN));</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i].v = <span class="built_in">raed</span>(),a[i].id = i;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">l[++tot] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].v!=a[i<span class="number">-1</span>].v) r[tot] = i<span class="number">-1</span>,l[++tot] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=l[i];j&lt;=r[i];j++)&#123;</span><br><span class="line">MIN[i] = <span class="built_in">min</span>(MIN[i],a[j].id);</span><br><span class="line">MAX[i] = <span class="built_in">max</span>(MAX[i],a[j].id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> rev = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> now = MIN[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!rev&amp;&amp;MAX[i]&lt;now) now = MIN[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!rev&amp;&amp;MAX[i]&gt;now) rev = <span class="number">1</span>,now = MAX[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(rev&amp;&amp;MIN[i]&gt;now) now = MAX[i];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans++;</span><br><span class="line">now = MIN[i];</span><br><span class="line">rev = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>单调队列</p><center>$如果一位选手比你小,还比你强,那你就打不过他了$</center></li></ul><p>  思想同理单调栈,及时排除决策集合(队列)中一定不是最优解的值</p><p>  例题: 最大子段和</p><ul><li><p>设前前缀和为$sum_i$,有转移$f_i = sum_i - min{ sum_j }(i-j+1≤m)$</p><p>对于两个选择$sum_j$和$sum_k$$(j&lt;k)$,若$sum_k&lt;sum_j$,显然选$k$比选$j$更优,且$k$位更容易满足长度不超过$m$的条件,因此,$j$位永远不会成为最优选项,可以提前排除掉。我们只需维护一个满足$sum$单调递增的队列,即可在$O(n)$的复杂度内解决该问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">raed</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">raed</span>(),sum[i] = sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">q[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l]&lt;i-m) l++;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,sum[i] - sum[q[l]]);</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r&amp;&amp;sum[q[r]]&gt;sum[i]) r--;</span><br><span class="line">q[++r] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="0x13-链表与邻接表"><a href="#0x13-链表与邻接表" class="headerlink" title="0x13 链表与邻接表"></a>0x13 链表与邻接表</h4><ul><li><p>链表模板:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> head,tail,tot; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> value,next,prev;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">tot = <span class="number">2</span>;</span><br><span class="line">head = <span class="number">1</span>,tail = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">1</span>].next = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">2</span>].prev = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> value,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now = ++tot;</span><br><span class="line">a[now] = value;</span><br><span class="line">a[a[x].next].prev = now;</span><br><span class="line">a[now].next = a[x].next;</span><br><span class="line">a[x].next = now;</span><br><span class="line">a[now].prev = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">a[a[x].next].prev = a[x].prev;</span><br><span class="line">a[a[x].prev].next = a[x].next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">tot = head = tail = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>例题: 邻值查找</p><ul><li><p>此题是让我们查询每个数的前驱和后继,我们只需要将原序列排序后组成一个链表,并对于原序列倒序处理,每次查询该数的前驱和后继,并在链表中删除该数即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,c[MAXN];</span><br><span class="line"><span class="type">int</span> head,tail,tot;</span><br><span class="line"><span class="type">int</span> ans[MAXN],Index[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> prev,next,val,id;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Value</span>&#123;</span><br><span class="line"><span class="type">int</span> ind,v;</span><br><span class="line">&#125;b[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Cmp</span><span class="params">(Value a,Value b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.v==b.v) <span class="keyword">return</span> a.ind&gt;b.ind;</span><br><span class="line"><span class="keyword">return</span> a.v&lt;b.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">tot = <span class="number">2</span>;</span><br><span class="line">head = <span class="number">1</span>,tail = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">1</span>].next = tail;</span><br><span class="line">a[<span class="number">2</span>].prev = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">a[++tot].val = v;</span><br><span class="line">a[tot].id = tot<span class="number">-2</span>;</span><br><span class="line">a[a[p].next].prev = tot;</span><br><span class="line">a[tot].next = a[p].next;</span><br><span class="line">a[tot].prev = p;</span><br><span class="line">a[p].next = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">a[a[p].next].prev = a[p].prev;</span><br><span class="line">a[a[p].prev].next = a[p].next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pre</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a[p].prev!=<span class="number">1</span>) <span class="keyword">return</span> a[a[p].prev].val;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Nxt</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a[p].next!=<span class="number">2</span>) <span class="keyword">return</span> a[a[p].next].val;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) b[i].v = <span class="built_in">read</span>(),b[i].ind = i;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>,Cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[b[i].ind] = i;</span><br><span class="line"><span class="built_in">Insert</span>(<span class="number">1</span>,b[<span class="number">1</span>].v);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="built_in">Insert</span>(i+<span class="number">1</span>,b[i].v);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">2</span>;i--)&#123;</span><br><span class="line"><span class="type">int</span> now = c[i]+<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> P_id = a[a[now].prev].id,N_id = a[a[now].next].id;</span><br><span class="line"><span class="type">int</span> pre = <span class="built_in">Pre</span>(now),nxt = <span class="built_in">Nxt</span>(now);</span><br><span class="line"><span class="keyword">if</span>(pre==<span class="number">1e9</span>+<span class="number">10</span>) ans[i] = <span class="built_in">abs</span>(a[now].val - nxt),Index[i] = b[N_id].ind;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nxt==<span class="number">1e9</span>+<span class="number">10</span>) ans[i] = <span class="built_in">abs</span>(a[now].val - pre),Index[i] = b[P_id].ind;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(a[now].val-nxt)&lt;<span class="built_in">abs</span>(a[now].val-pre))&#123;</span><br><span class="line">ans[i] = <span class="built_in">abs</span>(a[now].val - nxt),Index[i] = b[N_id].ind;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans[i] = <span class="built_in">abs</span>(a[now].val - pre),Index[i] = b[P_id].ind;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Delete</span>(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,ans[i],Index[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>邻接表&amp;&amp;链式前向星:</p><ul><li><p>本质上是”带有索引数组的多个数据链表”。是树与图的一般存储方式,其结构见下图：</p><p><img src="https://pic.jitudisk.com/public/2022/11/07/f3d2c65968c40.png" alt=""></p></li><li><p>上图中,$head_u$就是每个节点的”索引数组”,每次连接新边时,将其插入到对应链表头部。</p></li><li><p>邻接表的实现通常采用<code>vector</code>,不太好写,因此一般会使用链式前向星(数组模拟邻接表)来实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tot = <span class="number">1</span>,head[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> next,v,w;</span><br><span class="line">&#125;edge[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,v,w)</span></span>&#123; <span class="comment">//加边</span></span><br><span class="line">edge[tot].v = v;</span><br><span class="line">edge[tot].w = w;</span><br><span class="line">edge[tot].next = head[u];</span><br><span class="line">head[u] = tot++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="0x14-Hash"><a href="#0x14-Hash" class="headerlink" title="0x14 Hash"></a>0x14 Hash</h4><ul><li><p>$Hash$表</p><ul><li>类似离散化的思想,使用$Hash$函数将若干复杂数值映射到一个容易维护的值域内,对于映射为相同值的冲突情况,建立一个邻接表,将映射为同一值的元素归为一类,每次插入新元素时,检测该元素是否存在,若不存在,则在表头插入该元素,期望复杂度$O(1)$。</li></ul></li><li><p>例题: 雪花雪花雪花</p><ul><li><p>对于两个不相同的雪花, 有$\sum\limits<em>{i = 1}^6a</em>{x,i}+\prod\limits<em>{i = 1}^6a</em>{x,i} = \sum\limits<em>{i = 1}^6a</em>{y,i}+\prod\limits<em>{i = 1}^6a</em>{y,i}$,用归纳法易证。</p><p>因此,我们可以定义一个哈希函数$H<em>x = (\sum\limits</em>{i = 1}^6a<em>{x,i}+\prod\limits</em>{i = 1}^6a_{x,i}) \bmod p$,其中,$p$取最接近$n$的质数时复杂度最优,每次插入新雪花时,判断是否有与其相同的雪花即可。对于随机数据,期望复杂度$O(\frac{n^2}{p})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[MAXN][<span class="number">10</span>],n,head[MAXN],tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> cnt,next,id;</span><br><span class="line">&#125;h[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Equal</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> p1,p2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">6</span>;j++)&#123;</span><br><span class="line"><span class="type">bool</span> ep = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">5</span>;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[x][(i+k<span class="number">-1</span>)%<span class="number">6</span>+<span class="number">1</span>]!=a[y][(j+k<span class="number">-1</span>)%<span class="number">6</span>+<span class="number">1</span>]) ep = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ep) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">ep = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">5</span>;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[x][(i+k<span class="number">-1</span>)%<span class="number">6</span>+<span class="number">1</span>]!=a[y][(j-k+<span class="number">6</span><span class="number">-1</span>)%<span class="number">6</span>+<span class="number">1</span>]) ep = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ep) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">h[tot].cnt++;</span><br><span class="line">h[tot].id = id;</span><br><span class="line">h[tot].next = head[u];</span><br><span class="line">head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hash</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> PAI = <span class="number">1</span>,SUM = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)&#123;</span><br><span class="line">SUM = (SUM+a[x][i])%P;</span><br><span class="line">PAI = (<span class="type">long</span> <span class="type">long</span>)PAI*a[x][i]%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> u = (SUM+PAI)%P;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = h[i].next)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Equal</span>(h[i].id,x))&#123;</span><br><span class="line">h[i].cnt++,b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Add</span>(u,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>字符串哈希</p><ul><li><p>取一固定值$P$,把字符串看作$P$进制数,并对于每种字符$c$,分配一个的对应的值$v_c(P&gt;v_c&gt;0)$。举例来说,若字符串$S$的映射值为$X$,则$S+c$的映射值就为$(X×P+v_c) \bmod M$</p><p>一般来说,取$P = 131$或$P = 13331$时起哈希冲突的概率最小。通常我们取$M = 2^{64}$,即直接使用<code>unsigned long long</code>类型对哈希值进行存储。这样可以避免低效的取模运算</p><p>若已知字符串S的哈希值为$H<em>S$,字符串$S+T$的哈希值为$H</em>{S+T}$,那么字符串$T$的哈希值就为$H_{S+T} - H_S×P^{length(T)}$,等价于在$P$进制下将$S$左移对齐$S+T$,两者相减即为$H_T$</p></li></ul></li><li><p>例题: 兔子与兔子</p><ul><li><p>模板题。用上述思想求解即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="type">int</span> n,l1,r1,l2,r2;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> f[MAXN],p[MAXN],x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">s = <span class="string">&#x27; &#x27;</span>+s;</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=s.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">f[i] = f[i<span class="number">-1</span>]*P+s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">p[i] = p[i<span class="number">-1</span>]*P;</span><br><span class="line">&#125;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">l1 = <span class="built_in">read</span>(),r1 = <span class="built_in">read</span>(),l2 = <span class="built_in">read</span>(),r2 = <span class="built_in">read</span>();</span><br><span class="line">x = f[r1] - f[l1<span class="number">-1</span>]*p[r1-l1+<span class="number">1</span>],y = f[r2] - f[l2<span class="number">-1</span>]*p[r2-l2+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 回文子串的最大长度</p><ul><li><p>算法一: 对于每个字符$s_i$,使用二分+哈希求出其最大回文长度即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="type">int</span> n,ans;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a,b;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> pre[MAXN],last[MAXN],p[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">a = last[n-x+<span class="number">1</span>+mid] - last[n-x]*p[mid+<span class="number">1</span>];</span><br><span class="line">b = pre[y+mid] - pre[y<span class="number">-1</span>]*p[mid+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(a==b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>,r = <span class="built_in">min</span>(x<span class="number">-1</span>,n-y);</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid,x,y)) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,r*<span class="number">2</span>+(y-x+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;(s+<span class="number">1</span>))&#123;</span><br><span class="line"><span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="built_in">sizeof</span>(last));</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="built_in">sizeof</span>(pre));</span><br><span class="line"><span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="built_in">sizeof</span>(p));</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">ans = <span class="number">1</span>;</span><br><span class="line">n = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">&#x27;E&#x27;</span>&amp;&amp;s[<span class="number">2</span>]==<span class="string">&#x27;N&#x27;</span>&amp;&amp;s[<span class="number">3</span>]==<span class="string">&#x27;D&#x27;</span>&amp;&amp;n==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">last[i] = last[i<span class="number">-1</span>]*P+(s[n-i+<span class="number">1</span>]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">pre[i] = pre[i<span class="number">-1</span>]*P+(s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">p[i] = p[i<span class="number">-1</span>]*P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]!=s[i<span class="number">-1</span>]) <span class="built_in">cal</span>(i,i);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cal</span>(i,i),<span class="built_in">cal</span>(i<span class="number">-1</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case %d: %d\n&quot;</span>,k,ans);</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>算法二: 见笔记 <a href="https://xcxc82.github.io/2020/10/23/manacher%E7%AE%97%E6%B3%95/">manacher算法</a> (以后用空了真的想把这些学习笔记重构下,写的实在是太乱了。。)</li></ul><ul><li><p>例题: 后缀数组(SA)</p><ul><li><p>这里直接用快速排序进行字典排序会被卡成$n^2logn$,因此考虑使用二分+哈希,找到第一个字符不同的位置。复杂度$O(nlog^2n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,SA[MAXN],height[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> a,b;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> f[MAXN],p[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Check</span><span class="params">(<span class="type">int</span> mid,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">a = f[x+mid<span class="number">-1</span>]-f[x<span class="number">-1</span>]*p[mid];</span><br><span class="line">b = f[y+mid<span class="number">-1</span>]-f[y<span class="number">-1</span>]*p[mid];</span><br><span class="line"><span class="keyword">if</span>(a==b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>,r = <span class="built_in">min</span>(n-a+<span class="number">1</span>,n-b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Check</span>(mid,a,b)) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s[a+l]&lt;s[b+l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Get_Height</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>,r = <span class="built_in">min</span>(n-a+<span class="number">1</span>,n-b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Check</span>(mid,a,b)) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;(s+<span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">SA[i] = i;</span><br><span class="line">f[i] = f[i<span class="number">-1</span>]*P+(s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);<span class="comment">//前i个字符的哈希值 </span></span><br><span class="line">p[i] = p[i<span class="number">-1</span>]*P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(SA+<span class="number">1</span>,SA+<span class="number">1</span>+n,Cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,SA[i]<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">height[i] = <span class="built_in">Get_Height</span>(SA[i],SA[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,height[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="0x15-字符串"><a href="#0x15-字符串" class="headerlink" title="0x15 字符串"></a>0x15 字符串</h4><ul><li>暂时略过。之后再补</li></ul><h4 id="0x16-Tire"><a href="#0x16-Tire" class="headerlink" title="0x16 Tire"></a>0x16 Tire</h4><h4 id="0x17-二叉堆"><a href="#0x17-二叉堆" class="headerlink" title="0x17 二叉堆"></a>0x17 二叉堆</h4><ul><li><p>例题: 超市</p><ul><li><p>带后悔的贪心。我们将每个商品按过期时间从大到小排序, 并开一个小根堆, 扫描每个商品:</p><p>若当前商品的过期日期大于当前商品个数(堆的大小),直接将该商品放入堆中</p><p>若当前商品的过期日期等于当前商品个数且当前商品的价值大于堆中最小的商品价值,则将该商品放入堆中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Item</span>&#123;</span><br><span class="line"><span class="type">int</span> p,d;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Cmp</span><span class="params">(Item a,Item b)</span></span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,Cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].d&gt;q.<span class="built_in">size</span>()) q.<span class="built_in">push</span>(a[i].p);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i].d==q.<span class="built_in">size</span>()&amp;&amp;a[i].p&gt;q.<span class="built_in">top</span>())&#123;</span><br><span class="line">q.<span class="built_in">pop</span>(),q.<span class="built_in">push</span>(a[i].p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">ans+=q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 合并序列</p><ul><li><p>先来考虑只有两个序列时的简单情况, 先将两个序列$a$,$b$排序, 最小的值显然是$a<em>1+b_1$,次小值则为$min{a_1+b_2,a_2+b_1}$,假设$a_1+b_2$为次小值,那么第三小值即为$min{a_1+b_3,a_2+b_2,a_2+b_1}$,也就是说,当$a_i+b_j$成为第$k$小值后,$a</em>{i+1},b<em>j$和$a_i,b</em>{j+1}$便会加入第$k+1$小值的”备选队列”</p><p>对此,我们只需要开一个堆,储存一个三元组$(i,j,a<em>i+b_j)$,每次取出最小的$a_i+b_j$,再将$(i+1,j,a</em>{i+1}+b<em>j)$和$(i,j+1,a_i+b</em>{j+1})$插入堆中即可</p><p>对于$n$个序列的情况,我们只需要每次进行两两合并即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,T;</span><br><span class="line"><span class="type">int</span> a[MAXN],vis[MAXN][MAXN],ans[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Node &amp;a,<span class="type">const</span> Node &amp;b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Node&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res[MAXN];</span><br><span class="line">res[<span class="number">1</span>] = ans[<span class="number">1</span>]+a[<span class="number">1</span>]; </span><br><span class="line">Node b,c;</span><br><span class="line">b.i = <span class="number">1</span>,b.j = <span class="number">2</span>,b.val = -(ans[b.i]+a[b.j]),q.<span class="built_in">push</span>(b);</span><br><span class="line">b.i = <span class="number">2</span>,b.j = <span class="number">1</span>,b.val = -(ans[b.i]+a[b.j]),q.<span class="built_in">push</span>(b);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=m;i++)&#123;</span><br><span class="line">res[i] = -q.<span class="built_in">top</span>().val;</span><br><span class="line">b = q.<span class="built_in">top</span>(),q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(!vis[b.i+<span class="number">1</span>][b.j])&#123;</span><br><span class="line">c.i = b.i+<span class="number">1</span>,c.j = b.j,c.val = -(ans[b.i+<span class="number">1</span>]+a[b.j]),q.<span class="built_in">push</span>(c);</span><br><span class="line">vis[b.i+<span class="number">1</span>][b.j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!vis[b.i][b.j+<span class="number">1</span>])&#123;</span><br><span class="line">c.i = b.i,c.j = b.j+<span class="number">1</span>,c.val = -(ans[b.i]+a[b.j+<span class="number">1</span>]),q.<span class="built_in">push</span>(c);</span><br><span class="line">vis[b.i][b.j+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">ans[i] = res[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) ans[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">sort</span>(ans+<span class="number">1</span>,ans+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) a[j] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">merge</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 数据备份</p><ul><li><p>解法1:</p><p>考虑动态规划。设$f_{i,j,0/1}$表示前$i$个数中,选了$j$个数,第$i$个数选了/没选时的最优解。转移比较显然,就不写了,再用滚动数组优化一下可以取得<del>75~95pts的高分</del>(看题解区的大佬说好像还可以用wqs二分优化? 不过没学过就是了= =)</p></li><li><p>解法2</p><p>很巧妙的找性质+带后悔贪心。首先考虑$k=1$时的情况,显然最小值即为所求解;</p><p>接着看$k=2$时的情况,当第$i$个数被选择时,第$i-1$和第$i+1$个数都无法被选择,因此如果不选择第$i$个数,则第$i+1$和第$i-1$和数要么都选上,要么都不选,否则直接选第$i$个数一定更优。也就是说,在最优解中,最小值左右两侧的值只能同时被选择。</p><p>因此,我们可以使用一个小根堆和链表来进行决策选择,每次选择都将小根堆中的最小值并入答案,同时在链表中删除该最小值对应的节点$p$和其左右两边的两个点,并在原位置插入一个新的”反悔”节点 , 使其权值等于$v<em>{p.next}+v</em>{p.prev} - v_p$,也就是说,如果后面某次操作中,选择了该节点,则说明对于全局来说,选择左右两个节点更优,相当于对之前的选择进行了一次”后悔” (好吧我承认自己也将不太清这种题型= =,得开个专题好好研究一下)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> head,tot,tail,val,ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> val,id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Node &amp;a,<span class="type">const</span> Node &amp;b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&gt;b.val;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Node&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Link_List</span>&#123;</span><br><span class="line"><span class="type">int</span> prev,next,val;</span><br><span class="line">&#125;p[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">head = <span class="number">1</span>,tail = <span class="number">2</span>;</span><br><span class="line">p[head].val = p[tail].val = INF;</span><br><span class="line">tot = <span class="number">2</span>;</span><br><span class="line">p[head].next = tail,p[tail].prev = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">p[++tot].val = val;</span><br><span class="line">p[p[x].next].prev = tot;</span><br><span class="line">p[tot].next = p[x].next;</span><br><span class="line">p[tot].prev = x;</span><br><span class="line">p[x].next = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>||x==<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">p[p[x].next].prev = p[x].prev;</span><br><span class="line">p[p[x].prev].next = p[x].next; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,k,a[MAXN],b[MAXN],vis[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line">n = <span class="built_in">read</span>(),k = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) b[i] = a[i] - a[i<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">insert</span>(<span class="number">1</span>,b[<span class="number">2</span>]),q.<span class="built_in">push</span>(Node&#123;b[<span class="number">2</span>],<span class="number">3</span>&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++) <span class="built_in">insert</span>(i,b[i]),q.<span class="built_in">push</span>(Node&#123;b[i],i+<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;vis[q.<span class="built_in">top</span>().id]) q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">top</span>().id;</span><br><span class="line">ans+=q.<span class="built_in">top</span>().val;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">val = p[p[now].next].val+p[p[now].prev].val-p[now].val;</span><br><span class="line">vis[p[now].next] = <span class="number">1</span>,vis[p[now].prev] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">del</span>(p[now].next),<span class="built_in">del</span>(p[now].prev);</span><br><span class="line">p[now].val = val;</span><br><span class="line">q.<span class="built_in">push</span>(Node&#123;val,now&#125;);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>哈夫曼(Huffman)树</p><ul><li><p>引入:</p><p>考虑这样一个问题,假设一颗$k$叉树有$n$个带权叶子节点,其中第$i$个叶子节点的值为$w<em>i$,到根节点的距离为$l_i$,现要求求出一种二叉树的构造方式,使得$\sum\limits</em>{i=1}^nw_il_i$最小化</p></li><li><p>解法($k=2$):</p><p>$\sum\limits_{i=1}^nw_il_i$最小的树被称为$k$叉$huffman$树(哈夫曼树)。一种比较直接的思路是$w$较大的节点放在较下面时最优,用反证法易证。当$k=2$时,其构造方式如下:</p><p>1.开一个小根堆,把所有的权值全部插入堆中</p><p>2.取出其中最小的两个值$w_1$和$w_2$</p><p>3.建立一个….并将其再次插入堆中</p><p>4.重复第步骤1~3,直到只剩最后一个值在堆中</p></li><li><p>解法($k&gt;2$)</p><p>一种比较直接的想法是把上述的”取最小的两个数”改成”取最小的$k$个数”,不过,仔细思考会发现,若最后一次取数时,堆的大小$&lt;k$,不足以取出$k$个,那么根节点的子节点数量将会小于$k$,这显然不是最优解,把下面任何一个叶子节点移上来,改为根的子节点都将更优</p><p>因此,我们需要在开始合并前,增加一些权值为$0$的节点,使得$(n-1) \bmod (k-1) = 0$(计算一下易证),这样,子节点不足$k$的情况就会发生在叶子节点处,而非根节点处</p></li></ul></li><li><p>例题: 荷马史诗</p><ul><li><p>首先有一个性质,如果把哈夫曼树看作一颗”trie树”,那么显然每个叶子节点代表的”单词”都是不同的,也就是说$k$叉哈夫曼树的构造方式就是本题的构造方式,因此,我们只需要构造出一颗$k$叉哈夫曼树即可。对于使最长的$s_i$最小的限制,只需要在每次合并时取长度,也就是合并次数最少节点合并即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ll n,k,val,cnt,res;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">ll val;</span><br><span class="line">ll cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Node &amp;a,<span class="type">const</span> Node &amp;b)&#123;</span><br><span class="line"><span class="keyword">if</span>(a.val==b.val) <span class="keyword">return</span> a.cnt&gt;b.cnt;   </span><br><span class="line"><span class="keyword">return</span> a.val&gt;b.val;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Node&gt; q;</span><br><span class="line">ll w[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),k = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i] = <span class="built_in">read</span>(),q.<span class="built_in">push</span>(Node&#123;w[i],<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>((n<span class="number">-1</span>)%(k<span class="number">-1</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">w[++n] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(Node&#123;w[n],<span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>()!=<span class="number">1</span>)&#123;</span><br><span class="line">val = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++) val+=q.<span class="built_in">top</span>().val,cnt = <span class="built_in">max</span>(cnt,q.<span class="built_in">top</span>().cnt),q.<span class="built_in">pop</span>();</span><br><span class="line">res = <span class="built_in">max</span>(res,cnt);</span><br><span class="line">q.<span class="built_in">push</span>(Node&#123;val,cnt+<span class="number">1</span>&#125;);</span><br><span class="line">ans+=val;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl&lt;&lt;res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="0x18-总结与练习"><a href="#0x18-总结与练习" class="headerlink" title="0x18 总结与练习"></a>0x18 总结与练习</h4><ul><li><p>括号画家</p><ul><li><p>解法挺多的,这边用的是普通的dp解法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line">pair&lt;<span class="type">char</span>,<span class="type">int</span>&gt; a[MAXN];</span><br><span class="line"><span class="type">int</span> ans,MAX[MAXN],top,last,now; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">s = <span class="string">&#x27; &#x27;</span>+s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=s.<span class="built_in">length</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> last = a[top].second;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;&#123;&#x27;</span>||s[i]==<span class="string">&#x27;(&#x27;</span>||s[i]==<span class="string">&#x27;[&#x27;</span>) a[++top] = <span class="built_in">make_pair</span>(s[i],i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[top].first==<span class="string">&#x27;&#123;&#x27;</span>&amp;&amp;s[i]==<span class="string">&#x27;&#125;&#x27;</span>) top--,MAX[i] = MAX[last<span class="number">-1</span>]+<span class="number">2</span>+MAX[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[top].first==<span class="string">&#x27;(&#x27;</span>&amp;&amp;s[i]==<span class="string">&#x27;)&#x27;</span>) top--,MAX[i] = MAX[last<span class="number">-1</span>]+<span class="number">2</span>+MAX[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[top].first==<span class="string">&#x27;[&#x27;</span>&amp;&amp;s[i]==<span class="string">&#x27;]&#x27;</span>) top--,MAX[i] = MAX[last<span class="number">-1</span>]+<span class="number">2</span>+MAX[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,MAX[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>城市游戏</p><ul><li><p>记得之前自己第一次做这题的时候还是用一个听起来很nb的”悬线法dp”的方法来解的= =。实际上直接单调栈就行了,对每个点求其最高扩展距离,然后对每一行进行枚举即可。(OI wiki上的悬线法的介绍中也有写到”悬线法能解决的问题范围是单调栈的子集”)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> up[MAXN][MAXN],n,m;</span><br><span class="line"><span class="type">int</span> s[MAXN],top,w[MAXN],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;F&#x27;</span>) up[i][j] = up[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> up[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="built_in">sizeof</span>(w));</span><br><span class="line">top = <span class="number">0</span>;</span><br><span class="line">s[++top] = up[i][<span class="number">1</span>],w[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=m+<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(up[i][j]&gt;=s[top]) s[++top] = up[i][j],w[top] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> W = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s[top]&gt;up[i][j])&#123;</span><br><span class="line">W+=w[top];</span><br><span class="line">ans = <span class="built_in">max</span>(ans,W*s[top]);</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">s[++top] = up[i][j],w[top] = W+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="number">3</span>*ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>双栈排序</p><ul><li>随便写了个看起来就很假的贪心交了上去,取得了<del>30pts的好成绩</del>。正解似乎要用到二分图染色? <del>那等我复习完图论后再来补吧</del></li></ul></li><li><p>滑动窗口</p><ul><li><p>经典单调队列题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,a[MAXN],q[MAXN],l,r;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Max</span><span class="params">()</span></span>&#123;</span><br><span class="line">l = <span class="number">0</span>,r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l]&lt;=i-m) l++;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r&amp;&amp;a[q[r]]&lt;a[i]) r--;</span><br><span class="line">q[++r] = i;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=m) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[q[l]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Min</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l]&lt;=i-m) l++;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r&amp;&amp;a[q[r]]&gt;a[i]) r--;</span><br><span class="line">q[++r] = i;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=m) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[q[l]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">Get_Min</span>();</span><br><span class="line"><span class="built_in">Get_Max</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>内存分配</p><ul><li><p>毒瘤模拟题。。。坑点挺多的,这边用了官方题解里的vector模拟链表的写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,t,m,p,ans,cnt,w;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Process</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,t,p,len;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Process x) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> l &lt; x.l;</span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Process&gt; memory;</span><br><span class="line">queue&lt;Process&gt; wait_queue;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">work</span><span class="params">(Process x,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(memory.<span class="built_in">empty</span>()||memory[<span class="number">0</span>].l&gt;=x.len)&#123;</span><br><span class="line">x.l = <span class="number">0</span>;</span><br><span class="line">x.t = t;</span><br><span class="line">x.r= x.l + x.len;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, x.t + x.p);</span><br><span class="line">memory.<span class="built_in">push_back</span>(x);</span><br><span class="line"><span class="built_in">sort</span>(memory.<span class="built_in">begin</span>(),memory.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len = memory.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, memory[i].t + memory[i].p);</span><br><span class="line"><span class="keyword">if</span>(memory[i].l - memory[i<span class="number">-1</span>].r&gt;=x.len)&#123;</span><br><span class="line">x.l = memory[i<span class="number">-1</span>].r;</span><br><span class="line">x.r= x.l + x.len;</span><br><span class="line">x.t = t;</span><br><span class="line">memory.<span class="built_in">push_back</span>(x);</span><br><span class="line"><span class="built_in">sort</span>(memory.<span class="built_in">begin</span>(),memory.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n-memory[len].r&gt;=x.len)&#123;</span><br><span class="line">x.l = memory[len].r;</span><br><span class="line">x.r  = x.l + x.len;</span><br><span class="line">x.t = t;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, x.t + x.p);</span><br><span class="line">memory.<span class="built_in">push_back</span>(x);</span><br><span class="line"><span class="built_in">sort</span>(memory.<span class="built_in">begin</span>(),memory.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">(<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;memory.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(memory[i].t+memory[i].p&lt;=t) memory.<span class="built_in">erase</span>(memory.<span class="built_in">begin</span>()+i--);</span><br><span class="line"><span class="keyword">else</span> now = <span class="built_in">min</span>(now,memory[i].p+memory[i].t);</span><br><span class="line">&#125;</span><br><span class="line">Process x;</span><br><span class="line"><span class="keyword">while</span>(wait_queue.<span class="built_in">size</span>())&#123;</span><br><span class="line">x = wait_queue.<span class="built_in">front</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">work</span>(x,w))&#123;</span><br><span class="line">now = <span class="built_in">min</span>(now,wait_queue.<span class="built_in">front</span>().t + wait_queue.<span class="built_in">front</span>().p);</span><br><span class="line">wait_queue.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">w = now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">(Process x)</span></span>&#123;</span><br><span class="line">cnt++;</span><br><span class="line">wait_queue.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">w = INF;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line">Process x;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;t&gt;&gt;m&gt;&gt;p)&#123;</span><br><span class="line"><span class="keyword">if</span>(!t&amp;&amp;!m&amp;&amp;!p) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span>(t&gt;=w) <span class="built_in">release</span>(w); <span class="comment">//注意这里不能一次删完(release(t)),题里说了只要一有空位就把队头插进去,要一次次的删 </span></span><br><span class="line">x.t = t,x.len = m,x.p = p;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">work</span>(x,t))&#123;</span><br><span class="line">w = <span class="built_in">min</span>(w,t+p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">wait</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(wait_queue.<span class="built_in">size</span>())&#123;</span><br><span class="line"><span class="built_in">release</span>(w);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl&lt;&lt;cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>矩阵</p><ul><li><p>二维哈希。哈希本质上就是加权相加,因此我们可以把矩阵的每一列每一行像二维前缀和那样进行表示即可。另外题也是真的卡常= = 多写了三个循环就过不去了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> eq;</span><br><span class="line"><span class="type">int</span> n,m,a,b,q;</span><br><span class="line"><span class="type">int</span> ans[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN],qs[MAXN][MAXN];</span><br><span class="line">ull A[MAXN][MAXN],B[MAXN][MAXN],p1[MAXN],p2[MAXN],x;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">x = A[i][j] - A[i-a][j]*p2[a] - A[i][j-b]*p1[b] + A[i-a][j-b]*p2[a]*p1[b];</span><br><span class="line"><span class="keyword">if</span>(x==B[a][b]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, qs[i] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b; j++)</span><br><span class="line">B[i][j] = B[i][j<span class="number">-1</span>] * P1 + (qs[i][j]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b; j++)</span><br><span class="line">B[i][j] += B[i<span class="number">-1</span>][j] * P2;</span><br><span class="line"><span class="keyword">return</span> B[a][b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">p1[<span class="number">0</span>] = <span class="number">1</span>,p2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;MAXN;i++) p1[i] = p1[i<span class="number">-1</span>]*P1;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;MAXN;i++) p2[i] = p2[i<span class="number">-1</span>]*P2; </span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>(),a = <span class="built_in">read</span>(),b = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">A[i][j] = A[i][j<span class="number">-1</span>]*P1+(s[j]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">A[i][j] = A[i<span class="number">-1</span>][j]*P2+A[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q = <span class="built_in">read</span>();</span><br><span class="line">map&lt;ull, vector&lt;<span class="type">int</span>&gt; &gt; qans;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++) qans[<span class="built_in">get</span>()].<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a; i &lt;= m; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = b; j &lt;= n; j++) &#123;</span><br><span class="line">ull k = A[i][j] - A[i-a][j]*p2[a] - A[i][j-b]*p1[b] + A[i-a][j-b]*p2[a]*p1[b];</span><br><span class="line"><span class="keyword">if</span> (qans.<span class="built_in">find</span>(k) != qans.<span class="built_in">end</span>())</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; qans[k].<span class="built_in">size</span>(); i++)</span><br><span class="line">ans[qans[k][i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) cout &lt;&lt; (ans[i] ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>树形地铁系统</p></li><li><p>项链</p></li><li><p>奶牛矩阵</p></li><li><p>匹配统计</p><ul><li><p>hash水题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[MAXN],b[MAXN];</span><br><span class="line"><span class="type">int</span> n,m,q,x;</span><br><span class="line"><span class="type">int</span> buc[MAXN];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> p[MAXN],f1[MAXN],f2[MAXN];</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">Hash_A</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> f1[r] - f1[l<span class="number">-1</span>]*p[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">Hash_B</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> f2[r] - f2[l<span class="number">-1</span>]*p[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Check</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>,r = <span class="built_in">min</span>(n-i+<span class="number">1</span>,m);</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Hash_A</span>(i,i+mid<span class="number">-1</span>)==<span class="built_in">Hash_B</span>(<span class="number">1</span>,mid)) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">buc[l]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">f1[i] = f1[i<span class="number">-1</span>]*P+(a[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">p[i] = p[i<span class="number">-1</span>]*P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;b[i];</span><br><span class="line">f2[i] = f2[i<span class="number">-1</span>]*P+(b[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">p[i] = p[i<span class="number">-1</span>]*P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">Check</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">x = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,buc[x]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>电话列表</p><ul><li><p>trie水题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">string s[MAXN];</span><br><span class="line"><span class="type">bool</span> eq;</span><br><span class="line"><span class="type">int</span> trie[MAXN][<span class="number">12</span>],tot = <span class="number">1</span>,n,T;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"><span class="type">bool</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> x = s[i]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!trie[p][x]) b = <span class="number">0</span>,trie[p][x] = ++tot;</span><br><span class="line">p = trie[p][x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b) eq = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Cmp</span><span class="params">(string a,string b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="built_in">size</span>()&lt;b.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T = <span class="built_in">raed</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">tot = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(trie,<span class="number">0</span>,<span class="built_in">sizeof</span>(trie));</span><br><span class="line">eq = <span class="number">1</span>;</span><br><span class="line">n = <span class="built_in">raed</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;s[i],s[i] = <span class="string">&#x27; &#x27;</span>+s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(s+<span class="number">1</span>,s+n+<span class="number">1</span>,Cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="built_in">Insert</span>(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(eq) cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>黑盒子</p><ul><li><p>对顶堆水题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,a[MAXN],u[MAXN],now,p;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q2;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt; q1;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) p = <span class="built_in">read</span>(),u[p]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">q1.<span class="built_in">push</span>(a[i]);</span><br><span class="line"><span class="keyword">if</span>(q2.<span class="built_in">size</span>()&amp;&amp;q2.<span class="built_in">top</span>()&gt;q1.<span class="built_in">top</span>())&#123;</span><br><span class="line"><span class="type">int</span> a = q2.<span class="built_in">top</span>(),b = q1.<span class="built_in">top</span>();</span><br><span class="line">q2.<span class="built_in">pop</span>(),q1.<span class="built_in">pop</span>();</span><br><span class="line">q2.<span class="built_in">push</span>(b),q1.<span class="built_in">push</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u[i])&#123;</span><br><span class="line">now++;</span><br><span class="line"><span class="keyword">while</span>(now&gt;q2.<span class="built_in">size</span>()&amp;&amp;!q1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">q2.<span class="built_in">push</span>(q1.<span class="built_in">top</span>());</span><br><span class="line">q1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(now&lt;q2.<span class="built_in">size</span>()&amp;&amp;!q2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">q1.<span class="built_in">push</span>(q2.<span class="built_in">top</span>());</span><br><span class="line">q2.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">u[i]--;</span><br><span class="line">cout&lt;&lt;q2.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>生日礼物</p><p>巧妙的性质转化问题。</p><p>显然一段全为正数和负数的区间肯定会被连续选择,因此我们可以把原序列划分为若干个正负交替的”区间”:</p><p>反着来考虑问题,假设现在有$k$段正数区间,如果$k≤m$,正数段不足$k$个,直接全部选上即可,反之,我们先将所有的正数段都选上,然后考虑如何减少段数,使得总段数$≤m$</p><p>减少区间数有两种做法: 1.删去一段正数 2.将负数段相邻的两段正数合并</p><p>我们可以模仿”数据备份”里的做法,开一个堆来储存我们的决策,同时插入”反悔”决策</p><p>决策1的反悔决策,即将其与左右两边的负数段合并而非删除自身,决策二的反悔决策,也就是删除其左右两边的正数而非合并两段数,这两个决策都等价于”数据备份”里的”将左右两个节点与自身合并”,因此,直接使用”数据备份”里的维护方法即可(感觉可能表达的不是很清楚? 以后会改 先这样吧qwq)</p><p>ps: 小坑点: 注意可能会出现a=0的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,a[MAXN],sum[MAXN],vis[MAXN],cnt = <span class="number">1</span>,tot,val,ans;</span><br><span class="line"><span class="type">int</span> pos;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> head,tail;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> val,id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Node &amp;a,<span class="type">const</span> Node &amp;b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&gt;b.val;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Node&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Link_List</span>&#123;</span><br><span class="line"><span class="type">int</span> next,val,prev;</span><br><span class="line">&#125;p[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">head = <span class="number">1</span>,tail = <span class="number">2</span>;</span><br><span class="line">tot = <span class="number">2</span>;</span><br><span class="line">p[head].val = p[tail].val = INF;</span><br><span class="line">p[head].next = tail;</span><br><span class="line">p[tail].prev = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">p[++tot].val = val;</span><br><span class="line">p[p[x].next].prev = tot;</span><br><span class="line">p[tot].next = p[x].next;</span><br><span class="line">p[tot].prev = x;</span><br><span class="line">p[x].next = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>||x==<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">p[p[x].next].prev = p[x].prev;</span><br><span class="line">p[p[x].prev].next = p[x].next; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line">a[<span class="number">1</span>] = <span class="built_in">read</span>(),sum[<span class="number">1</span>] = a[<span class="number">1</span>]; </span><br><span class="line">    <span class="type">int</span> last = a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (a[i]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[i]*last&lt;<span class="number">0</span>) sum[++cnt] = a[i];</span><br><span class="line">        <span class="keyword">else</span> sum[cnt]+=a[i];</span><br><span class="line">        last = a[i];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(sum[cnt]&lt;<span class="number">0</span>) cnt--;</span><br><span class="line"><span class="keyword">if</span>(sum[<span class="number">1</span>]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">cnt--;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) sum[i] = sum[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum[<span class="number">1</span>]&gt;<span class="number">0</span>) ans+=sum[<span class="number">1</span>],<span class="built_in">Insert</span>(<span class="number">1</span>,sum[<span class="number">1</span>]),q.<span class="built_in">push</span>(Node&#123;sum[<span class="number">1</span>],<span class="number">3</span>&#125;),pos = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[i]&gt;<span class="number">0</span>) ans+=sum[i],pos++;</span><br><span class="line"><span class="keyword">else</span> sum[i] = -sum[i];</span><br><span class="line"><span class="built_in">Insert</span>(i+<span class="number">1</span>,sum[i]),q.<span class="built_in">push</span>(Node&#123;sum[i],i+<span class="number">2</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=m)&#123;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> del_cnt = pos - m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=del_cnt;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;vis[q.<span class="built_in">top</span>().id]) q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">top</span>().id;</span><br><span class="line">ans-=q.<span class="built_in">top</span>().val;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[p[now].next] = <span class="number">1</span>,vis[p[now].prev] = <span class="number">1</span>;</span><br><span class="line">val = p[p[now].next].val+p[p[now].prev].val-p[now].val;</span><br><span class="line"><span class="built_in">Delete</span>(p[now].next),<span class="built_in">Delete</span>(p[now].prev);</span><br><span class="line">p[now].val = val;</span><br><span class="line">q.<span class="built_in">push</span>(Node&#123;val,now&#125;);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《算法竞赛进阶指南》第三章 读书笔记</title>
      <link href="/2022/10/26/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E3%80%8B%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/26/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E3%80%8B%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>竞赛复健,自用向整理</li><li>为简约文本,代码均省略开头部分</li><li>书中所有例题均在acwing上可以找到</li></ul><h3 id="0x20-搜索"><a href="#0x20-搜索" class="headerlink" title="0x20 搜索"></a>0x20 搜索</h3><h4 id="0x21-树与图的遍历"><a href="#0x21-树与图的遍历" class="headerlink" title="0x21 树与图的遍历"></a>0x21 树与图的遍历</h4><ul><li><p>树与图的深度优先遍历、树的dfs序、深度和重心</p><p>树与图的深度优先遍历:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间戳: </p><p>即每个节点第一次被遍历到时的顺序。如某个节点第一个被遍历到,时间戳就为1,第二个遍历到就为2,以此类推</p><p>树的dfs序:</p><p>对于每个节点,在其刚进入递归和即将回溯前各记录一次该节点的编号,最后产生的一个长度为$2n$的序列就称为该树的dfs序</p><p>不难发现dfs序有一个特性: 设节点$i$在dfs序中两次出现的位置分别为$l_i$,$r_i$,则处于$(l_i,r_i)$区间内的节点就是以节点$i$为根的子树的$dfs$序,因此,通过dfs序,我们可以把很多树上问题转化为序列区间问题。</p><p>树的深度:</p><p>设节点$u$的深度为$d_u$,则其子节点的深度为$d_u+1$,以此类推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">a[++cnt] = u;<span class="comment">//dfs序</span></span><br><span class="line">t[u] = ++time;<span class="comment">//时间戳</span></span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">d[v] = d[u]+<span class="number">1</span>;<span class="comment">//深度</span></span><br><span class="line"><span class="built_in">Dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[++cnt] = u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树的重心:</p><p>设$f_u$表示删除$u$节点后,产生的子树中最大的一颗的大小。$f_u$最小的节点被称为该树的重心,换句话说,删除该点后最大连通块的节点数最少</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> f = <span class="number">0</span>;<span class="comment">//最大子树大小</span></span><br><span class="line">size[u] = <span class="number">1</span>;<span class="comment">//子树大小</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line">f = <span class="built_in">max</span>(f,size[v]);<span class="comment">//子节点子树大小</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">f = <span class="built_in">max</span>(f,n-size[u]);<span class="comment">//n为整棵树的节点数目</span></span><br><span class="line"><span class="keyword">if</span>(f&lt;ans)&#123;</span><br><span class="line">pos = u;<span class="comment">//重心</span></span><br><span class="line">ans = f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图的连通块划分:</p><p>进行多次深度优先遍历,可以划分出一张无向图中的各个连通块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u] = cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">vis[v] = cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="built_in">Dfs</span>(i);</span><br></pre></td></tr></table></figure></li><li><p>树与图的广度优先遍历,拓扑排序</p><p>树与图的广度优先遍历:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>),vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) vis[v] = <span class="number">1</span>,q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现,广度优先遍历是一种按照层次顺序进行遍历的方法,它有两个重要的性质:</p><p>1.只有在访问完第$i$层节点后,第$i+1$层的节点才会被访问</p><p>2.无论何时,队列中至多只有两层节点</p><p>也就是说,广度优先遍历队列中的元素满足”单调性”和”两段性”。这两条性质也是所有广度优先思想的基础</p><p>拓扑排序:</p><p>在一个有向无环图中,若一个由图中所有点构成的序列$A$对于任意一条边$(x,y)$,都满足$x$出现在$y$前面,则称序列$A$为该有向无环图的拓扑序,求解$A$的过程就称为拓扑排序</p><p>求解方法也很简单,统计每个节点的入度,图中入度为0的节点$x$,并将$x$连向的点的入度数都减1,不断重复上述步骤直到所有节点都被记录即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Topsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(deg[i]==<span class="number">0</span>) q.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">ans[++cnt] = u;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line">deg[v]--;</span><br><span class="line"><span class="keyword">if</span>(!deg[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例题: 可达性统计</p><p>一个比较容易想到的解法是对图进行拓扑排序后倒过来统计,不过后面的子联通块会有重叠部分,不好统计,因此考虑使用一个$n$位二进制来判断每个节点能否到达,最后统计该二进制中1的个数即可。使用bitset进行二进制存储可以将复杂度优化到$O(n(n+m)/32)$,空间复杂度$O(n^2/8)$</p><p><img src="https://pic.jitudisk.com/public/2022/11/10/69337dd5071a5.png" alt=""></p><center>摘自OI wiki</center><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> head[MAXN],tot = <span class="number">1</span>,deg[MAXN],a[MAXN],M,f[MAXN];</span><br><span class="line">bitset&lt;MAXN&gt; b[MAXN];</span><br><span class="line"><span class="type">int</span> n,m,x,y;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ed</span>&#123;</span><br><span class="line"><span class="type">int</span> v,next;</span><br><span class="line">&#125;edge[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">edge[tot].v = v;</span><br><span class="line">edge[tot].next = head[u];</span><br><span class="line">head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Topsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!deg[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">a[++M] = u;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line">deg[v]--;</span><br><span class="line"><span class="keyword">if</span>(!deg[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">x = <span class="built_in">read</span>(),y = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">Add</span>(x,y);</span><br><span class="line">deg[y]++;</span><br><span class="line">b[x][y] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) b[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Topsort</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=M;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = head[a[i]];j;j = edge[j].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[j].v;</span><br><span class="line">b[a[i]]|=b[v];</span><br><span class="line">&#125;</span><br><span class="line">f[a[i]] = b[a[i]].<span class="built_in">count</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout&lt;&lt;f[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="0x22-深度优先搜索"><a href="#0x22-深度优先搜索" class="headerlink" title="0x22 深度优先搜索"></a>0x22 深度优先搜索</h4><ul><li><p>例题: 小猫爬山</p><p>设状态$(i,j)$表示前$i$只猫花费的费用为$j$元,对于每只猫,我们可以选择将其放入之前的购买的还有空位缆车或新买一个缆车,因此直接$dfs$枚举所有的方案,选花费最少的方案即可。</p><p>这里直接暴搜的复杂度最坏为$O(\sum\limits<em>{i=0}^{17}C</em>{18}^i)$,显然会T,考虑减枝:</p><p>首先比较容易想到的一个点是当前费用超过已知最小费用时,直接退出搜索</p><p>其次,对于枚举顺序,重量大的猫显然比重量小的猫更占空间,因此可以把猫先按重量排序,优先搜索更大的猫,减少分支数量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,c[MAXN],buc[MAXN],cnt,ans = INF;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> cnt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;=ans) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(x==n+<span class="number">1</span>)&#123;</span><br><span class="line">ans = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(buc[i]+c[x]&lt;=m)&#123;</span><br><span class="line">buc[i]+=c[x];</span><br><span class="line"><span class="built_in">Dfs</span>(x+<span class="number">1</span>,cnt);</span><br><span class="line">buc[i]-=c[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buc[cnt+<span class="number">1</span>] = c[x];</span><br><span class="line"><span class="built_in">Dfs</span>(x+<span class="number">1</span>,cnt+<span class="number">1</span>);</span><br><span class="line">buc[cnt+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>() , m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">sort</span>(c+<span class="number">1</span>,c+n+<span class="number">1</span>),<span class="built_in">reverse</span>(c+<span class="number">1</span>,c+n+<span class="number">1</span>);</span><br><span class="line">ans = n;</span><br><span class="line"><span class="built_in">Dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>例题: 数独</p><p>枚举每一位填什么。由于这里是多组数据,直接暴搜时间复杂度过大,考虑优化:</p><p>对于枚举顺序,每次优先考虑”当前能填入的数最少”的位置显然可以更快的枚举出最终答案,对于填入的数的枚举,我们考虑使用9位二进制数来表示每行,每列,每个九宫格中能填的数的集合(第$i$位为1表示能填$i$,反之不能填),配合<code>lowbit</code>运算来加快枚举速度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> row[MAXN],col[MAXN],Set[MAXN][MAXN],cnt[<span class="number">3010</span>];</span><br><span class="line"><span class="type">int</span> H[<span class="number">3010</span>];</span><br><span class="line"><span class="type">int</span> tot,b;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">cout&lt;&lt;a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Dfs</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now==tot)&#123;</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">10</span>,x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line"><span class="type">int</span> val = row[i]&amp;col[j]&amp;Set[(i<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>][(j<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(!val) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt[val]&lt;res)&#123;</span><br><span class="line">x = i,y = j;</span><br><span class="line">res = cnt[val];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> p = row[x]&amp;col[y]&amp;Set[(x<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>][(y<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="type">int</span> k = H[p&amp;(-p)];</span><br><span class="line">row[x] ^= <span class="number">1</span>&lt;&lt;k,col[y] ^= <span class="number">1</span>&lt;&lt;k;</span><br><span class="line">Set[(x<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>][(y<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>] ^= <span class="number">1</span>&lt;&lt;k;</span><br><span class="line">a[x][y] = <span class="string">&#x27;1&#x27;</span>+k;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Dfs</span>(now+<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">a[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">row[x] ^= <span class="number">1</span>&lt;&lt;k,col[y] ^= <span class="number">1</span>&lt;&lt;k;</span><br><span class="line">Set[(x<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>][(y<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>] ^= <span class="number">1</span>&lt;&lt;k;</span><br><span class="line">p-=p&amp;(-p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">11</span>;i++) H[<span class="number">1</span>&lt;&lt;i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j;j-=j&amp;(-j)) cnt[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) row[i] = col[i] = (<span class="number">1</span> &lt;&lt; <span class="number">9</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++) Set[i][j] = (<span class="number">1</span> &lt;&lt; <span class="number">9</span>) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;e&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]!=<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line"><span class="type">int</span> k = a[i][j] - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">row[i] ^= <span class="number">1</span>&lt;&lt;k,col[j] ^= <span class="number">1</span>&lt;&lt;k;</span><br><span class="line">Set[(i<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>][(j<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>] ^= <span class="number">1</span>&lt;&lt;k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tot++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Dfs</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="0x23-迭代加深"><a href="#0x23-迭代加深" class="headerlink" title="0x23 迭代加深"></a>0x23 迭代加深</h4><h4 id="0x24-广度优先搜索"><a href="#0x24-广度优先搜索" class="headerlink" title="0x24 广度优先搜索"></a>0x24 广度优先搜索</h4><ul><li><p>例题: 立体推箱子</p><p>设状态$f(i,j,0/1/2)$表示箱子的状态为”立”/“横”/“竖”,左上角坐标为$(i,j)$时的最小移动次数,转移易推,难点是细节较多</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,ans[MAXN][MAXN][<span class="number">3</span>],tot,b[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> a[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> nx[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">2</span>&#125;&#125;;<span class="comment">//立 竖 横</span></span><br><span class="line"><span class="type">int</span> ny[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">-2</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> nt[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> type,x,y;</span><br><span class="line">&#125;st,ed;</span><br><span class="line">queue&lt;Node&gt; q;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Check</span><span class="params">(Node k)</span></span>&#123;</span><br><span class="line"><span class="type">bool</span> is_out = k.x&lt;=n&amp;&amp;k.x&gt;=<span class="number">1</span>&amp;&amp;k.y&gt;=<span class="number">1</span>&amp;&amp;k.y&lt;=m;</span><br><span class="line"><span class="keyword">if</span>(!is_out) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(k.type==<span class="number">0</span>&amp;&amp;(a[k.x][k.y]==<span class="string">&#x27;E&#x27;</span>||a[k.x][k.y]==<span class="string">&#x27;#&#x27;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(k.type==<span class="number">1</span>&amp;&amp;(a[k.x][k.y]==<span class="string">&#x27;#&#x27;</span>||a[k.x][k.y+<span class="number">1</span>]==<span class="string">&#x27;#&#x27;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(k.type==<span class="number">2</span>&amp;&amp;(a[k.x+<span class="number">1</span>][k.y]==<span class="string">&#x27;#&#x27;</span>||a[k.x][k.y]==<span class="string">&#x27;#&#x27;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">q.<span class="built_in">push</span>(st);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">Node next;</span><br><span class="line">Node now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">next.x = now.x+nx[now.type][i];</span><br><span class="line">next.y = now.y+ny[now.type][i];</span><br><span class="line">next.type = nt[now.type][i];</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">Check</span>(next)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(ans[next.x][next.y][next.type]==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="type">int</span> val = ans[now.x][now.y][now.type]+<span class="number">1</span>;</span><br><span class="line">ans[next.x][next.y][next.type] = val;</span><br><span class="line"><span class="keyword">if</span>(next.x==ed.x&amp;&amp;next.y==ed.y&amp;&amp;next.type==ed.type) <span class="keyword">return</span> val;</span><br><span class="line">q.<span class="built_in">push</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">b[tot][<span class="number">0</span>] = i,b[tot][<span class="number">1</span>] = j;</span><br><span class="line">tot++;</span><br><span class="line">a[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">ed.x = i,ed.y = j,ed.type = <span class="number">0</span>;</span><br><span class="line">a[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tot==<span class="number">1</span>)&#123;</span><br><span class="line">st.x = b[<span class="number">0</span>][<span class="number">0</span>],st.y = b[<span class="number">0</span>][<span class="number">1</span>],st.type = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b[<span class="number">0</span>][<span class="number">0</span>]==b[<span class="number">1</span>][<span class="number">0</span>])&#123;</span><br><span class="line">st.y = <span class="built_in">min</span>(b[<span class="number">0</span>][<span class="number">1</span>],b[<span class="number">1</span>][<span class="number">1</span>]),st.x = b[<span class="number">0</span>][<span class="number">0</span>],st.type = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">st.x = <span class="built_in">min</span>(b[<span class="number">0</span>][<span class="number">0</span>],b[<span class="number">1</span>][<span class="number">0</span>]),st.y = b[<span class="number">0</span>][<span class="number">1</span>],st.type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)&#123;</span><br><span class="line">ans[i][j][k] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans[st.x][st.y][st.type] = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="built_in">Dfs</span>();</span><br><span class="line"><span class="keyword">if</span>(!res) cout&lt;&lt;<span class="string">&quot;Impossible&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m&amp;&amp;n&amp;&amp;m)&#123;</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>例题: 矩阵距离</p><p>多源$bfs$。把矩阵中所有为1的点或与1相邻的0压入队列作为初始状态即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,b[MAXN][MAXN];</span><br><span class="line"><span class="type">char</span> a[MAXN][MAXN];</span><br><span class="line">queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; now = q.<span class="built_in">front</span>();</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; next;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> X = now.first+dx[i],Y = now.second+dy[i];</span><br><span class="line">next.first = X;</span><br><span class="line">next.second = Y;</span><br><span class="line"><span class="keyword">if</span>(a[X][Y] == <span class="string">&#x27;0&#x27;</span>&amp;&amp;!b[X][Y])&#123;</span><br><span class="line">b[X][Y] = b[now.first][now.second]+<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!b[i][j]&amp;&amp;(a[i+<span class="number">1</span>][j]==<span class="string">&#x27;1&#x27;</span>||a[i<span class="number">-1</span>][j]==<span class="string">&#x27;1&#x27;</span>||a[i][j+<span class="number">1</span>]==<span class="string">&#x27;1&#x27;</span>||a[i][j<span class="number">-1</span>]==<span class="string">&#x27;1&#x27;</span>))&#123;</span><br><span class="line">b[i][j] = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(i,j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Dfs</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cout&lt;&lt;b[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>例题: 推箱子</p><p>毒瘤双重$bfs$。假如用最单层$bfs$来进行人和物的状态扩展,要在满足箱子移动次数的单调性的同时满足人移动次数的单调性,需要用到优先队列,但是这里有多组数据,会T(<del>UVA上的原题数据很水,能过</del>)</p><p>考虑使用状态$(i,j,0/1/2/3,k)$表示箱子在第$(i,j)$处,人在箱子的前/后/左/右时的最小移动次数为$k$,对于状态的扩展,在满足对应的限制条件时,可以选择将人移动到另一个方向,并推动一次,或者选择直接在当前方向推动一次,这样一来,箱子的移动次数就能够满足单调性</p><p>对于人移动到另一方向的最少次数,我们在内层再次进行一次$dfs$,判断现在人所在的位置能否移动到另一位置,并记录路径。注意,这里虽然能够满足箱子移动次数的单调性,但无法满足人移动次数的单调性,因此在第一次入队(被访问)时,得到的人的步数可能并非为最小值,需要使用数组$f_{i,j,k}$记录对应状态的人的最小步数,并不断进行更新</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,last;</span><br><span class="line">string road;</span><br><span class="line">&#125;st,ed,box;</span><br><span class="line"><span class="type">int</span> n,m,tot;</span><br><span class="line">string ANS;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">char</span> dr[<span class="number">4</span>] = &#123;<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> Dr[<span class="number">4</span>] = &#123;<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;E&#x27;</span>&#125;;<span class="comment">//北南西东 </span></span><br><span class="line"><span class="type">int</span> Last[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="type">char</span> a[MAXN][MAXN];</span><br><span class="line">queue&lt;Node&gt; q;</span><br><span class="line">string tmp;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;=<span class="number">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;=<span class="number">1</span>&amp;&amp;y&lt;=m&amp;&amp;a[x][y]!=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Bfs2</span><span class="params">(Node st,Node ed)</span></span>&#123;</span><br><span class="line">queue&lt;Node&gt; q;</span><br><span class="line">tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">bool</span> vis[MAXN][MAXN];</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">st.road = <span class="string">&quot;&quot;</span>;</span><br><span class="line">q.<span class="built_in">push</span>(st);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">Node now = q.<span class="built_in">front</span>(),next;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(now.x==ed.x&amp;&amp;now.y==ed.y)&#123;</span><br><span class="line">tmp = now.road;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">next.x = now.x+dx[i];</span><br><span class="line">next.y = now.y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check</span>(next.x,next.y)||vis[next.x][next.y]) <span class="keyword">continue</span>;</span><br><span class="line">vis[next.x][next.y] = <span class="number">1</span>;</span><br><span class="line">next.road = now.road+dr[i];</span><br><span class="line">q.<span class="built_in">push</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_man</span><span class="params">(Node now)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> cnt_b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;now.road.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(now.road[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;now.road[i]&lt;=<span class="string">&#x27;z&#x27;</span>) cnt_b++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt_b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bfs1</span><span class="params">()</span></span>&#123;</span><br><span class="line">string ans;</span><br><span class="line"><span class="type">int</span> fman[MAXN][MAXN][<span class="number">5</span>]; </span><br><span class="line"><span class="built_in">memset</span>(fman,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(fman));</span><br><span class="line"><span class="type">int</span> ans_r = INF,ans_b = INF;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">Node now = q.<span class="built_in">front</span>(),next,prev,last;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(now.x==ed.x&amp;&amp;now.y==ed.y)&#123;</span><br><span class="line"><span class="type">int</span> cnt_b = <span class="number">0</span>,cnt_r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;now.road.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(now.road[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;now.road[i]&lt;=<span class="string">&#x27;Z&#x27;</span>) cnt_b++;</span><br><span class="line"><span class="keyword">else</span> cnt_r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt_b&lt;ans_b||(cnt_b==ans_b&amp;&amp;cnt_r&lt;ans_r))&#123;</span><br><span class="line">ans = now.road;</span><br><span class="line">ans_b = cnt_b;</span><br><span class="line">ans_r = cnt_r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">next.x = now.x+dx[i],next.y = now.y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check</span>(next.x,next.y)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> man_step = <span class="built_in">count_man</span>(now);</span><br><span class="line">            <span class="keyword">if</span> (man_step&gt;fman[now.x][now.y][i]) <span class="keyword">continue</span>;</span><br><span class="line">prev.x = now.x+Last[i][<span class="number">0</span>],prev.y = now.y+Last[i][<span class="number">1</span>];</span><br><span class="line">last.x = now.x+Last[now.last][<span class="number">0</span>],last.y = now.y+Last[now.last][<span class="number">1</span>];</span><br><span class="line">a[now.x][now.y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Bfs2</span>(last,prev))&#123;</span><br><span class="line">fman[now.x][now.y][i] = man_step;</span><br><span class="line">next.last = i;</span><br><span class="line">next.road = now.road+tmp+Dr[i];</span><br><span class="line">q.<span class="built_in">push</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">a[now.x][now.y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans_r!=INF)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans.<span class="built_in">length</span>()&lt;ANS.<span class="built_in">length</span>()||ANS==<span class="string">&quot;X&quot;</span>) ANS = ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;S&#x27;</span>) st.x = i,st.y = j,a[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;T&#x27;</span>) ed.x = i,ed.y = j,a[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;B&#x27;</span>) box.x = i,box.y = j,a[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Node fir;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">fir.x = box.x+Last[i][<span class="number">0</span>];</span><br><span class="line">fir.y = box.y+Last[i][<span class="number">1</span>];</span><br><span class="line">box.last = i;</span><br><span class="line">a[box.x][box.y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(fir.x,fir.y)&amp;&amp;<span class="built_in">Bfs2</span>(st,fir)) box.road = tmp,q.<span class="built_in">push</span>(box),<span class="built_in">Bfs1</span>();</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Maze #&quot;</span>&lt;&lt;tot&lt;&lt;endl;</span><br><span class="line"><span class="keyword">if</span>(ANS==<span class="string">&quot;X&quot;</span>) cout&lt;&lt;<span class="string">&quot;Impossible.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;ANS&lt;&lt;endl;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m&amp;&amp;n&amp;&amp;m)&#123;</span><br><span class="line">ANS = <span class="string">&quot;X&quot;</span>;</span><br><span class="line">tot++;</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="0x25-广搜变形"><a href="#0x25-广搜变形" class="headerlink" title="0x25 广搜变形"></a>0x25 广搜变形</h4><ul><li><p>例题: 电路维修</p><p>设状态$(i,j,k)$表示在$(i,j)$时,最小改变数为$k$,由于只有0/1两种代价,因此使用一个双端队列,对于能直接走到的点$(x,y)$,将状态$(x,y,k)$压入队列头部,对于不能直接走到的点,将状态$(x,y,j+1)$压入队列尾部,就能够保持队列的单调性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> T,n,m,ans[MAXN][MAXN],vis[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> a[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;=<span class="number">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;=<span class="number">1</span>&amp;&amp;y&lt;=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">deque&lt;Node&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(ans));</span><br><span class="line">q.<span class="built_in">push_front</span>(Node&#123;<span class="number">1</span>,<span class="number">1</span>&#125;);</span><br><span class="line">ans[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">Node next,now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[now.x][now.y]) <span class="keyword">continue</span>;</span><br><span class="line">vis[now.x][now.y] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(now.x==n&amp;&amp;now.y==m)&#123;</span><br><span class="line">cout&lt;&lt;ans[now.x][now.y]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">next.x = now.x+dx[i];</span><br><span class="line">next.y = now.y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check</span>(next.x,next.y)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> X = <span class="built_in">min</span>(now.x,next.x),Y = <span class="built_in">min</span>(now.y,next.y);</span><br><span class="line"><span class="keyword">if</span>(a[X][Y]==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((i==<span class="number">1</span>||i==<span class="number">2</span>)&amp;&amp;ans[now.x][now.y]&lt;ans[next.x][next.y])&#123;</span><br><span class="line">ans[next.x][next.y] = ans[now.x][now.y];</span><br><span class="line">q.<span class="built_in">push_front</span>(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans[now.x][now.y]+<span class="number">1</span>&lt;ans[next.x][next.y])&#123;</span><br><span class="line">ans[next.x][next.y] = ans[now.x][now.y]+<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push_back</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[X][Y]==<span class="string">&#x27;\\&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((i==<span class="number">0</span>||i==<span class="number">3</span>)&amp;&amp;ans[now.x][now.y]&lt;ans[next.x][next.y])&#123;</span><br><span class="line">ans[next.x][next.y] = ans[now.x][now.y];</span><br><span class="line">q.<span class="built_in">push_front</span>(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans[now.x][now.y]+<span class="number">1</span>&lt;ans[next.x][next.y])&#123;</span><br><span class="line">ans[next.x][next.y] = ans[now.x][now.y]+<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push_back</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n++,m++;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">Bfs</span>()) cout&lt;&lt;<span class="string">&quot;NO SOLUTION&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>例题: 装满的油箱</p><p>本质上是个分层图最短路,设状态$(i,j,k)$表示在$i$节点,剩余$j$油量,花费$k$元,对于状态扩张,在满足对应的限制条件时,可以选择在该节点加1升油,或前往下一个节点,跑一遍$dijstra$即可。复杂度为$O(q⋅c⋅(n+m)⋅logcn)$,不开$O_2$会被极限数据卡掉(<del>实际上数据挺水的</del>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tot = <span class="number">1</span>,n,m,T,C,S,E,head[MAXN],a[MAXN];</span><br><span class="line"><span class="type">int</span> vis[MAXN][MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ed</span>&#123;</span><br><span class="line"><span class="type">int</span> w,v,next;</span><br><span class="line">&#125;edge[<span class="number">10010</span>&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">status</span>&#123;</span><br><span class="line"><span class="type">int</span> node,oil,cost;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> status x) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> cost &gt; x.cost;</span><br><span class="line">&#125; </span><br><span class="line">&#125;st,ed;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">edge[tot].v = v;</span><br><span class="line">edge[tot].w = w;</span><br><span class="line">edge[tot].next = head[u];</span><br><span class="line">head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = INF;</span><br><span class="line"><span class="type">int</span> f[MAXN][<span class="number">110</span>];</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">f[st.node][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">priority_queue&lt;status&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(st);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">status u = q.<span class="built_in">top</span>(),next;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[u.node][u.oil]) <span class="keyword">continue</span>;</span><br><span class="line">vis[u.node][u.oil] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(u.node==E)&#123;</span><br><span class="line">cout&lt;&lt;u.cost&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u.node];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v,w = edge[i].w;</span><br><span class="line">next.node = v,next.oil = u.oil-w,next.cost = u.cost;</span><br><span class="line"><span class="keyword">if</span>(next.oil&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(next.oil&gt;=<span class="number">0</span>&amp;&amp;next.cost&lt;f[v][next.oil])&#123;</span><br><span class="line">f[v][next.oil] = next.cost;</span><br><span class="line">q.<span class="built_in">push</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u.oil&lt;C&amp;&amp;u.cost+a[u.node]&lt;f[u.node][u.oil+<span class="number">1</span>])&#123;</span><br><span class="line">f[u.node][u.oil+<span class="number">1</span>] = u.cost+a[u.node];</span><br><span class="line">q.<span class="built_in">push</span>(status&#123;u.node,u.oil+<span class="number">1</span>,u.cost+a[u.node]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">bfs</span>()) cout&lt;&lt;<span class="string">&quot;impossible&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">read</span>(),y = <span class="built_in">read</span>(),w = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">add</span>(x+<span class="number">1</span>,y+<span class="number">1</span>,w),<span class="built_in">add</span>(y+<span class="number">1</span>,x+<span class="number">1</span>,w);</span><br><span class="line">&#125;</span><br><span class="line">T = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">C = <span class="built_in">read</span>(),S = <span class="built_in">read</span>(),E = <span class="built_in">read</span>();</span><br><span class="line">S++,E++;</span><br><span class="line">st.node = S,st.oil = <span class="number">0</span>,st.cost = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>例题: 噩梦</p><p>双向$bfs$,两个人一起$bfs$就行,另外题中没说能一直在一个点上不走,但其实数据中是可以呆在一个点不走的。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,t;</span><br><span class="line">&#125;boy,girl,ghost[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> n,m,T;</span><br><span class="line"><span class="type">char</span> a[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;; </span><br><span class="line"><span class="type">int</span> dy[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x&gt;=<span class="number">1</span>)&amp;&amp;(x&lt;=n)&amp;&amp;(y&gt;=<span class="number">1</span>)&amp;&amp;(y&lt;=m)&amp;&amp;(a[x][y]!=<span class="string">&#x27;X&#x27;</span>)&amp;&amp;(<span class="built_in">abs</span>(x-ghost[<span class="number">1</span>].x)+<span class="built_in">abs</span>(y-ghost[<span class="number">1</span>].y)&gt;<span class="number">2</span>*t)&amp;&amp;(<span class="built_in">abs</span>(x-ghost[<span class="number">2</span>].x)+<span class="built_in">abs</span>(y-ghost[<span class="number">2</span>].y)&gt;<span class="number">2</span>*t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> vis1[MAXN][MAXN],vis2[MAXN][MAXN];</span><br><span class="line"><span class="built_in">memset</span>(vis1,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis1));</span><br><span class="line"><span class="built_in">memset</span>(vis2,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis2));</span><br><span class="line">vis1[boy.x][boy.y] = <span class="number">1</span>,vis2[girl.x][girl.y] = <span class="number">1</span>;</span><br><span class="line">queue&lt;Node&gt; q1,q2;</span><br><span class="line">q1.<span class="built_in">push</span>(boy),q2.<span class="built_in">push</span>(girl);</span><br><span class="line"><span class="keyword">while</span>(!q1.<span class="built_in">empty</span>()||!q2.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> r = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span>(r--)&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!q1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">len = q1.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span>(r==<span class="number">2</span>) ans = q1.<span class="built_in">front</span>().t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(len--)&#123;</span><br><span class="line">Node now = q1.<span class="built_in">front</span>();</span><br><span class="line">Node next;</span><br><span class="line">q1.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check</span>(now.x,now.y,ans)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">next.x = now.x+dx[i];</span><br><span class="line">next.y = now.y+dy[i];</span><br><span class="line">next.t = ans+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check</span>(next.x,next.y,ans)||vis1[next.x][next.y]) <span class="keyword">continue</span>;</span><br><span class="line">vis1[next.x][next.y] = <span class="number">1</span>;</span><br><span class="line">q1.<span class="built_in">push</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!q2.<span class="built_in">empty</span>()) len = q2.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">while</span>(len--)&#123;</span><br><span class="line">Node now = q2.<span class="built_in">front</span>();</span><br><span class="line">Node next;</span><br><span class="line">q2.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check</span>(now.x,now.y,now.t)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">next.x = now.x+dx[i];</span><br><span class="line">next.y = now.y+dy[i];</span><br><span class="line">next.t = now.t+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check</span>(next.x,next.y,now.t)||vis2[next.x][next.y]) <span class="keyword">continue</span>;</span><br><span class="line">vis2[next.x][next.y] = <span class="number">1</span>;</span><br><span class="line">q2.<span class="built_in">push</span>(next);</span><br><span class="line"><span class="keyword">if</span>(vis2[next.x][next.y]&amp;&amp;vis1[next.x][next.y])&#123;</span><br><span class="line">cout&lt;&lt;next.t<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">ghost[<span class="number">1</span>].x = <span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;M&#x27;</span>) a[i][j] = <span class="string">&#x27;.&#x27;</span>,boy.x = i,boy.y = j,boy.t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;G&#x27;</span>) a[i][j] = <span class="string">&#x27;.&#x27;</span>,girl.x = i,girl.y = j,girl.t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ghost[<span class="number">1</span>].x==<span class="number">0</span>) ghost[<span class="number">1</span>].x = i,ghost[<span class="number">1</span>].y = j;</span><br><span class="line"><span class="keyword">else</span> ghost[<span class="number">2</span>].x = i,ghost[<span class="number">2</span>].y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">bfs</span>()) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="0x26-A"><a href="#0x26-A" class="headerlink" title="0x26 A*"></a>0x26 A*</h4><h4 id="0x27-IDA"><a href="#0x27-IDA" class="headerlink" title="0x27 IDA*"></a>0x27 IDA*</h4><h4 id="0x28-总结与练习"><a href="#0x28-总结与练习" class="headerlink" title="0x28 总结与练习"></a>0x28 总结与练习</h4>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「模板」平面最近点对</title>
      <link href="/2022/10/26/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/"/>
      <url>/2022/10/26/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>给$n$个二维平面上的点,求平面上欧几里得距离最近的两个点</p><h4 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h4><p>暴力枚举每个点,时间复杂度$O(n^2)$,显然过不了太大的数据</p><h4 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h4><p>考虑使用分治算法。与传统的分治算法一样,将所有点按照$x$坐标排序后分为$(l,mid),(mid+1,r)$两个区间进行分别计算,不断递归下去,之后再进行答案合并。</p><p>问题的难点在于答案如何进行合并。即求出其中一个点在左区间,另一个点在右区间中的最近点对。我们先假设两个子区间中的最近点对距离为$h$,中间值为$mid$,那么对于每个点$a$,只有当$mid-h&lt;a_x&lt;mid+h$时才会产生距离小于$h$的点对,如下图:</p><p><img src="https://pic.jitudisk.com/public/2022/10/27/7fefb6c739a26.png" alt=""></p><p>现在需要的就是找到一个点$b$同样满足$mid-h&lt;b_x&lt;mid+h$且$a,b$之前的距离$＜h$。对此,我们可以先将所有的点按照$y$坐标的大小进行排序,找出所有满足$mid-h&lt;x&lt;mid+h$的点,并对于每个满足条件的点$i$,查找所有$y$坐标位于$(y_i-h,y_i]$的点进行匹配,计算答案并更新即可</p><h3 id="复杂度证明"><a href="#复杂度证明" class="headerlink" title="复杂度证明"></a>复杂度证明</h3><p>对于$y$轴的排序,我们可以使用归并排序的方法,使其复杂度降低到$O(nlogn)$</p><p>对于查找部分,每个点能匹配到的点最多只有6个,证明见下:</p><p><img src="https://pic.jitudisk.com/public/2022/10/27/fd0b2a4df1319.png" alt=""></p><p>见上图,我们考虑最坏情况,图中黄线区域即为查找范围,即处于中线上的点:</p><p>将两个$h×h$的正方形分为四个小正方形,对于每个小正方形,其对角线长为$\frac{h}{\sqrt{2}}&lt;h$因此,在一个小正方形中,最多只能存在一个点,否则会出现距离小于$h$的点对,与”两个子区间中的最近点对距离为$h$”矛盾。综上,最多只能由6个点。</p><p>总复杂度$O(nlogn)$</p><h3 id="例题-AcWing-119-袭击"><a href="#例题-AcWing-119-袭击" class="headerlink" title="例题: AcWing 119. 袭击"></a>例题: AcWing 119. 袭击</h3><p>给$2n$个点,求前$n$个点与后$n$个点能组成的最小点对距离</p><p>$1≤n≤100000$</p><p>一个很直接的做法给前$n$个点和后$n$个点打上不同的$tag$,只有在$tag$不同时才计算最大值,否则返回$INF$</p><p>但是这题直接使用这种做法会被极端数据卡掉,由于此题中存在两类点,可能会出现左右两个子区间全部都是同类点的情况,此时返回的最小值即为$INF$,后面的筛选部分会将所有点都被考虑在内,复杂度将被卡为$O(n^2)$。</p><p>因此,我们可以给每个点都增加一个随机数,排序时,若横坐标相同,则按照随机数排序,从而避免所有点都被考虑在内的情况</p><p>$code$:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xcxc82 2022/10/26</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> raed read</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;<span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,T;</span><br><span class="line"><span class="type">double</span> INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">points</span>&#123;</span><br><span class="line"><span class="type">double</span> x,y;</span><br><span class="line"><span class="type">int</span> id,rd;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> points&amp;P)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x-P.x)&lt;eps)<span class="keyword">return</span> rd&lt;P.rd;</span><br><span class="line">        <span class="keyword">return</span> x&lt;P.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[MAXN&lt;&lt;<span class="number">1</span>],tmp[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>,top = <span class="number">0</span>,i = l,j = mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid||j&lt;=r)&#123;</span><br><span class="line"><span class="keyword">while</span>((a[i].y&lt;a[j].y||j&gt;r)&amp;&amp;i&lt;=mid) tmp[++top] = a[i++];</span><br><span class="line"><span class="keyword">while</span>((a[i].y&gt;=a[j].y||i&gt;mid)&amp;&amp;j&lt;=r) tmp[++top] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) a[i] = tmp[i-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dis</span><span class="params">(points a,points b)</span></span>&#123;</span><br><span class="line"><span class="type">double</span> x = a.x - b.x,y = a.y - b.y;</span><br><span class="line"><span class="keyword">if</span>(a.id==b.id) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="type">double</span> res = <span class="built_in">sqrt</span>(x*x+y*y);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> mid_x = a[mid].x;</span><br><span class="line"><span class="type">double</span> res = <span class="built_in">min</span>(<span class="built_in">dfs</span>(l,mid),<span class="built_in">dfs</span>(mid+<span class="number">1</span>,r));</span><br><span class="line"><span class="built_in">merge</span>(l,r);</span><br><span class="line"><span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].x&gt;mid_x-res&amp;&amp;a[i].x&lt;mid_x+res) tmp[++top] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=top&amp;&amp;tmp[j].y-tmp[i].y&lt;res;j++)&#123;</span><br><span class="line">res = <span class="built_in">min</span>(res,<span class="built_in">dis</span>(tmp[i],tmp[j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i].x&gt;&gt;a[i].y;</span><br><span class="line">a[i].id = <span class="number">0</span>,a[i].rd = <span class="built_in">rand</span>()%<span class="number">1000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n+<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i].x&gt;&gt;a[i].y;</span><br><span class="line">a[i].id = <span class="number">1</span>,a[i].rd = <span class="built_in">rand</span>()%<span class="number">1000000</span>; </span><br><span class="line">&#125;</span><br><span class="line">INF=<span class="built_in">min</span>(INF,<span class="built_in">dis</span>(a[<span class="number">1</span>],a[<span class="number">2</span>*n]));</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+<span class="number">2</span>*n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>,<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">2</span>*n));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://oi-wiki.org/geometry/nearest-points/">oi wiki - 平面最小点对</a></p><p><a href="https://www.acwing.com/solution/content/119700/">AcWing 119. 袭击(hack数据的解决思路) - 深海鱼</a></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf记录</title>
      <link href="/2022/10/23/cf%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/10/23/cf%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1fd10544d79b7ce0f2fdff594f7b54c907c417ac119a8f5d412fe3edcf0a275b">4630436162ade97ba2718b7d0c4b3b63aa2ab1619d9cdbb4bb5fd57226dc61d2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《算法竞赛进阶指南》第一章 读书笔记</title>
      <link href="/2022/10/08/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/08/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>竞赛复健,自用向整理</li><li>为简约文本,部分题目代码只放出关键算法部分</li><li>书中所有例题均在acwing上可以找到</li></ul><h3 id="0x00-基本算法"><a href="#0x00-基本算法" class="headerlink" title="0x00 基本算法"></a>0x00 基本算法</h3><h4 id="0x01-位运算"><a href="#0x01-位运算" class="headerlink" title="0x01 位运算"></a>0x01 位运算</h4><ul><li><p>例题1: a^b</p><ul><li><p>快速幂模板,没啥好说的,注意精度就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">read</span>(),b = <span class="built_in">read</span>(),p = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans = (ans*a%p)%p;</span><br><span class="line">a = a*a%p;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans%p;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题2: 64位整数乘法</p><ul><li><p>算法1: 同理快速幂的思想,将$a×b$拆分为$a×\sum_{0}^{k-1}c_i2^i$即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">read</span>(),b = <span class="built_in">read</span>(),p = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans = (ans+a)%p;</span><br><span class="line">a = a*<span class="number">2</span>%p;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans%p;</span><br></pre></td></tr></table></figure></li><li><p>算法2: 挺nb的解法。首先,显然有$a×b\bmod p=a×b-\lfloor a×b/p \rfloor×p$,我们令$c = \lfloor a×b/p \rfloor$,由于浮点数类型的数据是通过科学计数法来记录的,且在$a,b≤p≤10^{18}$的情况下,不会超过<code>long double</code>类型的最大范围,因此可以用<code>long double</code>类型来储存$c$,由于精度问题,在刚好能被整除的情况下$c$的值可能会比预测的小1,但在取模的情况下最终的值都为0,不会影响最终结果</p><p>又因为$p&lt;2^{64}$,$a×b - c×p = a×b \bmod p ≤ p&lt;2^{64}$,因此$a×b - c×p =a×b - c×p \bmod 2^{64}$,而用<code>ull</code>的自然溢出等价于对$2^{64}$取模,因此直接用<code>ull</code>来存储答案即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">read</span>(),b = <span class="built_in">read</span>(),p = <span class="built_in">read</span>();</span><br><span class="line">a%=p,b%=p; <span class="comment">//使a,b＜p</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> c = (<span class="type">long</span> <span class="type">double</span>)a*b/p;</span><br><span class="line">ull ans = ((a*b) - (c*p))%p;</span><br><span class="line">cout&lt;&lt;ans;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>例题3: 最短Hamilton路径</p><ul><li><p>简单的状压dp,状态和转移都挺好想的,但还是因为太久没写代码导致细节问题被卡了半天/kk</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">1</span>;s&lt;=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;s++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(s&gt;&gt;(i<span class="number">-1</span>)&amp;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span>(j!=i&amp;&amp;s&gt;&gt;(j<span class="number">-1</span>)&amp;<span class="number">1</span>) f[s][i] = <span class="built_in">min</span>(f[s][i],f[s^(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][j]+dis[i][j]);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>例题4: 起床困难综合症</p><ul><li><p>sb了,被自己的贪心顺序错误卡了半天。。考虑到位运算互不影响,可以把每一位分开考虑:对于每一位,若填0的贡献与填1的贡献相同,显然填0更优,而左边的位造成的贡献一定大于右边的位造成的贡献,因此从左往右进行贪心计算即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>,y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">k = (a[j][<span class="number">1</span>]&gt;&gt;(i<span class="number">-1</span>)&amp;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(a[j][<span class="number">0</span>]==<span class="number">1</span>) x = x|k,y = y|k;</span><br><span class="line"><span class="keyword">if</span>(a[j][<span class="number">0</span>]==<span class="number">2</span>) x = x&amp;k,y = y&amp;k;</span><br><span class="line"><span class="keyword">if</span>(a[j][<span class="number">0</span>]==<span class="number">3</span>) x = x^k,y = y^k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">1</span>) att = att+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">1</span>) res = res+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)),att = att+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">1</span>) att = att+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">if</span>(res+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))&lt;=m) res = res+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)),att = att+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;att;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>lowbit</code>运算</p><ul><li><p><code>lowbit(n)</code>表示在$n$在二进制的状态下,最低位的1和后面的所有0,如<code>lowbit(10) = 2   1010-&gt;10</code></p></li><li><p>算法: <code>lowbit(n)</code> = n&amp;(-n),证明如下: 首先显然,<code>lowbit(n)</code> = $n$&amp;(~$n+1$),~为取反符号,又因为在补码的表示下,~$n=-1-n$,故<code>lowbit(n)</code> = $n$&amp;$(-n)$</p></li><li><p><code>lowbit(n)</code>运算可以找出整数二进制表示下所有是1的位,一个简单的非哈希算法如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">20</span>;i++) H[<span class="number">1</span>&lt;&lt;i] = i; # H[<span class="number">2</span>^k] = k</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line">cout&lt;&lt;H[n&amp;(-n)]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">n -= n&amp;(-n);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>也可以使用hash对空间存储进行优化,令$H[2^k \bmod 37] = k$。这里用了一个数学技巧,对于$k∈[0,35]$时,$2^k\bmod37$互不相等,且恰好取遍$[1,36]$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">lowbit2</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">36</span>;i++) H[(<span class="number">1ll</span>&lt;&lt;i)%<span class="number">37</span>] = i;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line">cout&lt;&lt;H[n&amp;(-n)]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">n -= n&amp;(-n);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="0x02-递推与递归"><a href="#0x02-递推与递归" class="headerlink" title="0x02 递推与递归"></a>0x02 递推与递归</h4><ul><li>几种常见的枚举方式与遍历方式:</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">枚举方式</th><th style="text-align:center">状态空间规模</th><th style="text-align:center">一般遍历方式</th></tr></thead><tbody><tr><td style="text-align:center">多项式</td><td style="text-align:center">$n^k$,$k$为常数</td><td style="text-align:center">循环,递推</td></tr><tr><td style="text-align:center">指数</td><td style="text-align:center">$k^n$,$k$为常数</td><td style="text-align:center">递归,位运算</td></tr><tr><td style="text-align:center">排列</td><td style="text-align:center">$n!$</td><td style="text-align:center">递归,C++ <code>next_permutation</code></td></tr><tr><td style="text-align:center">组合</td><td style="text-align:center">$C_n^m$</td><td style="text-align:center">递归+剪枝</td></tr></tbody></table></div><ul><li><p>例题: 递归实现指数型枚举:</p><ul><li>每一个数都有选/不选两种可能,状态空间规模$2^n$,代码略</li></ul></li><li><p>例题: 递归实现排列形枚举：</p><ul><li>全排列问题。状态空间规模$n!$,代码略</li></ul></li><li><p>例题: 递归实现组合型枚举:</p><ul><li>状态空间规模$C_n^m$本质上为指数型枚举的”剪枝”版本,代码略</li></ul></li><li><p>例题: 费解的开关</p><ul><li><p>首先,显然每一个开关只会按一次,考虑普通递归算法,复杂度$\prod_\limits{i=20}^{25}i$,显然会T飞。通过观察,可以发现以下两个性质</p><ul><li>点击的顺序并不影响最终结果</li><li>若固定了第一行,则满足题意的点击方案只有1种。证明: 当第1行被固定后,只能通过改变第二行的同列开关来改变, 因此,以此类推,当前$i$行被固定时,只能通过点击第$i+1$行的开关来改变第$i$行,因此相当于每一个点击位置都被固定了,故只有一种方案。</li></ul></li><li><p>有以上两个性质,考虑先通过枚举第$i$行的点击方案,然后递推出第2~5行的点击方案,统计点击数量后进行判断即可(记得特判最后一行无法实现全1的情况)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">31</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>((i&gt;&gt;(j<span class="number">-1</span>))&amp;<span class="number">1</span>) <span class="built_in">change</span>(<span class="number">1</span>,j),now++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=<span class="number">5</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">5</span>;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j<span class="number">-1</span>][k]==<span class="number">0</span>) <span class="built_in">change</span>(j,k),vis[j][k] = <span class="number">1</span>,now++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">5</span>][j]==<span class="number">0</span>) now = <span class="number">114514</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">back</span>(i);</span><br><span class="line">ans = <span class="built_in">min</span>(ans,now);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 奇怪的汉诺塔</p><ul><li><p>考虑将原问题拆解为已知子问题。设$f_i$表示4个柱子时的最小方案数,$g_i$表示3个柱子时的最小方案数,先假设当前从塔中拿走了$i$个塔,造成的移动步数为$f_i$,接着,再将剩余的$n-i$个塔移动到目标柱子上,移动步数为$g_i$,最后再将之前的$i$个塔移回去,步数$f_i$,因此递推式为</p><center>$f_n = min\{f_i×2+g_{n-i}\}(0<i<n)$</center><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = a[i<span class="number">-1</span>]*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">cout&lt;&lt;f[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">f[i] = <span class="built_in">min</span>(f[i],f[j]+a[i-j]+f[j]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;f[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>例题: 约数之和</p><ul><li>我们先把$A$分解质因数,表示为$\prod\limits<em>{i=1}^np_i^{c_i}$,那么$A^B$就是$\prod\limits</em>{i=1}^np<em>i^{B×c_i}$,根据乘法分配律,$A^B$的所有约束之和也就是:$\prod\limits</em>{i=1}^n\sum\limits<em>{j=0}^{B×c_i}p_i^j$,容易想到用等比数列求和来计算,但如果使用求和公式来计算,需要做除法,取模运算只对$+,-,×$有分配律,因此无法使用。考虑换一种方法对其进行求和: 设$sum(p,c) = \sum\limits</em>{j=0}^{c}p^j$,当$c$为奇数时,有:</li></ul><center>$sum(p,c)=  \sum\limits_{j=0}^{\frac{c-1}{2}}p^j+\sum\limits_{j=\frac{c+1}{2}}^{c}p^j$</center><center>$ = (1+p^{\frac{c+1}{2}})×\sum\limits_{j=0}^{\frac{c-1}{2}}p^j$</center><center>$ = (1+p^{\frac{c+1}{2}})×sum(p,\frac{c-1}{2})$</center></li><li><p>例题: 分形之城</p><ul><li><p>有点复杂的一道分治题,考虑对城市区块进行分治,计算出该点在更小的区块内的编号,然后倒推在大区块的编号即可,推式子漏加了个+1被卡了半天…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">calc</span><span class="params">(<span class="type">int</span> n,<span class="type">long</span> <span class="type">long</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> now = m%(<span class="number">1ll</span>&lt;&lt;(<span class="number">2</span>*(n<span class="number">-1</span>))),len = <span class="number">1ll</span>&lt;&lt;(n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(now==<span class="number">0</span>) now = <span class="number">1ll</span>&lt;&lt;(<span class="number">2</span>*(n<span class="number">-1</span>));</span><br><span class="line">pair&lt;<span class="type">long</span>,<span class="type">long</span>&gt; pos = <span class="built_in">calc</span>(n<span class="number">-1</span>,now);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> id = (m<span class="number">-1</span>)/(<span class="number">1ll</span>&lt;&lt;(<span class="number">2</span>*(n<span class="number">-1</span>)));</span><br><span class="line"><span class="type">int</span> x = pos.first,y = pos.second;</span><br><span class="line"><span class="keyword">if</span>(id==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">make_pair</span>(y,x);</span><br><span class="line"><span class="keyword">if</span>(id==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">make_pair</span>(x,y+len);</span><br><span class="line"><span class="keyword">if</span>(id==<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">make_pair</span>(x+len,y+len);</span><br><span class="line"><span class="keyword">if</span>(id==<span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">2</span>*len-y+<span class="number">1</span>,len-x+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="0x03-前缀与差分"><a href="#0x03-前缀与差分" class="headerlink" title="0x03 前缀与差分"></a>0x03 前缀与差分</h4><ul><li><p>例题: 激光炸弹</p><ul><li><p>二维前缀和板子。比较坑的一个点是此题开两个5000*5000的数组会MLE</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class="line">sum[x+<span class="number">1</span>][y+<span class="number">1</span>]+=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5001</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5001</span>;j++)&#123;</span><br><span class="line">sum[i][j] += sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5001</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5001</span>;j++)&#123;</span><br><span class="line">x = i-r&gt;<span class="number">0</span>?i-r:<span class="number">0</span>,y = j-r&gt;<span class="number">0</span>?j-r:<span class="number">0</span>;</span><br><span class="line">now = sum[i][j] - sum[x][j] - sum[i][y] + sum[x][y];</span><br><span class="line">ans = <span class="built_in">max</span>(ans,now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 增减序列</p><ul><li><p>差分练习题。对于第一问,设$b<em>i$的正数和为$p$,负数和为$q$,修改$[l,r]$区间,等价于修改$b_i$和$b</em>{j+1}$,不难发现修改时,一共只有三种方法:1.修改$[b_1,b_n]$ 2.修改$[b_i,b_j]$ $(1&lt;i≤j≤n)$ 3.修改$b_n$ 显然先用方法2所用的次数最少,最后只有$b_n$会有剩余,这时再使用法1和法3去修改$b_n$即可,答案即为$max{p,q}$</p><p>对于第二问,只有在修改$b_1$时,才会产生新的方案,因此答案即为法1能使用的次数+1,即$|p-q|+1$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">b[i] = a[i] - a[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(b[i]&lt;<span class="number">0</span>) p-=b[i];</span><br><span class="line"><span class="keyword">else</span> q+=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p==q)&#123;</span><br><span class="line">cout&lt;&lt;p&lt;&lt;endl&lt;&lt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">max</span>(p,q)&lt;&lt;endl&lt;&lt;<span class="built_in">abs</span>(p-q)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>例题: 最高的牛</p><ul><li><p>差分入门题,对每次操作,相当于对$[l,r]$区间内的牛身高$-1$,直接对差分数组进行修改即可。比较坑的点是题目中的数据有重复的,需要判断之前是否出现过,且用数组存储会MLE,需要用到<code>map</code>来存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt;,<span class="built_in">bool</span>&gt; vis;</span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;p&gt;&gt;h&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b) swap(a,b);</span><br><span class="line"><span class="keyword">if</span>(vis[make_pair(a,b)]) <span class="keyword">continue</span>;</span><br><span class="line">q[a+<span class="number">1</span>]--,q[b]++;</span><br><span class="line">vis[make_pair(a,b)]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">q[i] = q[i-<span class="number">1</span>]+q[i];</span><br><span class="line">cout&lt;&lt;q[i]+h&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="0x04-二分"><a href="#0x04-二分" class="headerlink" title="0x04 二分"></a>0x04 二分</h4><ul><li><p>整数集合上的二分:</p><ul><li><p>在单调序列中查找$≥x$的最小值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[mid]&gt;=x) r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在单调序列中查找$≤x$的最大值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[mid]&lt;=x) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现上述的两个<code>mid</code>的取法是不同的,若法2也是用法1的取法,会在最后一层二分时进入死循环</p></li><li><p>总而言之,正确的二分写法分为三个步骤:</p><ul><li>分析问题,确定可行区间,以及<code>mid</code>归属哪一段</li><li>分析结果,选择两种配套方式中的其中一种</li><li>二分的终止条件为$l==r$,该值就是所求值,这也是使用这种二分方案的好处之一</li></ul></li><li><p>仔细观察<code>mid</code>的取法,还会发现:法1的<code>mid</code>不会取到<code>r</code>这个值,法二的<code>mid</code>不会取到<code>l</code>这个值。可以利用这一性质来处理无解的情况,把二者的区间分别扩大为$[1,n+1]$和$[0,n]$,若二分终止于这个越界下标上,则说明$a$不存在该所求数</p></li></ul></li><li><p>实数域上的二分:</p><ul><li><p>确定好所需精度<code>eps</code>以$l+eps&lt;r$为循环条件即可,一般需要保留$k$位小数时,取$eps = 10^{-(k+2)}$:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(l+eps&lt;r)&#123;</span><br><span class="line">    <span class="type">double</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">calc</span>(mid)) r = mid;<span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有时精度不易控制,可以干脆直接采用固定循环次数的二分法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="type">double</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">calc</span>(mid)) r = mid;<span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>三分求单峰函数极值</p><ul><li>用于处理单峰函数,即拥有唯一极大值,在极大值左边严格单调增,右边严格单调减,此时,定义两个点<code>lmid</code>与<code>rmid</code>,通过大小判断,即可求出所需的极大值</li></ul></li><li><p>例题: 最佳牛序列</p><ul><li><p>很巧妙的思路转化。考虑二分平均值$x$,对于每一个$x$,判断序列中是否有一段长度为$m(m≥F)$的序列和$sum_j - sum_i≥x×m$$(j-i=m+1)$,因此要求的就是$max{sum_j - min{sum_i}}$。只需要枚举$j$的值,并且不断更新$min{sum_i}$即可。计算完后,若最大值大于$x×m$,往右搜,否则往左搜</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">calc</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i]-=i*x;</span><br><span class="line"><span class="type">double</span> min_sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> ans = <span class="number">-114514</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=f;i&lt;=n;i++)&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,sum[i] - min_sum);</span><br><span class="line">min_sum = <span class="built_in">min</span>(min_sum,sum[i-f+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i]+=i*x;</span><br><span class="line"><span class="keyword">if</span>(ans&gt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 特殊序列</p><ul><li><p>思路很简单,假设已经排好了前$i$个数,对于第$i+1$个数,进行二分判断插入的位置即可。不过我之前并没有写过交互题所以不太会代码的实现….</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">specialSort</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">        v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = v.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = (l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">compare</span>(v[mid],i)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">compare</span>(v[r],i)) r--;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=v.<span class="built_in">size</span>()<span class="number">-2</span>;j&gt;r;j--) <span class="built_in">swap</span>(v[j],v[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="0x05-排序"><a href="#0x05-排序" class="headerlink" title="0x05 排序"></a>0x05 排序</h4><ul><li><p>离散化</p><ul><li><p>将无穷大的集合中的若干个元素映射为有限集合以便于统计的方法。具体来讲就是将值域范围过大的数组$a_n$排序去重后得到有序数组$b_m$,在$b$数组的下标$i$与$b_i$之间建立映射关系,若要查询整数$a_j$被$1$~$m$中的哪个数代替,只需在数组$b$中二分查找$a_j$的值即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">discrete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>||a[i]!=a[i<span class="number">-1</span>]) q[++top] = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+m+<span class="number">1</span>,x) - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 电影</p><ul><li><p>将每个人的语言离散化,并用数组统计每个语言的使用人数,然后查询每部电影能看懂和听懂的人数即可。需要注意的是这里可能会出现一部电影都没人能看懂的情况,因此要将目标电影的下标初始化为1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">discrete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>||a[i]!=a[i<span class="number">-1</span>])&#123;</span><br><span class="line">q[++top] = a[i];</span><br><span class="line">&#125;</span><br><span class="line">cnt[top]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>,r = top;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(q[mid]==x) <span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">if</span>(q[mid]&gt;x) r = mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 货仓选址</p><ul><li><p>中位数定理入门题。结论: 将货仓定在所有商店的中位数处时,距离之和最小。具体证明可以用反证法来证明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line"><span class="type">int</span> k = (n+<span class="number">1</span>)/<span class="number">2</span>,ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans+=<span class="built_in">abs</span>(a[i]-a[k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 七夕祭</p><ul><li><p>好题。之前也写过题解<a href="https://xcxc82.github.io/2020/10/17/ac105/">AcWing 105. 七夕祭</a>。不难发现,上下交换和左右交换是互不影响的,因此我们可以把原问题拆解为行与列的两个子问题来解决。假设题目中没有环的限制,那显然就是一道经典贪心问题”均分纸牌”。设平均值为$e$,前缀和为$g<em>i$,答案就为$\sum\limits</em>{i = 1}^n|g_i -i×e|$。</p><p>设$b<em>i = a_i - e$,答案即为$\sum\limits</em>{i = 1}^n|sum<em>i|$,其中$sum_n$在有解时必为0。对于环形问题,我们只去要断环成链,去枚举从哪个位置开始即可。假设从第$k+1$个数开始,那么答案即为$\sum\limits</em>{i = 1}^n|sum_i - sum_k|$,显然这就又回到了之前例题中的”中位数问题”,因此只需将$sum$排序,取中位数即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">cal_r</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum_r/=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) row[i]-=sum_r;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) R[i] = R[i<span class="number">-1</span>]+row[i];</span><br><span class="line"><span class="built_in">sort</span>(R+<span class="number">1</span>,R+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> k = (n+<span class="number">1</span>)/<span class="number">2</span>,i = k+<span class="number">1</span>,tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tot&lt;=n)&#123;</span><br><span class="line">res+=<span class="built_in">abs</span>(R[i] - R[k]);</span><br><span class="line">tot++,i++;</span><br><span class="line"><span class="keyword">if</span>(i==n+<span class="number">1</span>) i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">cal_c</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum_c/=m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) col[i]-=sum_c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) C[i] = C[i<span class="number">-1</span>]+col[i];</span><br><span class="line"><span class="built_in">sort</span>(C+<span class="number">1</span>,C+m+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> k = (m+<span class="number">1</span>)/<span class="number">2</span>,i = k+<span class="number">1</span>,tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tot&lt;=m)&#123;</span><br><span class="line">res+=<span class="built_in">abs</span>(C[i] - C[k]);</span><br><span class="line">tot++,i++;</span><br><span class="line"><span class="keyword">if</span>(i==m+<span class="number">1</span>) i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 动态中位数</p><ul><li><p>对顶堆做法: 考虑开两一个大根堆,一个小根堆,前者存储$[1,n/2]$,后者存储$[n/2+1,n]$,每次$i$为奇数时输出小根堆的头元素即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; maxheap;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt; &gt; minheap;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">id = <span class="built_in">read</span>(),n = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,id,(n+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a = <span class="built_in">read</span>();</span><br><span class="line">maxheap.<span class="built_in">push</span>(a);</span><br><span class="line"><span class="keyword">if</span>(minheap.<span class="built_in">size</span>()&amp;&amp;minheap.<span class="built_in">top</span>()&lt;maxheap.<span class="built_in">top</span>())&#123;<span class="comment">//我是煞笔,一开始把minheap.size()放在后面被卡了半天==</span></span><br><span class="line"><span class="type">int</span> a = minheap.<span class="built_in">top</span>(),b = maxheap.<span class="built_in">top</span>();</span><br><span class="line">minheap.<span class="built_in">pop</span>(),maxheap.<span class="built_in">pop</span>();</span><br><span class="line">minheap.<span class="built_in">push</span>(b),maxheap.<span class="built_in">push</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxheap.<span class="built_in">size</span>()&gt;minheap.<span class="built_in">size</span>()+<span class="number">1</span>)&#123;</span><br><span class="line">minheap.<span class="built_in">push</span>(maxheap.<span class="built_in">top</span>());</span><br><span class="line">maxheap.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,maxheap.<span class="built_in">top</span>());</span><br><span class="line">tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tot==<span class="number">10</span>) <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>),tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tot!=<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>例题: 超快速排序</p><ul><li><p>归并排序求逆序对</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> b[MAXN],top = <span class="number">0</span>,mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> i = l,j = mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid||j&lt;=r)&#123;</span><br><span class="line"><span class="keyword">while</span>((j&gt;r)&amp;&amp;i&lt;=mid) cnt+=mid+<span class="number">1</span>-j,b[++top] = a[i],i++;</span><br><span class="line"><span class="keyword">while</span>(a[i]&lt;=a[j]&amp;&amp;i&lt;=mid) cnt+=mid+<span class="number">1</span>-j,b[++top] = a[i],i++;</span><br><span class="line"><span class="keyword">while</span>(a[i]&gt;a[j]&amp;&amp;j&lt;=r) b[++top] = a[j],j++;</span><br><span class="line"><span class="keyword">while</span>(i&gt;mid&amp;&amp;j&lt;=r) b[++top] = a[j],j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">a[i] = b[i-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>; </span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">sort</span>(l,mid),<span class="built_in">sort</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">merge</span>(l,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 奇数码问题</p><ul><li><p>把每个矩阵当成一个$n^2$的数组来看。当$0$移动时,有两种可能:1.和自己相邻的值交换 2.和自己相邻的两组的相同位置移动</p><p>对于1操作,显然没有改变数组的逆序对个数(0不考虑在内),对于操作2,假设被移动的数为$a$,中间的间隔中大于$a$的数为$c_1$,小于$a$的数为$c2$,那么逆序对的变化数量就为$c_1±c_2$,由于$n$为奇数,两个数之间的间隔显然只为偶数,因此$c_1±c_2$只可能为偶数,不会对逆序对的奇偶性产生影响,只要判断两种状态的逆序对奇偶性是否相同即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">t = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*n;i++)&#123;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(k!=<span class="number">0</span>) a[++t] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(<span class="number">1</span>,n*n<span class="number">-1</span>);</span><br><span class="line">c1 = <span class="built_in">abs</span>(cnt);</span><br><span class="line">cnt = <span class="number">0</span>,t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*n;i++)&#123;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(k!=<span class="number">0</span>) a[++t] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(<span class="number">1</span>,n*n<span class="number">-1</span>);</span><br><span class="line">c2 = <span class="built_in">abs</span>(cnt);</span><br><span class="line"><span class="keyword">if</span>((c1&amp;<span class="number">1</span>)!=(c2&amp;<span class="number">1</span>)) <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;TAK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="0x06-倍增"><a href="#0x06-倍增" class="headerlink" title="0x06 倍增"></a>0x06 倍增</h4><ul><li><p>例题: 天才ACM</p><ul><li><p>好题。首先对于校验值,将数列$a$进行排序,显然选$a$中最大的数和最小的数为一对,次大和次小的数一对,以此类推,可以使答案最大化,用数学归纳法易证。接下来用倍增的方式枚举区间长度,检查是否可行,若可行,可以先将新区间进行排序,后用归并排序合并进原数列,时间复杂度可以从$O(nlog^2n)$降低到$O(nlogn)$。有个sb把不可行的段也合并进去了,但我不说是谁(</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xcxc82 2022/10/15</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">500010</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;<span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,m,lim,a[MAXN],b[MAXN],c[MAXN],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> mid,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">tot = l;</span><br><span class="line"><span class="type">int</span> i = l,j = mid;</span><br><span class="line"><span class="keyword">while</span>(i&lt;mid||j&lt;=r)&#123;</span><br><span class="line"><span class="keyword">while</span>((b[j]&gt;b[i]||j&gt;r)&amp;&amp;i&lt;mid) c[tot++] = b[i],i++;</span><br><span class="line"><span class="keyword">while</span>((b[j]&lt;=b[i]||i&gt;=mid)&amp;&amp;j&lt;=r) c[tot++] = b[j],j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> mid,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=mid;i&lt;=r;i++) b[i] = a[i];</span><br><span class="line"><span class="built_in">sort</span>(b+mid,b+r+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">merge</span>(l,mid,r);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=r-l+<span class="number">1</span>&gt;&gt;<span class="number">1</span> &amp;&amp; i&lt;=m; i++)</span><br><span class="line">        res+=((c[r-i+<span class="number">1</span>]-c[l+i<span class="number">-1</span>])*(c[r-i+<span class="number">1</span>]-c[l+i<span class="number">-1</span>]));</span><br><span class="line"><span class="keyword">if</span> (res&lt;=lim)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=l; i&lt;=r; i++)</span><br><span class="line">            b[i]=c[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>(),lim = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> len = <span class="number">1</span>,i = <span class="number">1</span>,ans = <span class="number">0</span>,last = <span class="number">1</span>,j;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>,r = <span class="number">1</span>;</span><br><span class="line">b[<span class="number">1</span>] = a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(l&lt;=n)&#123;</span><br><span class="line">len = <span class="number">1</span>;</span><br><span class="line">r = l;</span><br><span class="line"><span class="keyword">while</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(r&gt;n) r = n;</span><br><span class="line"><span class="keyword">if</span>(r+len&lt;=n&amp;&amp;<span class="built_in">check</span>(l,r+<span class="number">1</span>,r+len))&#123;</span><br><span class="line">r = r+len;</span><br><span class="line">len = len&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r==n) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> len = len&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans++;</span><br><span class="line">l = r+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>例题: 奶牛排队</p><ul><li><p>ST表模板题。定义$f<em>{i,j}$表示在区间$[l,l+2^j-1]$的最大值,有递推公式:$f</em>{i,j} = max{f<em>{i,j-1},f</em>{i+2^{j-1},j-1}}$</p><p>对于查询区间$[l,r]$,只需要找到一个$k$,使得$2^k&lt;r-l+1&lt;2^{k+1}$,即$log<em>2(r-l+1)$,最后返回$max{f</em>{l,k},f_{r-2^k+1,k}}$即可。中间会有重叠部分,但并不影响最终结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xcxc82 2022/10/20</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">50010</span>,T = <span class="number">25</span>;</span><br><span class="line"><span class="type">int</span> MIN[MAXN][T],MAX[MAXN][T];</span><br><span class="line"><span class="type">int</span> n,m,a[MAXN],l,r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_MAX</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">log</span>(r-l+<span class="number">1</span>)/<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(MAX[l][k],MAX[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_MIN</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">log</span>(r-l+<span class="number">1</span>)/<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(MIN[l][k],MIN[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>(),MAX[i][<span class="number">0</span>] = a[i],MIN[i][<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;t;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>;i++)&#123;</span><br><span class="line">MAX[i][j] = <span class="built_in">max</span>(MAX[i][j<span class="number">-1</span>],MAX[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">MIN[i][j] = <span class="built_in">min</span>(MIN[i][j<span class="number">-1</span>],MIN[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">l = <span class="built_in">read</span>(),r = <span class="built_in">read</span>();</span><br><span class="line">cout&lt;&lt;<span class="built_in">query_MAX</span>(l,r) - <span class="built_in">query_MIN</span>(l,r)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="0x07-贪心"><a href="#0x07-贪心" class="headerlink" title="0x07 贪心"></a>0x07 贪心</h4><ul><li><p>常用证明思路:</p><ul><li>微扰(邻项交换): 证明在任意局面下,任何最最优决策的改变都会造成整体局面的偏差。经常以排序为贪心策略的证明。</li><li>范围缩放: 证明任何对局部最优策略的范围扩展都不会对最终结果造成偏差。类似数学归纳?</li><li>决策包容性: 证明在任意局面下,作出局部最优决策后,在问题状态空间中的可达集合包含了作出其他任何决策后的可达集合。换言之,这个局部最优策略提供的可能性包含了其他所有策略提供的可能性(说实话不是很懂QAQ)</li><li>反证法</li><li>数学归纳法</li></ul></li><li><p>例题: 防晒</p><ul><li><p>结论: 按$L$端点降序排序$/$按$R$端点升序排序,然后对于每头牛,找到防晒值最大$/$最小的一瓶能用且有剩余的防晒霜使用</p></li><li><p>证明: 首先对于每头牛,都有$L$,$R$两个条件限制,考虑先将其中一个进行排序,考虑对$L$进行降序排序: 排序后,假设第$i$头牛能用的两个防晒霜的防晒值为$x,y$且$x<y$, 对于第$i+1$头牛,因为有了$L_i>L_{i+1}$的限制,因此第$i$头牛能用的防晒霜只有三种可能: 1.能用x,y 2.能用x不能用y 3.不能用x,y 由于每头牛造成的贡献一样,显然对于第$i$头牛,用$y$的策略更优,以此类推。对$R$进行升序排序也同理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="built_in">read</span>(),l = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c;i++) cow[i].minS = <span class="built_in">read</span>(),cow[i].maxS = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l;i++) item[i].spf = <span class="built_in">read</span>(),item[i].cover = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">sort</span>(cow+<span class="number">1</span>,cow+c+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="built_in">sort</span>(item+<span class="number">1</span>,item+l+<span class="number">1</span>,cmp2);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=l;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(item[j].spf&lt;=cow[i].maxS&amp;&amp;item[j].spf&gt;=cow[i].minS&amp;&amp;item[j].cover)&#123;</span><br><span class="line">item[j].cover--,ans++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 畜栏预定</p><ul><li><p>比较显然的结论,让每头牛去最早能去的围栏里吃饭最优。若每一个围栏能吃饭,则新开一个围栏。用一个二叉堆来维护即可。由于这里还需输出编号,因此需要把编号也存入大根堆中,这里有一个小trick,就是把结束时间变负数存入堆中,这样大根堆就能当小根堆来用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,cnt,b[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cow</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,id,index;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(cow a,cow b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.l&lt;b.l;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i].l = <span class="built_in">read</span>(),a[i].r = <span class="built_in">read</span>();</span><br><span class="line">a[i].index = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(q.<span class="built_in">size</span>()&amp;&amp;-q.<span class="built_in">top</span>().first&lt;a[i].l)&#123;</span><br><span class="line">a[i].id = q.<span class="built_in">top</span>().second;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-a[i].r,a[i].id));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">a[i].id = ++cnt;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-a[i].r,a[i].id));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">b[a[i].index] = a[i].id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout&lt;&lt;b[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>例题: 雷达设备</p><ul><li>解法一: 计算出每个点$i$的两个相交圆的坐标,记为$L_i,R_i$,对$R_i$进行升序排序,先在$R_1$处放置一个圆,然后判断后面的每个圆的$L_i$是否大于当前放置的最后的一个圆的坐标,若小于,说明范围不够,需要新建一个圆,更新最后一个圆的坐标,反之不用</li><li>解法二:具体处理方法同理解法一,不同之处是对$L_i$进行升序排序,由于对$L_i$排序后按照上述思路进行计算,会出现当前放置的最后一个圆的坐标$pos$大于$R_i$的情况,因此枚举时需要不断更新$pos$的值,使$pos = min(pos,R_i)$</li><li>上述的贪心做法可以使用反证法来证明。书上用的是决策包容性…但我看不太懂QAQ</li></ul></li><li><p>例题: 国王游戏</p><ul><li><p>经典老题了。用领项交换来证明即可。懒得写高精,给我用python水过去了(((</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    ans.append([<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">input</span>().split()])</span><br><span class="line">ans.sort(key=<span class="keyword">lambda</span> x: (x[<span class="number">0</span>]*x[<span class="number">1</span>]))</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s = <span class="built_in">max</span>(s,a // ans[i][<span class="number">1</span>]) <span class="comment"># python中//代表整除</span></span><br><span class="line">    a*=ans[i][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>例题: 给树染色</p><ul><li>挺神奇的贪心。<del>等我复习完图论再来补</del></li></ul></li></ul><h4 id="总结与练习"><a href="#总结与练习" class="headerlink" title="总结与练习"></a>总结与练习</h4><ul><li><p>练习: 飞行员兄弟</p><ul><li><p>dfs即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xcxc82 2022/10/10</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ans</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;A[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="type">int</span> a[MAXN][MAXN],vis[MAXN][MAXN],ans,top,res[MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> X[MAXN],Y[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) a[x][i] = <span class="number">1</span>-a[x][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) a[i][y] = <span class="number">1</span>-a[i][y];</span><br><span class="line">a[x][y] = <span class="number">1</span>-a[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">fin</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fin</span>())&#123;</span><br><span class="line"><span class="keyword">if</span>(top&lt;ans)&#123;</span><br><span class="line">ans = top;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;i++)&#123;</span><br><span class="line">res[i][<span class="number">0</span>] = A[i].x,res[i][<span class="number">1</span>] = A[i].y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">A[++top].x = i,A[top].y = j;</span><br><span class="line"><span class="built_in">change</span>(i,j);</span><br><span class="line"><span class="keyword">if</span>(j+<span class="number">1</span>&lt;=<span class="number">4</span>) <span class="built_in">f</span>(i,j+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">f</span>(i+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">change</span>(i,j),top--;</span><br><span class="line"><span class="keyword">if</span>(j+<span class="number">1</span>&lt;=<span class="number">4</span>) <span class="built_in">f</span>(i,j+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">f</span>(i+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>练习: 占卜DIY</p><ul><li><p>简单模拟。一开始题没看清把输入顺序看反了= =</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> now = a[<span class="number">13</span>].<span class="built_in">front</span>();</span><br><span class="line">a[<span class="number">13</span>].<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="keyword">while</span>(life)&#123;</span><br><span class="line"><span class="keyword">if</span>(now==<span class="number">13</span>)&#123;</span><br><span class="line">now = a[<span class="number">13</span>].<span class="built_in">front</span>();</span><br><span class="line">a[<span class="number">13</span>].<span class="built_in">pop_front</span>();</span><br><span class="line">life--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">a[now].<span class="built_in">push_front</span>(now);</span><br><span class="line"><span class="type">int</span> k = a[now].<span class="built_in">back</span>();</span><br><span class="line">a[now].<span class="built_in">pop_back</span>();</span><br><span class="line">cnt[now]++;</span><br><span class="line">now = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt[i]&gt;=<span class="number">4</span>) ans++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>练习: 分形</p><ul><li><p>简单dfs</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="string">&#x27; &#x27;</span>,<span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="type">int</span> N = <span class="built_in">pow</span>(<span class="number">3</span>,n<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;j++)&#123;</span><br><span class="line">b[i][j] = a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>*N+<span class="number">1</span>;j&lt;=N*<span class="number">3</span>;j++)&#123;</span><br><span class="line">b[i][j] = b[i][j<span class="number">-2</span>*N];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>*N+<span class="number">1</span>;i&lt;=N*<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N;j++)&#123;</span><br><span class="line">b[i][j] = b[i<span class="number">-2</span>*N][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>*N+<span class="number">1</span>;j&lt;=N*<span class="number">3</span>;j++)&#123;</span><br><span class="line">b[i][j] = b[i][j<span class="number">-2</span>*N];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=N+<span class="number">1</span>;i&lt;=N*<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=N+<span class="number">1</span>;j&lt;=N*<span class="number">2</span>;j++)&#123;</span><br><span class="line">b[i][j] = a[i-N][j-N];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==T)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N*<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N*<span class="number">3</span>;j++)&#123;</span><br><span class="line">cout&lt;&lt;b[i][j];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N*<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=N*<span class="number">3</span>;j++)&#123;</span><br><span class="line">a[i][j] = b[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>(n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>练习: 袭击</p><ul><li>平面最近点对模板题。具体见<a href="https://xcxc82.github.io/2022/10/26/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/">「模板」平面最近点对</a></li></ul></li><li><p>练习: 防线</p><ul><li><p>二分。考虑到只有一个奇数,设前$i$个数的和为$sum_i$,显然若$sum_i$为奇数,则该数在前$i$个数中,否则后面; 由于此题范围过大,开不了完整数组,考虑用类似惰性计算的方式,在每次二分的时候再进行计算前缀和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> T,n,S[MAXN],E[MAXN],D[MAXN],cnt,L,R,ans;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(S[i]&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i]&lt;=r)&#123;</span><br><span class="line">ans+=(E[i]-S[i])/D[i]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans+=(r-S[i])/D[i]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans&amp;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">cnt = <span class="number">0</span>,ans = <span class="number">0</span>;</span><br><span class="line">L = <span class="number">1145141919</span>,R = <span class="number">0</span>;</span><br><span class="line">n = <span class="built_in">raed</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">S[i] = <span class="built_in">raed</span>(),E[i] = <span class="built_in">raed</span>(),D[i] = <span class="built_in">read</span>();</span><br><span class="line">cnt+=(E[i] - S[i])/D[i]+<span class="number">1</span>;</span><br><span class="line">L = <span class="built_in">min</span>(S[i],L);</span><br><span class="line">R = <span class="built_in">max</span>(E[i],R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((cnt&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;There&#x27;s no weakness.&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l = L,r = R;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=S[i]&amp;&amp;l&lt;=E[i])&#123;</span><br><span class="line"><span class="keyword">if</span>((l-S[i])%D[i]==<span class="number">0</span>) ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>练习: 赶牛入圈</p><ul><li><p>二分+离散化。考虑对每个点的$X$坐标和$Y$坐标进行离散化,并计算其二维前缀和。对于那些不存在的点$(a,b)$,去找到第一个$≤a$的被记录的$X$坐标和第一个$≤b$的$Y$坐标即可。之后二分其长度,进行计算即可。对于计算的范围,选择所有记录了的$X$坐标和记录了的$Y$坐标进行组合即可</p><p>由于这题点的范围只有$10000$,因此可以直接枚举记并录每个点的代表值,不用再去二分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xcxc82 2022/10/25</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> raed read</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> c,n,l,r,top_x,top_y;</span><br><span class="line"><span class="type">int</span> sum[MAXN][MAXN],X[<span class="number">10010</span>],Y[<span class="number">10010</span>],x[MAXN],y[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">grass</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=X[k];i&lt;=top_x;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=Y[k];j&lt;=top_y;j++)&#123;</span><br><span class="line"><span class="type">int</span> x0 = <span class="number">0</span>,y0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x[i] - k&gt;=<span class="number">0</span>) x0 = X[x[i] - k];</span><br><span class="line"><span class="keyword">if</span>(y[j] - k&gt;=<span class="number">0</span>) y0 = Y[y[j] - k];</span><br><span class="line"><span class="keyword">if</span>(sum[i][j] - sum[x0][j] - sum[i][y0]+sum[x0][y0]&gt;=c) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">l = <span class="number">114514</span>;</span><br><span class="line">c = <span class="built_in">read</span>(),n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i].x = <span class="built_in">read</span>(),a[i].y = <span class="built_in">read</span>();</span><br><span class="line">r = <span class="built_in">max</span>(r,a[i].x),l = <span class="built_in">min</span>(l,a[i].x);</span><br><span class="line">r = <span class="built_in">max</span>(r,a[i].y),l = <span class="built_in">min</span>(l,a[i].y);</span><br><span class="line">X[a[i].x]++,Y[a[i].y]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(X[i]) x[++top_x] = i;</span><br><span class="line">X[i] = top_x;</span><br><span class="line"><span class="keyword">if</span>(Y[i]) y[++top_y] = i;</span><br><span class="line">Y[i] = top_y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[X[a[i].x]][Y[a[i].y]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top_x;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=top_y;j++)&#123;</span><br><span class="line">sum[i][j] = sum[i][j]+sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>练习: 糖果传递</p><ul><li><p>思路同理七夕祭那道</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,a[MAXN];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum[MAXN],ans,S; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>(),S = S+a[i];</span><br><span class="line">S/=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]-=S;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i] = sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line"><span class="built_in">sort</span>(sum+<span class="number">1</span>,sum+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> k = (n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>,i = k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(tot&lt;=n)&#123;</span><br><span class="line">ans+=<span class="built_in">abs</span>(sum[i]-sum[k]);</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i==n+<span class="number">1</span>) i = <span class="number">1</span>;</span><br><span class="line">tot++; </span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>练习: 士兵</p><ul><li><p>对于$y$坐标,显然可以直接用中位数定理,对于$x$坐标,先对其进行排序,假设以$p$为起点开始排,则总消耗步数为$\sum\limits_{i = 1}^n|x_i -i+1- p|$,也就是说对$x_i-i+1$进行排序后选择中位数即可。</p><p>ps: 其实这里的$-i+1$是任何递增量为1的序列都行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,ans,l,r,c[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i].x = <span class="built_in">raed</span>(),a[i].y = <span class="built_in">raed</span>();</span><br><span class="line">c[i] = a[i].x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(c+<span class="number">1</span>,c+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[i]-=i+<span class="number">114514</span>;</span><br><span class="line"><span class="built_in">sort</span>(c+<span class="number">1</span>,c+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> k = c[(n+<span class="number">1</span>)/<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans+=<span class="built_in">abs</span>(c[i] - k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp2);</span><br><span class="line">k = a[(n+<span class="number">1</span>)/<span class="number">2</span>].y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans+=<span class="built_in">abs</span>(a[i].y - k);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>练习: 数的进制转换</p><ul><li><p>还是要写高精(悲)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sss</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>练习: 耍杂技的牛</p><ul><li><p>邻项交换+推柿子。</p><p>假设交换第$k$和第$k+1$头牛,交换前两者的风险值分别为$\sum\limits<em>{i=1}^{k}w_i-s</em>{k+1}$,$\sum\limits<em>{i=1}^{k-1}w_i-s</em>{k}$</p><p>交换后则分别为$\sum\limits<em>{i=1}^{k-1}w_i-s</em>{k+1}$,$\sum\limits<em>{i=1}^{k-1}w_i+w</em>{k+1}-s_k$,显然只有前者的最大值大于后者的最大值时交换更优,化简一下,就是:</p><center>$max(w_k - s_{k+1},-s_k)＞max(w_{i+1}-s_i,-s_{i+1})$</center><p>由于$w$,$s$均为正整数,因此$-s<em>k&lt;w</em>{k+1}-s<em>k$,$-s</em>{k+1}<w_k-s_{k+1}$,因此两个式子里的最大值即为$w_{k+1}-s_k$,$w_k - s_k+1$,也就是说,当$w_k - s_{k+1}>w_{i+1}-s_i$时,进行交换即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xcxc82 2022/10/25</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> raed read</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">500010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;<span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cow</span>&#123;</span><br><span class="line"><span class="type">int</span> w,s;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(cow a,cow b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((b.s - a.s)&gt;a.w - b.w) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">raed</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i].w = <span class="built_in">raed</span>(),a[i].s = <span class="built_in">raed</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="type">int</span> ans = -a[n].s;</span><br><span class="line"><span class="type">int</span> cnt = a[n].w;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,cnt-a[i].s);</span><br><span class="line">cnt+=a[i].w;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>练习: 最大的和</p><ul><li><p>二维最大字段和,枚举区间,进行最大字段和计算即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xcxc82 2022/10/25</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> raed read</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;<span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,a[MAXN][MAXN],sum[MAXN][MAXN],ans,MAX[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ans = <span class="number">-1145141919</span>;</span><br><span class="line">n = <span class="built_in">raed</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">a[i][j] = <span class="built_in">raed</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">sum[i][j] = sum[i][j<span class="number">-1</span>]+a[j][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=n;l++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> r=l;r&lt;=n;r++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(MAX,<span class="number">0</span>,<span class="built_in">sizeof</span>(MAX));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> S = sum[i][r] - sum[i][l<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(MAX[i<span class="number">-1</span>]&gt;=<span class="number">0</span>) MAX[i] = MAX[i<span class="number">-1</span>]+S;</span><br><span class="line"><span class="keyword">else</span> MAX[i] = S;</span><br><span class="line">ans = <span class="built_in">max</span>(MAX[i],ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>练习: 任务</p><ul><li><p>显然做贡献大的任务更优</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《python编程从入门到实践》读书笔记</title>
      <link href="/2022/09/27/%E3%80%8Apython%E7%BC%96%E7%A8%8B%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/27/%E3%80%8Apython%E7%BC%96%E7%A8%8B%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>打*的为补充内容,原书中未提到</li><li>省略了书中与其他语言用法相同或类似的章节</li><li>参考资料:<ul><li>书籍 《python编程从入门到实践》</li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰的官方网站 Python教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/98994486">Python的set集合详解 - 叶湘伦</a></li><li><a href="https://www.cnblogs.com/LemonSqueezz/p/14738821.html">「Python学习笔记」Python修饰器-VanGy</a></li><li><a href="https://www.cnblogs.com/luckyblock/p/16755832.html">「学习笔记」python 杂记 - Luckyblock </a></li><li><del>百度百科</del></li></ul></li></ul><center>第一部分 基础知识</center><h3 id="第一章-起步"><a href="#第一章-起步" class="headerlink" title="第一章 起步"></a>第一章 起步</h3><h4 id="1-1-搭建编译环境"><a href="#1-1-搭建编译环境" class="headerlink" title="1.1 搭建编译环境"></a>1.1 搭建编译环境</h4><ul><li>自行百度下载安装即可</li></ul><h4 id="1-2-在windows系统中搭建python编程环境"><a href="#1-2-在windows系统中搭建python编程环境" class="headerlink" title="1.2 在windows系统中搭建python编程环境"></a>1.2 在windows系统中搭建python编程环境</h4><ul><li><p>在cmd中输入python 若出现python提示符 <code&gt;&gt;&gt;></code> 则说明安装成功</p></li><li><p>关于sublime text设置中文的问题：</p><ul><li><p>在sublime tex主界面中按下<code>ctrl+shift+b</code> ，输入install，点击第一个出现的install package</p></li><li><p>等待一会后在弹出的搜索框中搜索chinese,安装第一个后重启软件即可</p></li></ul></li></ul><h4 id="1-3-运行Hello-World程序"><a href="#1-3-运行Hello-World程序" class="headerlink" title="1.3 运行Hello World程序"></a>1.3 运行Hello World程序</h4><ul><li><h5 id="1-3-1-配置sublime-text"><a href="#1-3-1-配置sublime-text" class="headerlink" title="1.3.1 配置sublime text"></a>1.3.1 配置sublime text</h5><ul><li>选择菜单 &gt; <code>build system</code> &gt; <code>new build system</code> , 选择python即可</li></ul></li><li><h5 id="1-3-2-运行程序hello-world-py"><a href="#1-3-2-运行程序hello-world-py" class="headerlink" title="1.3.2 运行程序hello_world.py"></a>1.3.2 运行程序hello_world.py</h5><ul><li>新建完后输入代码即可</li></ul></li></ul><h4 id="1-4解决安装问题"><a href="#1-4解决安装问题" class="headerlink" title="1.4解决安装问题"></a>1.4解决安装问题</h4><ul><li>略</li></ul><h4 id="1-5从终端运行python程序"><a href="#1-5从终端运行python程序" class="headerlink" title="1.5从终端运行python程序"></a>1.5从终端运行python程序</h4><ul><li>终端里固定到文件路径后输入<code>python 文件名.py</code> 即可</li></ul><h3 id="第二章-变量和简单数据类型"><a href="#第二章-变量和简单数据类型" class="headerlink" title="第二章  变量和简单数据类型"></a>第二章  变量和简单数据类型</h3><h4 id="2-1-运行hello-world时发生的情况"><a href="#2-1-运行hello-world时发生的情况" class="headerlink" title="2.1 运行hello_world时发生的情况"></a>2.1 运行hello_world时发生的情况</h4><ul><li>略</li></ul><h4 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h4><ul><li>变量的命名: 变量名 = 变量值 和c++不同的是，python可以不加变量类型定义,命名规则和其他语言相同</li></ul><h4 id="2-3-字符串"><a href="#2-3-字符串" class="headerlink" title="2.3 字符串"></a>2.3 字符串</h4><ul><li><p>注: python中的字符串单双引号均可使用,单个字符取出和其他语言相同</p><ul><li>使用方法修改字符串大小写(见下代码):</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;wAb lab dAbdab&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.title()) <span class="comment">#每个单词的开头字符转为大写</span></span><br><span class="line"><span class="built_in">print</span>(a.upper()) <span class="comment">#全部改为大写</span></span><br><span class="line"><span class="built_in">print</span>(a.lower()) <span class="comment">#全部改为小写</span></span><br><span class="line">a = <span class="number">5</span>*<span class="string">&quot;abc&quot;</span> <span class="comment"># 5个abc</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在字符串中使用变量: 具体用法见下代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a,b = <span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span></span><br><span class="line">c = <span class="string">f&quot;python <span class="subst">&#123;a&#125;</span> <span class="subst">&#123;b&#125;</span>&quot;</span><span class="comment">#当然直接用加号也可以</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>换行符的使用: 制表符: <code>\t</code> 换行符: <code>\n</code></li></ul><ul><li><p>删除空白部分(见下代码)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;  xcxc82  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.rstrip()) <span class="comment">#右边空白删除 &#x27;  xcxc82&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.lstrip()) <span class="comment">#左边空白删除 &#x27;xcxc82  &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.strip()) <span class="comment">#全部空白删除  &#x27;xcxc82&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-4-数"><a href="#2-4-数" class="headerlink" title="2.4 数"></a>2.4 数</h4><ul><li><p>运算符号: 略。需要注意的是py中用 ** 代表 乘方运算, //代表整除运算</p></li><li><p>浮点数与整数: 若多个操作的数中有一个浮点数,结果总是浮点数</p></li><li><p>数中的下划线: 书写很大的数字时,可以用下划线进行分割,使其更清晰易读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">14_000_000_000</span></span><br></pre></td></tr></table></figure></li><li><p>注释: python中 # 为注释标识</p></li></ul><h3 id="第三章-列表介绍"><a href="#第三章-列表介绍" class="headerlink" title="第三章 列表介绍"></a>第三章 列表介绍</h3><h4 id="3-1-列表-list-是什么"><a href="#3-1-列表-list-是什么" class="headerlink" title="3.1 列表(list)是什么"></a>3.1 列表(list)是什么</h4><ul><li>由一系列按特定顺序排列的元素组成,和数组用法类似,具体定义和用法见下代码</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">size[<span class="number">0</span>] = <span class="string">&#x27;d&#x27;</span> <span class="comment">#和数组一样 下标从0开始</span></span><br><span class="line"><span class="built_in">print</span>(size[-n]) <span class="comment">#-n代表倒数第n个列表元素</span></span><br></pre></td></tr></table></figure><h4 id="3-2-添加，删除元素"><a href="#3-2-添加，删除元素" class="headerlink" title="3.2 添加，删除元素"></a>3.2 添加，删除元素</h4><ul><li>见代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size.append(<span class="string">&#x27;e&#x27;</span>) <span class="comment">#在末尾添加元素</span></span><br><span class="line">size.insert(n,<span class="string">&#x27;e&#x27;</span>) <span class="comment">#在第n处插入元素</span></span><br><span class="line"><span class="keyword">del</span> size[<span class="number">0</span>] <span class="comment">#删除size[0]</span></span><br><span class="line"><span class="built_in">print</span>(size.pop()) <span class="comment">#弹出最后一个值 且可以将其作为变量使用 size.pop(x)则表示弹出第x个数值</span></span><br><span class="line">size.remove(<span class="string">&#x27;a&#x27;</span>) <span class="comment">#删除列表中第一个值为&#x27;a&#x27;的元素</span></span><br></pre></td></tr></table></figure><h4 id="3-3-列表的各种操作"><a href="#3-3-列表的各种操作" class="headerlink" title="3.3 列表的各种操作"></a>3.3 列表的各种操作</h4><ul><li>排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size.sort() <span class="comment">#永久性的修改排列顺序,且再也无法恢复到之前的顺序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(size)) <span class="comment">#输出排序后的size的值 但并不改变size本身</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(size,reverse=<span class="literal">True</span>)) <span class="comment">#倒序输出 注意python里的True和False开头都要大写</span></span><br></pre></td></tr></table></figure><ul><li>倒序</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size.reverse() <span class="comment"># 倒序</span></span><br></pre></td></tr></table></figure><ul><li>长度</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lengh = <span class="built_in">len</span>(size) <span class="comment"># 获取列表长度,len函数也可以用来获取元组,字符串,字典的长度</span></span><br></pre></td></tr></table></figure><h3 id="第四章-操作列表"><a href="#第四章-操作列表" class="headerlink" title="第四章 操作列表"></a>第四章 操作列表</h3><h4 id="4-1-遍历列表"><a href="#4-1-遍历列表" class="headerlink" title="4.1 遍历列表"></a>4.1 遍历列表</h4><ul><li>具体用法见下:</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sizes = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sizes: <span class="comment"># i将遍历sizes中的每一个值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>) <span class="comment">#带缩进的行都会被包括在循环中 sublime text中按tab可增加缩进</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bye&quot;</span>) <span class="comment">#不连续的行也会被包括</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sizes:</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment">#遍历列表中所有为1的值</span></span><br></pre></td></tr></table></figure><ul><li>关于冒号的用法: python中禁止出现冒号下什么都不加的情况,若要什么都不进行,可在”:”下加上<code>pass</code></li><li>*若要实现像其他的语言里那样的下表索引,可以使用Python内置的<code>enumerate</code>函数来实现:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sizes = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i,key <span class="keyword">in</span> <span class="built_in">enumerate</span>(sizes):</span><br><span class="line">    <span class="built_in">print</span>(i,key)</span><br><span class="line"><span class="comment"># 0 1/1 1/2 4</span></span><br></pre></td></tr></table></figure><h4 id="4-2-避免缩进错误"><a href="#4-2-避免缩进错误" class="headerlink" title="4.2 避免缩进错误"></a>4.2 避免缩进错误</h4><ul><li>略</li></ul><h4 id="4-3-创建数值列表"><a href="#4-3-创建数值列表" class="headerlink" title="4.3 创建数值列表"></a>4.3 创建数值列表</h4><ul><li>函数range()与list()的使用:</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sizes = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>): <span class="comment">#遍历1到4,5不包括在内</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>)) <span class="comment"># 若要创建连续数字列表,可直接用list()将range()的结果转化为列表</span></span><br><span class="line">nums2 = <span class="built_in">list</span>(<span class="built_in">range</span>(x,y,z)) <span class="comment">#表示从x开始数,每次加z,知道达到或超过y(类似其他语言中的for循环)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>))) <span class="comment"># 输出:[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><ul><li>对数字列表执行简单的统计计算</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sizes = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">max_size = <span class="built_in">max</span>(sizes) <span class="comment">#最大</span></span><br><span class="line">min_size = <span class="built_in">min</span>(sizes) <span class="comment">#最小</span></span><br><span class="line">sum_size = <span class="built_in">sum</span>(sizes) <span class="comment">#求和</span></span><br></pre></td></tr></table></figure><ul><li>*列表生成式(列表解析): 简单示例见下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)] <span class="comment"># 格式:[表达式+循环] 1 4 9 16</span></span><br><span class="line">nums = [m+n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>] <span class="comment">#可以使用多层循环来生成全排列</span></span><br><span class="line">nums = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>] <span class="comment">#筛选出为偶数的数</span></span><br><span class="line">nums = [i**<span class="number">2</span> <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">else</span> -i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)] <span class="comment">#若满足表达式则正常生成,否则按照else后的内容生成</span></span><br></pre></td></tr></table></figure><ul><li>在列表生成式中使用if else<ul><li>if在for后: 当<code>if</code>在<code>for</code>后时,代表对元素进行条件筛选,不能加<code>else</code>,示例见上</li><li>if在for前: <code>if</code>在<code>for</code>前时,代表的是一个对元素进行判断的表达式,必须加上<code>else</code>,否则无法计算出结果,示例见上</li></ul></li></ul><h4 id="4-4-使用列表的一部分"><a href="#4-4-使用列表的一部分" class="headerlink" title="4.4 使用列表的一部分"></a>4.4 使用列表的一部分</h4><ul><li>切片(前闭后开): 用法见下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sizes = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(sizes[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 0到3</span></span><br><span class="line"><span class="built_in">print</span>(sizes[:<span class="number">4</span>])  <span class="comment"># 开头到4</span></span><br><span class="line"><span class="built_in">print</span>(sizes[<span class="number">2</span>:])  <span class="comment"># 2到结尾</span></span><br><span class="line"><span class="built_in">print</span>(sizes[<span class="number">2</span>:]) <span class="comment"># 全部</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sizes[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#遍历0到3</span></span><br></pre></td></tr></table></figure><ul><li>复制列表</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">size2 = size <span class="comment">#将size2关联到已与size2相关的列表,本质上两个变量指向同一个列表</span></span><br><span class="line">size2 = size[:] <span class="comment">#将size的切片副本复制给size2</span></span><br></pre></td></tr></table></figure><h4 id="4-5-元组-tuple"><a href="#4-5-元组-tuple" class="headerlink" title="4.5 元组(tuple)"></a>4.5 元组(tuple)</h4><ul><li>一系列不可修改的元素,称为 <strong>元组</strong> 具体用法如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">nums = (<span class="number">1</span>,) <span class="comment">#元组是由逗号标识的,若要定义只包含一个元素的元组,必须要在这个元素后面加上逗号</span></span><br><span class="line"><span class="comment"># nums[0] = 2 试图修改元组的操作是禁止的</span></span><br><span class="line">nums = (<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>) <span class="comment">#元组内的元素无法被修改,但可以给储存元组的变量重新赋值,以此来达到修改元组的目的</span></span><br></pre></td></tr></table></figure><h4 id="4-6-设置代码格式"><a href="#4-6-设置代码格式" class="headerlink" title="4.6 设置代码格式"></a>4.6 设置代码格式</h4><ul><li>略 <del>只要不是毒瘤码风都行</del></li></ul><h3 id="第五章-if语句"><a href="#第五章-if语句" class="headerlink" title="第五章 if语句"></a>第五章 if语句</h3><h4 id="5-1简单示例"><a href="#5-1简单示例" class="headerlink" title="5.1简单示例"></a>5.1简单示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nums = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>) </span><br><span class="line"><span class="keyword">if</span> nums[<span class="number">0</span>]==<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(nums[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(nums[<span class="number">1</span>]) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-2-条件测试"><a href="#5-2-条件测试" class="headerlink" title="5.2 条件测试"></a>5.2 条件测试</h4><ul><li>python中可以用关键字<code>in</code>来检测某个值是否在列表中,如下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;true&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;false&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>其他用法和其他语言相同,略。</li></ul><h4 id="5-3-if语句"><a href="#5-3-if语句" class="headerlink" title="5.3 if语句"></a>5.3 if语句</h4><ul><li>略,同其他语言。需要注意的是python中的<code>if - else if</code>要缩写成<code>if - elif</code>。</li></ul><h4 id="5-4-使用if语句处理列表"><a href="#5-4-使用if语句处理列表" class="headerlink" title="5.4 使用if语句处理列表"></a>5.4 使用if语句处理列表</h4><ul><li>确定列表是否为空时 和其他语言一样写<code>if 变量名</code>即可</li></ul><h4 id="5-5设置if语句格式"><a href="#5-5设置if语句格式" class="headerlink" title="5.5设置if语句格式"></a>5.5设置if语句格式</h4><ul><li>略，看自己习惯。</li></ul><h3 id="第六章-字典-dict-与集合-set"><a href="#第六章-字典-dict-与集合-set" class="headerlink" title="第六章 字典(dict)与集合(set)"></a>第六章 字典(dict)与集合(set)</h3><h4 id="6-1-一个简单的字典"><a href="#6-1-一个简单的字典" class="headerlink" title="6.1 一个简单的字典"></a>6.1 一个简单的字典</h4><ul><li>在python中,字典是一系列键值对。每个键都与一个值关联,类似c++中的结构体。具体定义法如下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;田所浩二&#x27;</span>,<span class="string">&#x27;id&#x27;</span> : <span class="number">114514</span>&#125; <span class="comment"># d = &#123;key1 : value1, key2 : value2... &#125;</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&#x27;name&#x27;</span>]) <span class="comment"># 引用name对应的值</span></span><br><span class="line">person[<span class="string">&#x27;age&#x27;</span>] = <span class="number">24</span> <span class="comment"># 添加一个名为&#x27;age&#x27;的键值对\</span></span><br><span class="line"><span class="keyword">del</span> person[<span class="string">&#x27;age&#x27;</span>] <span class="comment">#删除键值对</span></span><br><span class="line">datastruct = &#123;</span><br><span class="line">    <span class="number">1</span> : <span class="string">&#x27;segmenttree&#x27;</span>,</span><br><span class="line">    <span class="number">2</span> : <span class="string">&#x27;stack&#x27;</span>,</span><br><span class="line">    <span class="number">3</span> : <span class="string">&#x27;queue&#x27;</span>,</span><br><span class="line">    <span class="number">4</span> : <span class="string">&#x27;array&#x27;</span></span><br><span class="line">&#125; <span class="comment"># 较大的字典可用此方法定义</span></span><br><span class="line">like = person.get(<span class="string">&#x27;like&#x27;</span> , <span class="string">&#x27;not found&#x27;</span>) <span class="comment"># 若字典中有该指定键 则返回对应的值,否则返回第二个参数(默认为none)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(person.keys()).index(<span class="string">&#x27;id&#x27;</span>)) <span class="comment"># 取出字典键中id对应的下标</span></span><br></pre></td></tr></table></figure><ul><li>需要注意的是,字典的key是<strong>不能重复的</strong>,如果出现重复的则后面的value会替换到前面的</li></ul><h4 id="6-2-使用字典"><a href="#6-2-使用字典" class="headerlink" title="6.2 使用字典"></a>6.2 使用字典</h4><ul><li>见上代码。</li></ul><h4 id="6-3-遍历字典"><a href="#6-3-遍历字典" class="headerlink" title="6.3 遍历字典"></a>6.3 遍历字典</h4><ul><li>几种写法见下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;田所浩二&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;id&#x27;</span> : <span class="number">114514</span>,</span><br><span class="line">          <span class="string">&#x27;age&#x27;</span> : <span class="number">24</span></span><br><span class="line">         &#125;</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> person.items(): <span class="comment"># 遍历所有键值对,item()返回一个键值对应表</span></span><br><span class="line">    <span class="built_in">print</span>(i,j)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> person.keys(): <span class="comment"># 遍历字典中的所有键,keys()返回每一个键</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> person.values(): <span class="comment"># 遍历字典中的所有值,values()返回每一个值</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(person.values()): <span class="comment"># 按特定顺序遍历字典中的所有键,值同理,要确保所有的键或值为同一类型</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h4 id="6-4-字典与列表的比较"><a href="#6-4-字典与列表的比较" class="headerlink" title="*6.4 字典与列表的比较"></a>*6.4 字典与列表的比较</h4><ul><li><p>与列表相比,字典有两个特点:</p><ul><li>查找和插入的速度很快,不会随着<code>key</code>的增加而变慢</li><li>需要占用大量的内存,内存浪费多</li></ul></li><li><p>而list恰恰相反。因此,dict是在用空间换取时间的一种方法,适用于占用空间小但需要高速查找的地方</p></li></ul><h4 id="6-5-嵌套"><a href="#6-5-嵌套" class="headerlink" title="6.5 嵌套"></a>6.5 嵌套</h4><ul><li>字典列表: 同理普通列表,将字典加入列表即可</li><li>在字典中存储列表: 将列表写入字典中即可</li><li>字典中储存字典: 同理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a0,a1,a2 = &#123;&#125;,&#123;&#125;,&#123;&#125;</span><br><span class="line"><span class="built_in">id</span> = [a0,a1,a2] <span class="comment"># 字典加入列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    new = []</span><br><span class="line">    <span class="built_in">id</span>.append(new)</span><br><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;xcxc82&#x27;</span>, <span class="comment"># 在字典中存储列表</span></span><br><span class="line">          <span class="string">&#x27;id&#x27;</span> : [<span class="number">163</span>,<span class="number">186</span>]</span><br><span class="line">         &#125;</span><br><span class="line">users = &#123; <span class="comment">#字典中储存字典</span></span><br><span class="line">    <span class="string">&#x27;alice&#x27;</span> : &#123;</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> : <span class="number">16</span>,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span> : <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&#x27;bob&#x27;</span> : &#123;</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> : <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span> : <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-6-集合-set"><a href="#6-6-集合-set" class="headerlink" title="*6.6 集合(set)"></a>*6.6 集合(set)</h4><ul><li>集合(set)是一个无序不重复元素集,<code>set</code>集合类需要的参数必须是可迭代的，如：序列、字典等。具体创建方法如下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># set([]) 列表 </span></span><br><span class="line">s = <span class="built_in">set</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># set(()) 元组 </span></span><br><span class="line">s = <span class="built_in">set</span>(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;) <span class="comment"># 字典 需要注意的是，set只取了字典的key</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>]) <span class="comment"># set具有自动去重功能</span></span><br><span class="line"><span class="built_in">print</span>(s) <span class="comment"># 1,2,3,4  注意,输出内容有序不代表set是有序的,只是说明集合内里有这几个元素(不同的输出中顺序可能不同)</span></span><br></pre></td></tr></table></figure><ul><li>集合的添加有<code>add</code>和<code>update</code>两种方式,但它们在添加元素时是有区别的,具体见下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">s.add(<span class="number">123</span>) <span class="comment"># 把传入的元素作为一个整体并入到集合中</span></span><br><span class="line">s.update(<span class="string">&#x27;789&#x27;</span>) <span class="comment"># 把传入的元素拆分为单个字符,并如集合中,update()方法只支持字符串类型。</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><ul><li><p>discard()方法: <code>discard</code>为集合特有的方法。<code>discard</code>方法和<code>remove</code>方法的用法相同,但<code>remove</code>若找不到指定元素会报错,而<code>discard</code>不会。集合的其他方法用法基本和列表相同,需要注意的是集合是无序的,因此集合中的pop()方法删除的是集合中的一个随机元素</p></li><li><p>多个<code>set</code>可以做数学上的交集,并集等操作,具体见下:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">s2 = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">0</span>])</span><br><span class="line">s3 = s1|s2 <span class="comment"># 并集</span></span><br><span class="line">s3 = s1&amp;s2 <span class="comment"># 交集</span></span><br><span class="line">s3 = s1-s2 <span class="comment"># 差集 返回的结果是在集合st1中但不在集合st2中的元素的集合</span></span><br><span class="line">s3 = s1.difference(s2) <span class="comment"># 查看两个集合的不同之处，也相当于差集</span></span><br></pre></td></tr></table></figure><ul><li>集合可以用<code>&gt;,&lt;,&gt;=,==</code>等判断符号来判断某个集合是否完全包含另一个集合。</li></ul><h3 id="第七章-迭代器与生成器"><a href="#第七章-迭代器与生成器" class="headerlink" title="* 第七章 迭代器与生成器"></a>* 第七章 迭代器与生成器</h3><h4 id="7-1-迭代与迭代器"><a href="#7-1-迭代与迭代器" class="headerlink" title="*7.1 迭代与迭代器"></a>*7.1 迭代与迭代器</h4><ul><li>用for遍历一个可迭代(Iterable)的对象的过程,称为迭代(Iteration)</li><li>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器(Iterator)</li><li>迭代器 ≠ 可迭代对象,如<code>list</code>,<code>str</code>,<code>dict</code>都是可迭代对象,但不是迭代器</li><li>若要知道一个对象是否为可迭代对象或迭代器,可以使用<code>collections.abc</code>中的<code>Iterable</code>与<code>Iterator</code>类型判断：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line">a = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line">b = <span class="number">12345</span></span><br><span class="line">g = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a, Iterable)) <span class="comment"># T 判断a是否为可迭代对象 是返回true 否则返回false</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(b, Iterable)) <span class="comment"># F</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(g, Iterator)) <span class="comment"># T 判断g是否为迭代器</span></span><br></pre></td></tr></table></figure><ul><li>可以用<code>iter</code>函数将可迭代对象转变为迭代器,例如<code>iter([1,2,3])</code></li><li>为什么<code>list</code>、<code>dict</code>、<code>str</code>等数据类型不是<code>Iterator</code>？<ul><li>这是因为Python的<code>Iterator</code>对象表示的是一个数据流，Iterator对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。 —-摘自<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017323698112640">廖雪峰的官方网站</a></li></ul></li></ul><h4 id="7-2-生成器-generator"><a href="#7-2-生成器-generator" class="headerlink" title="*7.2 生成器(generator)"></a>*7.2 生成器(generator)</h4><ul><li><p>python中,按照某种算法一边循环一边计算从而推算出新元素的机制,称为生成器(generator)</p></li><li><p>generator中保存的是算法,初始时没有任何值。在需要取出generator中的值时,可以选择调用<code>next</code>函数或直接用<code>for</code>进行迭代。调用<code>next</code>函数时,会计算generator中的下一个值,并返回该值,直到计算到最后一个值后,没有下一个值,若再次调用会跳出<code>StopIteration</code>错误</p></li><li><p>创建方法:</p><ul><li>第一种方法很简单,只需要将列表生成式中的<code>[]</code>改为<code>()</code>即可,示例见下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g)) <span class="comment">#用next函数返回下一个值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g: <span class="comment">#直接用函数进行迭代,取出每一个值</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><ul><li>如果一个函数定义中包含<code>yield</code>关键字,则称它为生成器(generator)函数,当表达式的方法无法描述出需要的算法时,可以使用generator函数来创建生成器</li><li><code>yield</code>语句在每次调用<code>next()</code>的时候执行,返回下一个元素,再次执行时从上次返回的<code>yield</code>语句处继续执行。示例见下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    i,a,b = <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        <span class="keyword">yield</span> b <span class="comment"># 返回值</span></span><br><span class="line">        a,b = b,a + b</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">g = fib(<span class="number">10</span>) <span class="comment">#生成前十项斐波那契数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><ul><li>调用generator函数会创建一个generator对象, 多次调用generator函数会创建多个相互独立的generator。</li><li>示例:打印杨辉三角</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">paska</span>(<span class="params">n</span>):</span><br><span class="line">    i , last =<span class="number">1</span> , [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        j , now = <span class="number">1</span>, [<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">while</span> j&lt;i-<span class="number">1</span>:</span><br><span class="line">            now.append(last[j]+last[j-<span class="number">1</span>])</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i!=<span class="number">1</span>:</span><br><span class="line">            now.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">yield</span> now</span><br><span class="line">        last = now</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">g = paska(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></li></ul><h3 id="第八章-用户输入与while循环"><a href="#第八章-用户输入与while循环" class="headerlink" title="第八章 用户输入与while循环"></a>第八章 用户输入与while循环</h3><h4 id="8-1-函数input-的工作原理"><a href="#8-1-函数input-的工作原理" class="headerlink" title="8.1 函数input()的工作原理"></a>8.1 函数input()的工作原理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b = <span class="built_in">input</span>(<span class="string">&quot;pls input a: &quot;</span>),<span class="built_in">input</span>(<span class="string">&quot;pls input b&quot;</span>) <span class="comment"># &quot;&quot;里为提示词</span></span><br><span class="line">c,d = (<span class="built_in">input</span>().split()) <span class="comment"># input().split()可在一行中同时输入多个值 未加split时无法像c++那样把空格作为分隔符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(a)+<span class="built_in">int</span>(b)) <span class="comment"># 默认类型为字符串 需用int()函数转化为数值</span></span><br></pre></td></tr></table></figure><h4 id="8-2-while循环介绍"><a href="#8-2-while循环介绍" class="headerlink" title="8.2 while循环介绍"></a>8.2 while循环介绍</h4><ul><li>具体用法示例:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">5</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">4</span> = <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># break与continue和其他语言用法相同</span></span><br></pre></td></tr></table></figure><h4 id="8-3-使用while循环处理列表和字典"><a href="#8-3-使用while循环处理列表和字典" class="headerlink" title="8.3 使用while循环处理列表和字典"></a>8.3 使用while循环处理列表和字典</h4><ul><li>具体用法示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pets = [<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;dog&#x27;</span>,<span class="string">&#x27;bird&#x27;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;cat&#x27;</span> <span class="keyword">in</span> pets: </span><br><span class="line">    pets.remove(<span class="string">&#x27;cat&#x27;</span>) <span class="comment"># 删除所有值为&#x27;cat&#x27;的元素 其它用法较为简单 不写了</span></span><br></pre></td></tr></table></figure><h3 id="第九章-函数"><a href="#第九章-函数" class="headerlink" title="第九章 函数"></a>第九章 函数</h3><h4 id="9-1-定义函数"><a href="#9-1-定义函数" class="headerlink" title="9.1 定义函数"></a>9.1 定义函数</h4><ul><li>用法示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a+b)</span><br><span class="line">cal(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="9-2-传递实参"><a href="#9-2-传递实参" class="headerlink" title="9.2 传递实参"></a>9.2 传递实参</h4><ul><li>默认值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">a,b = <span class="number">4</span></span>): <span class="comment"># 若调用时没传参,则使用默认参数</span></span><br><span class="line">    <span class="built_in">print</span>(a+b)</span><br><span class="line">cal(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="9-3-返回值"><a href="#9-3-返回值" class="headerlink" title="9.3 返回值"></a>9.3 返回值</h4><ul><li>返回简单值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cal(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#同理c++中的非void函数</span></span><br></pre></td></tr></table></figure><h4 id="9-4-传递列表"><a href="#9-4-传递列表" class="headerlink" title="9.4 传递列表"></a>9.4 传递列表</h4><ul><li>同理。将列表作为实参传进去即可</li><li>禁止函数修改列表：将实参后加上<code>[:]</code>后即可 表示切片副本</li></ul><h4 id="9-5-传递任意数量的实参"><a href="#9-5-传递任意数量的实参" class="headerlink" title="9.5 传递任意数量的实参"></a>9.5 传递任意数量的实参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scanf</span>(<span class="params">*name</span>): <span class="comment"># 形参*name可以让python创建一个名为name的空元组,并将收到的值全部封装进该元组中</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">name,ID,**user_info</span>): <span class="comment"># 形参**user_info可以让python创建一个名为user_info的空字典</span></span><br><span class="line">    user_info[<span class="string">&#x27;id&#x27;</span>] = ID</span><br><span class="line">    user_info[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">    <span class="keyword">return</span> user_info</span><br><span class="line">scanf(<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;bob&#x27;</span>)</span><br><span class="line">scanf(<span class="string">&#x27;kamak&#x27;</span>,<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;lucy&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="9-6-将函数储存在模块中"><a href="#9-6-将函数储存在模块中" class="headerlink" title="9.6 将函数储存在模块中"></a>9.6 将函数储存在模块中</h4><ul><li>要让函数是可导入的 得在同目录下创建一个新的程序文件,且删除所有主程序(否则导入后主程序也会被一起执行)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def cal(a,b):</span></span><br><span class="line"><span class="comment"># print(int(a)+int(b)) 函数文件func.py</span></span><br><span class="line"><span class="keyword">import</span> func <span class="comment"># 导入整个模块(包括主程序)</span></span><br><span class="line">func.cal(<span class="number">3</span>,<span class="number">4</span>) <span class="comment"># 调用模块函数</span></span><br><span class="line"><span class="keyword">import</span> func <span class="keyword">as</span> cal <span class="comment"># 给指定模块重命名</span></span><br><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> cal <span class="comment"># 导入特定函数</span></span><br><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> cal <span class="keyword">as</span> add <span class="comment"># 给指定函数重命名</span></span><br><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> * <span class="comment"># 导入模块中的所有函数(不包括主程序)</span></span><br><span class="line"><span class="comment">#只导入函数时,调用时无需加模块名前缀</span></span><br></pre></td></tr></table></figure><ul><li>更多有关模块的内容见补充章节:模块</li></ul><h4 id="9-7-函数编写指南"><a href="#9-7-函数编写指南" class="headerlink" title="9.7 函数编写指南"></a>9.7 函数编写指南</h4><ul><li>略</li><li>有关函数的更多知识见补充章节:函数式编程</li></ul><h3 id="第十章-类"><a href="#第十章-类" class="headerlink" title="第十章 类"></a>第十章 类</h3><h4 id="10-1-创建和使用类"><a href="#10-1-创建和使用类" class="headerlink" title="10.1 创建和使用类"></a>10.1 创建和使用类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>): <span class="comment"># 类似初始化</span></span><br><span class="line">        self.name = name <span class="comment">#属性</span></span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>): <span class="comment">#方法</span></span><br><span class="line">        <span class="built_in">print</span>(self.name+<span class="string">&quot;is now sitting&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name+<span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">dog1 = dog(<span class="string">&#x27;peter&#x27;</span>,<span class="number">4</span>) <span class="comment">#创建实例</span></span><br><span class="line">dog1.sit() <span class="comment">#调用方法</span></span><br></pre></td></tr></table></figure><ul><li>关于方法<strong> init </strong>(): <ul><li>类中的函数都称为<strong>方法</strong>。<code>init</code>是一种特殊的方法,每当创建该类的新实例时，python都会自动运行它,此方法中务必确保<code>init</code><strong>两边各有两个下划线</strong>  (方便起见,下文中的双下划线均省略)</li><li>在<code>init</code>方法的定义中,形参<code>self</code>必不可少,且必须位于其他形参前面。在调用该方法创建示例时,将自动传入实参<code>self</code>,它是一个指向实例本身的引用,让示例能够访问类中的属性和方法（说白了就是个代表实例的形参）</li></ul></li></ul><h4 id="10-2-使用类和示例"><a href="#10-2-使用类和示例" class="headerlink" title="10.2 使用类和示例"></a>10.2 使用类和示例</h4><ul><li>给属性指定默认值: 在<code>init</code>方法中给属性赋一个固定的值即可</li><li>修改属性的值: 一种方法是直接用赋值语句修改属性的值,另一种方法是通过调用方法来修改属性的值,见下代码:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>:</span><br><span class="line">    <span class="comment">#省略#</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_age</span>(<span class="params">self,age</span>):</span><br><span class="line">        self.age = age </span><br><span class="line">        </span><br><span class="line">dog1 = dog(<span class="string">&#x27;peter&#x27;</span>,<span class="number">4</span>) </span><br><span class="line">dog1.update_age(<span class="number">5</span>) <span class="comment"># 无需访问属性 直接在内部更新</span></span><br></pre></td></tr></table></figure><h4 id="10-3-继承"><a href="#10-3-继承" class="headerlink" title="10.3 继承"></a>10.3 继承</h4><ul><li>编写类时, 并非总是从空白开始,如果要编写的类是另一个现成类的特殊版本,可以使用<strong>继承</strong>。一个类继承另一个类时,将自动获得另一个类的所有属性和方法。原有的类称为<strong>父类</strong>,新类称为<strong>子类</strong>。具体定义规则见下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>: <span class="comment">#父类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name+<span class="string">&quot;is now sitting&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name+<span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Golden_Retriever</span>(<span class="title class_ inherited__">dog</span>): <span class="comment"># 定义子类时,必须在括号中加入父类的名称</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>): <span class="comment"># 接受创建dog实例所需要的信息</span></span><br><span class="line">        <span class="built_in">super</span>.__init__(name,age) <span class="comment"># super()是一种特殊函数,允许调用父类的方法</span></span><br><span class="line">        self.cost = <span class="number">1500</span> <span class="comment"># 初始化子类的特有属性</span></span><br></pre></td></tr></table></figure><ul><li>重写父类的方法: 在子类中定义一个与父类方法同名的方法,python将不会考虑这个父类的方法,而只关注在子类中定义的方法</li><li>将实例用作属性: 当类的细节添加的越来越多时,属性和方法清单以及文件都越来越长,在这种情况下,可以将类的一部分提取出来,作为一个独立的类,示例见下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">info</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,ID,socre</span>):</span><br><span class="line">        self.<span class="built_in">id</span> = ID</span><br><span class="line">        self.socre = socre</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_ID</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ID is &quot;</span>+<span class="built_in">str</span>(self.<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    <span class="keyword">def</span>  <span class="title function_">__init__</span>(<span class="params">self,name,age,ID,socre</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.info = info(ID,socre) <span class="comment">#添加一个self.info的属性,新建一个info示例</span></span><br><span class="line"></span><br><span class="line">koishi = student(<span class="string">&#x27;koishi&#x27;</span>,<span class="number">18</span>,<span class="number">514</span>,<span class="number">114</span>)</span><br><span class="line">koishi.info.get_ID()</span><br></pre></td></tr></table></figure><h4 id="10-4-导入类"><a href="#10-4-导入类" class="headerlink" title="10.4 导入类"></a>10.4 导入类</h4><ul><li>同理前面的函数导入,略</li></ul><h4 id="10-5-python标准库"><a href="#10-5-python标准库" class="headerlink" title="10.5 python标准库"></a>10.5 python标准库</h4><ul><li><code>randint</code>与<code>choice</code>函数:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint <span class="comment"># 从random模块中导入randint函数</span></span><br><span class="line"><span class="built_in">print</span>(randint(<span class="number">1</span>,<span class="number">6</span>)) <span class="comment"># 随机生成1~6中的一个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice <span class="comment"># 导入choice函数 </span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(choice(a)) <span class="comment"># 从a列表中随机选出一个值</span></span><br></pre></td></tr></table></figure><h4 id="10-6-类编码风格"><a href="#10-6-类编码风格" class="headerlink" title="10.6 类编码风格"></a>10.6 类编码风格</h4><ul><li>类的命名多采用驼峰命名法,即将类名中的每个单词首字母都大写,而不使用下划线。实例名和模块都采用小写模式,并在单词间加上下划线。</li></ul><h3 id="第十一章-文件和异常"><a href="#第十一章-文件和异常" class="headerlink" title="第十一章 文件和异常"></a>第十一章 文件和异常</h3><h4 id="11-1-从文件中读取数据"><a href="#11-1-从文件中读取数据" class="headerlink" title="11.1 从文件中读取数据"></a>11.1 从文件中读取数据</h4><ul><li>示例:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test/pi.txt&#x27;</span>) <span class="keyword">as</span> file_object: <span class="comment">#打开test目录下的pi.txt 同目录的直接加文件名即可</span></span><br><span class="line">    pi = file_object.read() <span class="comment">#读取文本</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flie_object: <span class="comment">#逐行读取文本</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    lines = file_object.readlines() <span class="comment">#readlines()函数能逐行读取文件,并储存在一个列表中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pi) <span class="comment">#书上说打印时多一格空行然而我这并没有==</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps: 不知道是不是我自己编译器的问题... 这里的flie_object:下面只能包括一行代码==</span></span><br></pre></td></tr></table></figure><h4 id="11-2-写入文件"><a href="#11-2-写入文件" class="headerlink" title="11.2 写入文件"></a>11.2 写入文件</h4><ul><li>示例:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test/sigma.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> si:</span><br><span class="line">    si.write(<span class="string">&quot;sigma is a math character&quot;</span>) <span class="comment"># 写入字符</span></span><br></pre></td></tr></table></figure><ul><li>这里的第二个实参<code>w</code>表示了文件的打开模式,<code>w</code>即代表写入模式。打开文件时,可指定读取模式<code>r</code>,写入模式<code>w</code>,附加模式<code>a</code>和读写模式<code>r+</code>。默认模式为读取模式</li><li>附加模式和写入模式的区别:写入模式会覆盖所有原内容,而附加模式只会将写入文件的行添加到文件末尾</li><li>如果指定的文件不存在,python会帮你创建一个新文件</li></ul><h4 id="11-3-异常"><a href="#11-3-异常" class="headerlink" title="11.3 异常"></a>11.3 异常</h4><ul><li><code>ZeroDivisionError</code>异常: 顾名思义,python中禁止出现除以0的情况</li><li><code>FileNotFoundError</code>异常: 顾名思义,文件名无法找到</li><li>使用<code>try-expect</code>避免程序错误: 通过提前预知程序出错的地方防止程序出错,可提高代码的防御能力。示例:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a , b = <span class="built_in">int</span>(<span class="built_in">input</span>()),<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    c = a/b <span class="comment"># 测试是否合法</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you can&#x27;t divide by zero&quot;</span>) <span class="comment"># 若出错 输出该报错信息,否则照常运行</span></span><br><span class="line"><span class="keyword">else</span>: <span class="built_in">print</span>(a/b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;alice.text&#x27;</span>) <span class="keyword">as</span> f: <span class="comment"># 同理</span></span><br><span class="line">        content = f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># </span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    words = content.split() <span class="comment"># split()函数可以以空格为分隔符将字符串拆分为多个部分,并储存在一个列表中</span></span><br></pre></td></tr></table></figure><h4 id="11-4-存储数据"><a href="#11-4-存储数据" class="headerlink" title="11.4 存储数据"></a>11.4 存储数据</h4><ul><li><p>什么是<code>json</code>: 用户关闭程序时,几乎总要保留他们提供的信息(如游戏中的各种设置),一种简单的方式是使用模块<code>json</code>来存储数据。<code>json</code>能让简单的python数据结构转储到文件中,并在程序再次运行时加载该文件的数据,重要的是,<code>json</code>的数据格式并非python专用的,因此能够以<code>json</code>格式存储的数据与使用其他编程语言的人分享。</p></li><li><p>使用<code>json.dump</code>和<code>json.load</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">file = <span class="string">&#x27;a.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f: <span class="comment"># 添加json文件</span></span><br><span class="line">    json.dump(a,f) <span class="comment"># 在json文件中写入a</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file) <span class="keyword">as</span> f:</span><br><span class="line">    b = json.load(f) <span class="comment">#加载json文件中的信息,赋给b</span></span><br></pre></td></tr></table></figure><ul><li>案例演示: 用户信息输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">file = <span class="string">&#x27;name.json&#x27;</span></span><br><span class="line"><span class="keyword">try</span>: <span class="comment"># 检测是否有存储姓名,若无,则新建一个</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file) <span class="keyword">as</span> f: </span><br><span class="line">       name = json.load(f)</span><br><span class="line">       <span class="built_in">print</span>(name)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    name = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(name, f)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;welcome! &quot;</span>+name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;welcome back! &quot;</span>+name)</span><br></pre></td></tr></table></figure><h3 id="第十二章-测试代码"><a href="#第十二章-测试代码" class="headerlink" title="第十二章 测试代码"></a>第十二章 测试代码</h3><h4 id="12-1-测试函数"><a href="#12-1-测试函数" class="headerlink" title="12.1 测试函数"></a>12.1 测试函数</h4><ul><li>使用python中自带的单元测试来测试函数:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest <span class="comment"># 导入模块unittest</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">a,b</span>):</span><br><span class="line"><span class="keyword">return</span> (a+b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FuncTest</span>(unittest.TestCase): <span class="comment"># 建立类用于一系列的单元测试。注意,此类必须继承unittest.TestCase类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_answer</span>(<span class="params">self</span>):</span><br><span class="line">answer = cal(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">self.assertEqual(answer,<span class="number">7</span>) <span class="comment"># unittest中的断言方法,用于核实预测与结果是否一致。注意E要大写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">unittest.main()</span><br><span class="line"><span class="comment"># __name__是python的一个内置函数,若此文件作为主程序使用,则__name__被设为__main__,在这里,调用</span></span><br><span class="line"><span class="comment"># unittest.main()来运行测试样例。如果此文件被测试框架导入,该变量值将不是__main__,因此不调用函数</span></span><br></pre></td></tr></table></figure><ul><li>各种断言方法:</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">assertEqual(a,b)</td><td style="text-align:center">核实 a == b</td></tr><tr><td style="text-align:center">assertNotEqual(a,b)</td><td style="text-align:center">核实 a != b</td></tr><tr><td style="text-align:center">assertTrue(x)</td><td style="text-align:center">核实x为True</td></tr><tr><td style="text-align:center">assertFalse(x)</td><td style="text-align:center">核实x为False</td></tr><tr><td style="text-align:center">assertIn(item,list)</td><td style="text-align:center">核实item在list中</td></tr><tr><td style="text-align:center">assertNotIn(item,list)</td><td style="text-align:center">核实item不在list中</td></tr></tbody></table></div><h4 id="12-2-测试类"><a href="#12-2-测试类" class="headerlink" title="12.2 测试类"></a>12.2 测试类</h4><ul><li>和测试函数类似,测试类主要是测试类中方法的行为</li><li>方法<code>setUp</code>: 创建一个调查对象以及一个答案列表,使测试更为简单方便,具体用法略。</li></ul><h3 id="第十三章-函数式编程"><a href="#第十三章-函数式编程" class="headerlink" title="*第十三章 函数式编程"></a>*第十三章 函数式编程</h3><h4 id="13-1-高阶函数"><a href="#13-1-高阶函数" class="headerlink" title="13.1 高阶函数"></a>13.1 高阶函数</h4><ul><li>Python中的函数,有以下两个特点:<ul><li>变量可以指向函数: 以<code>abs()</code>函数为例子,函数名<code>abs</code>可以赋给变量,如<code>f = abs</code> 此时,调用<code>f</code> 等价于调用<code>abs</code></li><li>函数名也是变量: 如<code>abs = 10</code> <code>abs = max</code>等语句,可以将函数名指向其他对象,此时若再次调用abs,</li></ul></li><li>若一个函数就能接收另一个函数作为参数，该函数就称之为高阶函数,如下就是一个简单的例子:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a,b,cal</span>): <span class="comment">#将函数作为参数传入</span></span><br><span class="line">    <span class="keyword">return</span> cal(a+b)*cal(a+b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mul(<span class="number">6</span>,<span class="number">4</span>,add))</span><br></pre></td></tr></table></figure><ul><li><p>map/reduce函数:</p><ul><li><code>map</code>函数接受两个参数,一个是函数,一个是可迭代对象<code>Iterable</code>,<code>map</code>将传入的函数作用到序列中的每一个元素,并并把结果作为<code>Iterator</code>返回,示例见下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> a**<span class="number">2</span></span><br><span class="line">a = <span class="built_in">map</span>(f,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]) <span class="comment"># 计算平方</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">b = <span class="built_in">map</span>(<span class="built_in">str</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]) <span class="comment"># int转str</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(b)) <span class="comment">#list函数可以将迭代器中的值遍历一遍,存入到列表中。且调用完后迭代器生成完了所有元素</span></span><br></pre></td></tr></table></figure><ul><li><code>reduce</code>函数把一个函数作用到一个序列<code>[a1,a2,a3,...]</code>上,且这个函数必须能传入两个参数,<code>reduce</code>把结果继续和序列的下一个元素做累积计算,直观的讲就是:<code>reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</code> ,示例见下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce <span class="comment"># reduce函数需要先从库中导入</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">a = reduce(f,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]) <span class="comment">#求和</span></span><br></pre></td></tr></table></figure><ul><li>不过这个例子没啥用,下面给一个更加综合的例子:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce <span class="comment"># 字符串转数字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2int</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a*<span class="number">10</span>+b</span><br><span class="line"><span class="built_in">print</span>(reduce(add,<span class="built_in">map</span>(str2int,[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>])))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>filter:</p><ul><li>和<code>map</code>函数一样,<code>filter</code>函数也接收一个函数和一个序列。<code>filter</code>函数将函数的返回值作用于每个元素,来决定该元素是否被抛弃,一个简单的示例见下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">odd</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> a%<span class="number">2</span>==<span class="number">1</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(odd,a))) <span class="comment"># 判断是否为奇数(注意,filter函数的返回值也是Iterator)</span></span><br></pre></td></tr></table></figure><ul><li>一个更为复杂的例子,用filter实现回文数判断:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hw</span>(<span class="params">a</span>):</span><br><span class="line">    x,n,b=<span class="number">0</span>,a,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        x = n%<span class="number">10</span></span><br><span class="line">        b = b*<span class="number">10</span>+x</span><br><span class="line">        n = <span class="built_in">int</span>(n/<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> a==b:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1234321</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">34</span>,<span class="number">32</span>,<span class="number">323</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(hw,a)))</span><br></pre></td></tr></table></figure></li><li><p>sorted:</p><ul><li><code>sorted</code>函数默认为升序排序,前面写过,若要实现降序排序,可以通过改变其内部参数<code>reverse</code>来实现,同时,<code>sorted</code>也可以通过传入外部函数来确定排序方法,示例见下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cmp</span>(<span class="params">a</span>): <span class="comment">#字符串与数字类型一起排序</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(a, <span class="built_in">int</span>):</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">if</span> (i&lt;<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> i&gt;<span class="string">&#x27;9&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(a, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(a)</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&quot;114514&quot;</span>,<span class="string">&quot;koishi&quot;</span>,<span class="number">19</span>,<span class="number">810</span>,<span class="string">&quot;satori&quot;</span>,<span class="string">&quot;54&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a,key = cmp)) <span class="comment"># [&#x27;koishi&#x27;, &#x27;satori&#x27;, 19, &#x27;54&#x27;, 810, &#x27;114514&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="13-2-返回函数"><a href="#13-2-返回函数" class="headerlink" title="13.2 返回函数"></a>13.2 返回函数</h4><ul><li>高阶函数除了可以接受其他函数作为参数外,还可以将函数作为返回值,例子如下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lazy_sum</span>(<span class="params">*a</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sum</span>():</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">            s = s+i</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line">s = lazy_sum(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>) <span class="comment"># 当调用lazy_sum时,返回的是结果,而不是函数</span></span><br><span class="line"><span class="built_in">print</span>(s()) <span class="comment"># 只有调用s时,才返回真正的求和结果</span></span><br></pre></td></tr></table></figure><ul><li>能够读取其他函数内部变量的函数,称为<strong>闭包</strong>（Closure）。上面的内部函数<code>sum</code>就是一个闭包</li><li>注意,每次调用外层函数时,所返回的都是一个新的内层函数,即使传入的参数是一样的</li><li>一个需要注意的问题是,返回的函数并没有立刻执行，而是直到调用了自身后才执行。来看一个例子:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">             <span class="keyword">return</span> i*i <span class="comment">#期望输出1,4,9</span></span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">a,b,c = count()</span><br><span class="line"><span class="built_in">print</span>(a(),b(),c()) <span class="comment"># 9 9 9</span></span><br></pre></td></tr></table></figure><ul><li>上述代码中,我们认为的输出应该是<code>1 4 9</code>,而事实并非如此。原因就在于<code>f</code>函数内部引用了变量<code>i</code>,但它并非立刻执行。在我们第一次调用外层函数<code>count</code>后,循环已经执行完成了,因此此时<code>i</code>的值为3,而<code>f</code>函数是在调用<code>a,b,c</code>时才执行的,此时<code>i</code>的值已经为<code>3</code>了,故输出为<code>9 9 9</code></li><li>上面的例子也告诉了我们,返回函数不要使用循环变量或后续会发生变化的变量,若真要引用循环变量,可以再创建一个函数来绑定当前的值,例子如下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a</span>): <span class="comment"># 绑定a的值</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">            <span class="keyword">return</span> a*a</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        fs.append(f(i))</span><br><span class="line">    <span class="keyword">return</span> fs</span><br></pre></td></tr></table></figure><ul><li><p>这种在调用时才进行计算的方法成为”惰性计算”(类似于线段树中的懒标记)</p></li><li><p>在内层函数中,若对外层变量<code>x</code>进行<code>x = x+1</code>等赋值操作,会把外层变量<code>x</code>当作内层函数的局部变量,从而因未初始化而产生报错,因此要在内层函数中加入一个<code>nonlocal x</code>的声明。加上声明后,解释器就会把<code>x</code>看作外层函数的局部变量</p></li></ul><h4 id="13-3-匿名函数"><a href="#13-3-匿名函数" class="headerlink" title="13.3 匿名函数"></a>13.3 匿名函数</h4><ul><li>python中,若所需函数较为简单,可以使用匿名函数<code>lambda</code>,用法示例如下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">lambda</span> x:x*x</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> a*a</span><br></pre></td></tr></table></figure><ul><li>其中,冒号前为传入的参数(可传入多个),冒号后为返回的表达式。同样的,匿名函数也可以作为返回值返回</li><li>一个较为复杂的例子: 用<code>lambda</code>与<code>filter</code>函数实现埃式筛:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(): <span class="comment"># 生成无限序列</span></span><br><span class="line">  i = <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">yield</span> i</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">2</span>: i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> :i+=<span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a</span>): <span class="comment"># 筛选函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x:x%a!=<span class="number">0</span></span><br><span class="line">g = fn()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  n = <span class="built_in">next</span>(g)</span><br><span class="line">  <span class="keyword">if</span> n&lt;<span class="number">100</span>: <span class="comment"># 因为是无限序列 要加上退出判断</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  g = <span class="built_in">filter</span>(f(n),g) <span class="comment"># 筛选</span></span><br></pre></td></tr></table></figure><h4 id="13-4-装饰器-decorator"><a href="#13-4-装饰器-decorator" class="headerlink" title="13.4 装饰器(decorator)"></a>13.4 装饰器(decorator)</h4><ul><li>装饰器(decorator)就是用于拓展原函数功能的一种函数,一个简单的例子如下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">func</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;call %s():&#x27;</span> %func.__name__)<span class="comment"># 在运行函数前输出&quot;call 函数名()&quot;,func.__name__即为函数名</span></span><br><span class="line">    <span class="keyword">return</span> func(*args,**kw)</span><br><span class="line">  <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;2022-10-9&quot;</span>)</span><br><span class="line">now()</span><br></pre></td></tr></table></figure><ul><li>下面来一步步解释上述代码:<ul><li><code>wrapper</code>函数的参数定义是<code>(*args,**kw)</code>,因此可以接受任何参数,在<code>wrapper</code>函数中,首先先打印日志,紧接着再调用原函数。</li><li><code>now</code>函数上面的<code>@log</code>,等价于执行<code>now = log(now)</code>。由于<code>log</code>是一个装饰器,所以,原来的<code>now</code>函数任然存在,只是现在同名的<code>now</code>变量指向了新的函数。最后,在调用<code>now</code>函数时,返回中的<code>wrapper</code>被执行</li></ul></li><li>如果decorator本身需要传入参数,那就需要再嵌套一层返回decorator的函数:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">text</span>): <span class="comment"># 自定义log的文本</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">warpper</span>(<span class="params">*arg,**hw</span>):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;%s %s(): &quot;</span> %(text,func.__name__))</span><br><span class="line">      <span class="keyword">return</span> func(*arg,**hw)</span><br><span class="line">    <span class="keyword">return</span> warpper</span><br><span class="line">  <span class="keyword">return</span> decorator</span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;2022-10-9&quot;</span>)</span><br><span class="line"></span><br><span class="line">now()</span><br></pre></td></tr></table></figure><ul><li>与两层嵌套相比,三层嵌套的返回等价于<code>now = log(&#39;execute&#39;)(now)</code>,先调用<code>log</code>函数,返回的是’decorator’函数,再调用返回的<code>decorator</code>函数,最终返回的是<code>warpper</code>函数</li><li>最后,还有一个问题,由于返回的函数的函数名为’warpper’,原函数的<code>__name__</code>属性也被改成了’warpper’,因此,还要调用<code>functools</code>中的<code>warps</code>函数,将<code>now</code>的一些属性赋给<code>wrapper</code>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">text</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>) </span><span class="comment"># 等价于warpper = functools.wraps(warpper)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">warpper</span>(<span class="params">*arg,**hw</span>):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;%s %s(): &quot;</span> %(text,func.__name__))</span><br><span class="line">      <span class="keyword">return</span> func(*arg,**hw)</span><br><span class="line">    <span class="keyword">return</span> warpper</span><br><span class="line">  <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;2022-10-9&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="13-5-偏函数-partial-function"><a href="#13-5-偏函数-partial-function" class="headerlink" title="13.5 偏函数(partial function)"></a>13.5 偏函数(partial function)</h4><ul><li><code>int</code>函数可以通过提供额外的参数<code>base</code>来进行多进制转换,例如<code>int(&#39;x&#39;,base = 2)</code>,可以将二进制数x转换为十进制整数,当我们有多个数需要进行转换时,可以定义函数来简化计算,例如:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">d_to_b</span>(<span class="params">x, base=<span class="number">2</span></span>): <span class="comment"># 二进制转十进制</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(x, base)</span><br><span class="line">a = d_to_b(<span class="string">&#x27;100101&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><ul><li>偏函数(partial function),就是指把一个函数的某些参数给固定住,并返回一个新的函数。上面就是偏函数的一种传统写法。同时,我们也可以使用<code>functools</code>中的<code>functools.partial</code>来帮我们简化代码:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">d_to_b = functools.partial(<span class="built_in">int</span>,base=<span class="number">2</span>)</span><br><span class="line">a = <span class="string">&#x27;100101&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d_to_b(a))</span><br></pre></td></tr></table></figure><ul><li>实际上,创建偏函数时,可以接受函数对象,可变参数<code>*arg</code>,关键字参数<code>**kw</code>这三个参数。例如上面的<code>base = 2</code>,等价于传入<code>&#123;&#39;base&#39;,2&#125;</code></li><li>另一个例子,给<code>max</code>函数添加固定比较对象:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">max2 = functools.partial(<span class="built_in">max</span>,<span class="number">10</span>) <span class="comment">#等价于把10作为*arg的一部分加到最左边</span></span><br><span class="line"><span class="built_in">print</span>(max2(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">19</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure><h3 id="第十四章-模块"><a href="#第十四章-模块" class="headerlink" title="*第十四章 模块"></a>*第十四章 模块</h3><h4 id="14-1模块标准模板与作用域"><a href="#14-1模块标准模板与作用域" class="headerlink" title="14.1模块标准模板与作用域"></a>14.1模块标准模板与作用域</h4><ul><li>模块标准文件模板:<ul><li>其中第一第二行是标准注释,第1行注释可以让这个此文件直接在Unix/Linux/Mac上运行,第2行注释表示.py文件本身使用标准UTF-8编码。</li><li>第4行是一个字符串,表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释。</li><li>第6行使用<code>__author__</code>变量把作者写进去，这样当你公开源代码后别人就可以看到自己的名字。接下来的部分就是正文了</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; a test module &#x27;</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;xcxc82&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>作用域<ul><li>正常的函数默认都是公开(public)的, 若要在模块中封装一些函数和变量,说明其只能在模块内部使用(private), 可以在其名字前加上<code>_</code>或<code>__</code>来表示此函数<strong>不应该</strong>被直接引用(不是”不能”被直接引用,python中没有一个方法可以完全限制访问private函数或变量)</li><li>外部不需要引用的函数全部定义成private,只有外部需要的函数定义成public</li></ul></li></ul><h4 id="14-2-安装第三方模块"><a href="#14-2-安装第三方模块" class="headerlink" title="14.2 安装第三方模块"></a>14.2 安装第三方模块</h4><ul><li>在cmd中输入<code>npm install xxx</code>,表示安装xxx模块。一般来说，第三方库都会在Python官方的<a href="https://pypi.python.org/">pypi.python.org</a>网站注册，要安装一个第三方库，必须先知道该库的名称，可以在官网或者pypi上搜索,安装好后,就可以使用该模块了</li><li>不过,用上述方法一个个的安装模块,属实有点费力,因此也可以使用<a href="https://www.anaconda.com/">Anaconda</a>进行安装,这是一个基于Python的数据处理和科学计算平台，内置了许多有用的第三方库，装上Anaconda，就相当于安装了数十个第三方模块,非常的简单使用</li><li>模块搜索路径: 当我们试图加载一个模块时,python会在指定的路径下搜索对应的文件,若找不到,就会进行报错。默认情况下,python会搜索当前目录、所有已安装的内置模块和第三方模块,搜索路径放在<code>sys</code>模块的<code>path</code>变量中:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.path)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;C:\\Users\\16349\\Desktop\\python&#x27;, </span></span><br><span class="line"><span class="string">&#x27;C:\\Users\\16349\\AppData\\Local\\Programs\\Python\\Python310\\python310.zip&#x27;, </span></span><br><span class="line"><span class="string">&#x27;C:\\Users\\16349\\AppData\\Local\\Programs\\Python\\Python310\\DLLs&#x27;, </span></span><br><span class="line"><span class="string">&#x27;C:\\Users\\16349\\AppData\\Local\\Programs\\Python\\Python310\\lib&#x27;, </span></span><br><span class="line"><span class="string">&#x27;C:\\Users\\16349\\AppData\\Local\\Programs\\Python\\Python310&#x27;, </span></span><br><span class="line"><span class="string">&#x27;C:\\Users\\16349\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages&#x27;]</span></span><br><span class="line"><span class="string">[Finished in 314ms]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>若想要自己添加自己的搜索目录,有两种方法,一种是直接添加到<code>sys.path</code>中,这种方法在运行结束后便会失效; 第二种方法是添加环境变量<code>PYTHONPATH</code>来改变</li></ul><center>第二部分 项目</center><h2 id="项目1-外星人入侵"><a href="#项目1-外星人入侵" class="headerlink" title="项目1 外星人入侵"></a>项目1 外星人入侵</h2><h3 id="第十五章-武装飞船"><a href="#第十五章-武装飞船" class="headerlink" title="第十五章 武装飞船"></a>第十五章 武装飞船</h3><p>十二月csp认证打完后再写</p>]]></content>
      
      
      <categories>
          
          <category> 大学学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础乐理知识笔记</title>
      <link href="/2022/07/31/%E5%9F%BA%E7%A1%80%E4%B9%90%E7%90%86%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/31/%E5%9F%BA%E7%A1%80%E4%B9%90%E7%90%86%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>对应b站教程:<a href="https://www.bilibili.com/video/BV14p4y1e7TV?p=1&amp;vd_source=51e3f6ab44e8fbb799044e19b28f9f8b">https://www.bilibili.com/video/BV14p4y1e7TV?p=1&amp;vd_source=51e3f6ab44e8fbb799044e19b28f9f8b</a></p><h2 id="唱名”与记住“唱名”的方法"><a href="#唱名”与记住“唱名”的方法" class="headerlink" title="唱名”与记住“唱名”的方法"></a>唱名”与记住“唱名”的方法</h2><ul><li>唱名: 在演唱旋律时为方便唱谱而采用的名称,如用”1234567”代表”do re mi fa sol la si” </li></ul><h2 id="简谱的构造-调号、拍号、情绪与速度的意义"><a href="#简谱的构造-调号、拍号、情绪与速度的意义" class="headerlink" title="简谱的构造(调号、拍号、情绪与速度的意义)"></a>简谱的构造(调号、拍号、情绪与速度的意义)</h2><ul><li>调号: 确定唱名和音名间的关系(音调的高低位置)</li><li>拍号:决定音乐的律动</li><li>情绪与速度:怎么唱,唱的速度(情绪一定程度上也代表速度)</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/al5g31so.png" alt=""></p><center>简谱中起决定作用的部分</center><h2 id="音名-钢琴键盘-初步理解-1-C"><a href="#音名-钢琴键盘-初步理解-1-C" class="headerlink" title="音名,钢琴键盘  初步理解 1=C"></a>音名,钢琴键盘  初步理解 1=C</h2><ul><li>调号形式:唱名=音名(例: 1=C,1=A,1=D等等)</li><li>音名:对固定高度的音所定的名称(CDEFGAB),音名的位置<strong>永远不变</strong>(无论什么情况,无论什么乐器)</li><li>钢琴键盘:由9个基本结构单元组组成,其中一个组里含有5个黑键和7个白键,黑白键地位等同,每组白键自左到右分别为”C D E F G A B”,第1组和第9组不完整,共88个键</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/m9r5qpbh.png" alt=""></p> <center>钢琴的基本结构单元</center><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ns0rsdxf.png" alt=""></p><center>88键钢琴键盘</center><ul><li>“1=C”的意义:确定唱名与音名间的对应关系,1=C即表示唱名”do”对应音名C,”234567”依次对应”DEFGAB”,<strong>只有在1=C时,”234567”全在白键上,其他情况不同</strong></li></ul><h2 id="升降号、黑键的音名-重升重降号、等音扩展篇"><a href="#升降号、黑键的音名-重升重降号、等音扩展篇" class="headerlink" title="升降号、黑键的音名  重升重降号、等音扩展篇"></a>升降号、黑键的音名  重升重降号、等音扩展篇</h2><ul><li>升号:♯  降号:♭ </li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/cidxthit.png" alt=""></p><center>升降号的意义</center><ul><li><img src="https://cdn.luogu.com.cn/upload/image_hosting/xofu4mwv.png" alt=""></li></ul><center>重升/降号的表示</center><ul><li>黑键的音名: 升降号+白键音名</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/3asmnsay.png" alt=""></p><center>升/降号的使用</center><ul><li><p>同一音名的不同写法称为等音,在某些特定的环境中使用等音写法可以更具连贯性,易理解</p></li><li><p>钢琴键盘自左到右,音的频率逐渐变大,音逐渐变高</p></li></ul><h2 id="纯八度是什么"><a href="#纯八度是什么" class="headerlink" title="纯八度是什么"></a>纯八度是什么</h2><ul><li><p>两个音的频率越接近简单的整数比,听上去就会越相近,和谐</p></li><li><p>相邻两组中相同音名的两个音的频率比为1:2时,称为纯八度</p></li></ul><h2 id="音的分组、中央C、标准音"><a href="#音的分组、中央C、标准音" class="headerlink" title="音的分组、中央C、标准音"></a>音的分组、中央C、标准音</h2><ul><li>赫尔姆霍茨法: 见下图</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5ldb0dq4.png" alt=""></p><center>赫尔姆霍茨法的命名规则</center><ul><li>科学音调记号法:见下图</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/nlhg8ibw.png" alt=""></p><center>科学音调记号法的命名规则</center><ul><li>中央C: 指C4(c)</li><li>标准音:国际通用的标准高度音,即A4(a)</li></ul><h2 id="高音点、低音点"><a href="#高音点、低音点" class="headerlink" title="高音点、低音点"></a>高音点、低音点</h2><ul><li>区分不同组中的唱名。命名规则见下图</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/z33lssyl.png" alt=""></p><h2 id="音域、1-C到底是哪组的C"><a href="#音域、1-C到底是哪组的C" class="headerlink" title="音域、1=C到底是哪组的C"></a>音域、1=C到底是哪组的C</h2><ul><li>音域: 乐器所能发出的音高的范围。钢琴的音域为A0~C8</li><li>正常人声的音域大约G3~D5,为简化乐谱,大多数简谱中的1=C都为C4</li></ul><h2 id="半音、全音"><a href="#半音、全音" class="headerlink" title="半音、全音"></a>半音、全音</h2><ul><li>半音:指相邻的两个音之间的距离</li><li>全音:半音x2</li></ul><h2 id="乐音、噪音、乐音体系、音列"><a href="#乐音、噪音、乐音体系、音列" class="headerlink" title="乐音、噪音、乐音体系、音列"></a>乐音、噪音、乐音体系、音列</h2><ul><li>乐音:振动规则,频率稳定的音</li><li>噪音:振动不规则,频率不稳定的音(打击乐器多为噪音乐器)</li><li>乐音体系:音乐中使用到的所有乐音的总和。绝大部分情况下为88个音</li><li>音列:乐音体系中,取若干乐音,有序的排列起来,称为音列</li></ul><h2 id="音级、基本音级、变化音级"><a href="#音级、基本音级、变化音级" class="headerlink" title="音级、基本音级、变化音级"></a>音级、基本音级、变化音级</h2><ul><li>音级:乐音体系中的每一个音,都叫做音级</li><li>基本音级: 具有独立名称，不带有升降记号的音级 (CDEFGAB)</li><li>变化音级: 升降号+基本音级</li></ul><h2 id="自然半音、变化半音、自然全音、变化全音"><a href="#自然半音、变化半音、自然全音、变化全音" class="headerlink" title="自然半音、变化半音、自然全音、变化全音"></a>自然半音、变化半音、自然全音、变化全音</h2><ul><li>自然半音,自然全音: 忽略升降符号,两个音的音名字母部分相邻。如#C-D为自然半音,#E-XF为自然全音</li><li>变化半音,变化全音: 反过来,字母部分不同。如♭B-C,♭G-♭♭A</li></ul><h2 id="1234567的内在规则"><a href="#1234567的内在规则" class="headerlink" title="1234567的内在规则"></a>1234567的内在规则</h2><ul><li>见下图</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/e16otlmq.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/l2fcqd2q.png" alt=""></p><h2 id="调式、自然大调式"><a href="#调式、自然大调式" class="headerlink" title="调式、自然大调式"></a>调式、自然大调式</h2><ul><li><p>调式:若干高低不同的乐音,围绕某一有稳定感的中心音,按一定的音程关系组织在一起,成为一个有机的体系 (<del>人话:若干个音按某种规则排列</del>)</p></li><li><p>自然大调式: 简称大调。具体规则如下图。</p></li><li>自然大调从X音开始,就称为X大调(如C大调,D大调)</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ns0v8556.png" alt=""></p><h2 id="音阶是什么、有什么用-关于调式、音阶的一个萌新常见误区"><a href="#音阶是什么、有什么用-关于调式、音阶的一个萌新常见误区" class="headerlink" title="音阶是什么、有什么用  关于调式、音阶的一个萌新常见误区"></a>音阶是什么、有什么用  关于调式、音阶的一个萌新常见误区</h2><ul><li>音阶:将调式中的音,从以主音开始到以主音结束,由低到高(叫做上行),或者由高到低(叫做下行),以阶梯状排列起来,就叫做音阶。</li><li>特点<ul><li>主音开始,主音结束(有始有终)</li><li>音阶是有序性的(方向性)</li><li>包含该调式中的所有音(完整性)</li></ul></li><li>误区: 调式,音阶不只有一个组</li></ul><h2 id="黑键出发的自然大调、等音调、音阶的选择"><a href="#黑键出发的自然大调、等音调、音阶的选择" class="headerlink" title="黑键出发的自然大调、等音调、音阶的选择"></a>黑键出发的自然大调、等音调、音阶的选择</h2><ul><li>等音调: 发音相同表示不同的调号</li><li>音阶中的相邻的两个音的字母必须连续</li><li>方便起见,含有重升重降号的音阶基本不使用</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ayr0qb7p.png" alt=""></p><h2 id="等音调扩展篇、何为一共十五个大调"><a href="#等音调扩展篇、何为一共十五个大调" class="headerlink" title="等音调扩展篇、何为一共十五个大调"></a>等音调扩展篇、何为一共十五个大调</h2><ul><li>见下图</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/4d2xvy43.png" alt=""></p><h2 id="调号总结篇"><a href="#调号总结篇" class="headerlink" title="调号总结篇"></a>调号总结篇</h2><ul><li>前面所有</li></ul><h2 id="模唱、相对音高的练习方式"><a href="#模唱、相对音高的练习方式" class="headerlink" title="模唱、相对音高的练习方式"></a>模唱、相对音高的练习方式</h2><ul><li>多唱</li></ul><h2 id="为什么要有这么多调号？"><a href="#为什么要有这么多调号？" class="headerlink" title="为什么要有这么多调号？"></a>为什么要有这么多调号？</h2><ul><li>适用不同的音域</li></ul><h2 id="如何构建大调音阶"><a href="#如何构建大调音阶" class="headerlink" title="如何构建大调音阶"></a>如何构建大调音阶</h2><ul><li>略 前面写过</li></ul><h2 id="7的发音是Si还是Ti"><a href="#7的发音是Si还是Ti" class="headerlink" title="7的发音是Si还是Ti"></a>7的发音是Si还是Ti</h2><ul><li>自己决定 没必要过于区分</li></ul><h2 id="升降号写音名左边还是右边"><a href="#升降号写音名左边还是右边" class="headerlink" title="升降号写音名左边还是右边"></a>升降号写音名左边还是右边</h2><ul><li>乐谱写左边,书面上无所谓</li></ul><h2 id="调性是什么"><a href="#调性是什么" class="headerlink" title="调性是什么"></a>调性是什么</h2><ul><li>调式: 未指定主音(例自然大调,自然小调)</li><li>调性: 指定了主音的调式(如C自然大调,D自然小调)</li></ul><h2 id="XX大调的音乐中能够出现XX大调音阶中没有的音吗"><a href="#XX大调的音乐中能够出现XX大调音阶中没有的音吗" class="headerlink" title="XX大调的音乐中能够出现XX大调音阶中没有的音吗"></a>XX大调的音乐中能够出现XX大调音阶中没有的音吗</h2><ul><li>可以 偶尔出现不是原本调里的音,是为了凸显新奇感</li><li>艺术行业的理论是一种对成品的归纳和总结,只能尽可能还原真相,目的是为了帮助后来者快速入门,不能做到百分百精确</li></ul><h2 id="首调与固定调"><a href="#首调与固定调" class="headerlink" title="首调与固定调"></a>首调与固定调</h2><ul><li><p>首调: 无论什么大调,都把该大调的首音当作1,234567以此为标准延续</p></li><li><p>固定调: 永远把唱名1234567与音名CDEFGAB对应</p></li><li><p>各自的优势与适用场景:</p><ul><li>首调更能体现相对音高,固定调更能体现绝对音高</li><li>首调适合歌唱与可变调的乐器</li><li>固定调适合不可变调的乐器 (如钢琴)</li></ul></li></ul><h2 id="相对音感与绝对音感"><a href="#相对音感与绝对音感" class="headerlink" title="相对音感与绝对音感"></a>相对音感与绝对音感</h2><ul><li>相对音感: 在有参考音的前提下分辨各个音之间的相对音高的能力。可以练</li><li>绝对音感: 无参考音就能分辨各个音,要天赋</li></ul><h2 id="原调、移调、转调、离调"><a href="#原调、移调、转调、离调" class="headerlink" title="原调、移调、转调、离调"></a>原调、移调、转调、离调</h2><ul><li><p>原调: 一首音乐本身的调。</p></li><li><p>移调: 将一首音乐的所有音调整到其他调上</p></li><li>转调: 将一首音乐的部分音调整到其他音上,并长时间处于新调,且基本上要在新调上结束</li><li>离调: 将一首音乐的小部分调整到其他音上,并快速返回原调</li></ul><h2 id="简谱需要移调吗？"><a href="#简谱需要移调吗？" class="headerlink" title="简谱需要移调吗？"></a>简谱需要移调吗？</h2><ul><li>使用首调时,仅需改变调号</li><li>使用固定调时要改变正文</li></ul><h2 id="高八度低八度算不算跑调"><a href="#高八度低八度算不算跑调" class="headerlink" title="高八度低八度算不算跑调"></a>高八度低八度算不算跑调</h2><ul><li>不算</li><li>自己唱的舒服就行</li></ul><h2 id="音名为什么有时候分组，有时候不分组"><a href="#音名为什么有时候分组，有时候不分组" class="headerlink" title="音名为什么有时候分组，有时候不分组"></a>音名为什么有时候分组，有时候不分组</h2><ul><li>对于一些在所有组上都适用的知识</li><li>对于 EGBD/3572 之类的形容,是从左到右按照从低到高的顺序排列的,哪怕要跨越组</li></ul><h2 id="不太明确的乐理题"><a href="#不太明确的乐理题" class="headerlink" title="不太明确的乐理题"></a>不太明确的乐理题</h2><p>略</p><h2 id="调号章节哪些东西还没有讲？为什么？什么时候讲"><a href="#调号章节哪些东西还没有讲？为什么？什么时候讲" class="headerlink" title="调号章节哪些东西还没有讲？为什么？什么时候讲?"></a>调号章节哪些东西还没有讲？为什么？什么时候讲?</h2><ul><li>其他调式,五度圈,还原号等等</li></ul><h2 id="拍号部分开始，认识音符"><a href="#拍号部分开始，认识音符" class="headerlink" title="拍号部分开始，认识音符"></a>拍号部分开始，认识音符</h2><ul><li>$\dfrac{X}{Y}$的意义: 以Y分音符(的时长)为一拍,每小节有X拍(的时长)</li><li>音符: 用来形容音的长短。几个常见的音符表示如下图所示:</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/3cezewyr.png" alt=""></p><center>图中一个小方块表示一个时间单位，时间单位的长度由情绪与速度决定</center><ul><li>二全音符/倍全音符: 时间为全音符的两倍(不常用)</li></ul><h2 id="什么是一拍"><a href="#什么是一拍" class="headerlink" title="什么是一拍"></a>什么是一拍</h2><ul><li>拍: 音乐中的时长单位</li><li>以Y分音符为一拍 $⟺$ 一拍的长度等于一个Y分音符的长度 (大多数情况下都是Y=4或Y=8)</li></ul><h2 id="小节，小节线，终止线"><a href="#小节，小节线，终止线" class="headerlink" title="小节，小节线，终止线"></a>小节，小节线，终止线</h2><ul><li>见下图</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/x7fxn0hd.png" alt=""></p><ul><li>小节线的作用:<ul><li>均分每一小节</li><li>预示强弱关系</li></ul></li></ul><h2 id="看懂拍号的意义"><a href="#看懂拍号的意义" class="headerlink" title="看懂拍号的意义"></a>看懂拍号的意义</h2><p>总结</p><h2 id="附点，复附点"><a href="#附点，复附点" class="headerlink" title="附点，复附点"></a>附点，复附点</h2><ul><li>附点:见下图</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/x35e1frh.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/jsjinse2.png" alt=""></p><center>附点来源于五线谱中的概念,附点二分音符在五线谱中有点</center><ul><li>复附点: 延长第一个附点代表的值的一半</li></ul><h2 id="延音线"><a href="#延音线" class="headerlink" title="延音线"></a>延音线</h2><ul><li>延音线:用与组合无法使用常规方式表达的拍数</li><li>一个音跨越小节时必须使用延音线,不可使用横线</li><li>必须连接相同的音</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/8jwcf32p.png" alt=""></p><h2 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h2><ul><li>歌谱中,某一个字对应几个音的时候,需要用连线将这几个音连接起来</li><li>框起来的部分,要唱(奏)得连贯</li><li>绝大多数情况下连线连的是不同的音</li></ul><h2 id="休止符"><a href="#休止符" class="headerlink" title="休止符"></a>休止符</h2><ul><li>见下图</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5w8l0x7x.png" alt=""></p><ul><li><p>其他长度的休止符和音符一样加附点或用延音线即可</p></li><li><p>简谱中常常将下方有横线的音符与休止符的横线连接起来</p></li><li>小节线、音符、休止符之间无任何其他停顿</li></ul><h2 id="常见的拍号，强弱关系"><a href="#常见的拍号，强弱关系" class="headerlink" title="常见的拍号，强弱关系"></a>常见的拍号，强弱关系</h2><ul><li>无论什么拍号,每小节第一拍都是”强拍”,并且每小节只有这一个”强拍”</li><li>不同的拍号预示着不同的强弱关系</li><li>“强拍” “弱拍”并不是说强拍的音量一定响,弱拍的音量一定弱</li><li>额外拓展(看看就行)<ul><li>旋律中的长音符,稳定音,通常处于强拍短音符,不稳定音通常处于弱拍</li><li>和声通常要在强拍进行变化,弱拍进行保持</li><li>不同的强弱关系还影响旋律的动机,织体的写法,配器的选择,速度的选择等等</li></ul></li></ul><h2 id="单拍子、复拍子"><a href="#单拍子、复拍子" class="headerlink" title="单拍子、复拍子"></a>单拍子、复拍子</h2><ul><li>单拍子: 每小节只有一个强拍,并且也<strong>存在</strong>弱拍(如2/4拍,3/8拍)</li><li>复拍子:由相同的单拍子组合起来的(如4/4拍,6/8拍)</li><li>如果某个拍号是由多个拍号组合而成的,那么每小节的第二个强拍开始,都要变成次强拍</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5o1xh4y0.png" alt=""></p><h2 id="混合拍子"><a href="#混合拍子" class="headerlink" title="混合拍子"></a>混合拍子</h2><ul><li><p>混合拍子:<strong>不同</strong>的单拍子组成的拍子</p></li><li><p>一种混合拍子的组合顺序有多种可能,如(5/4拍有2/4+3/4和3/4+2/4两种可能)</p></li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/1zv6qnsp.png" alt=""></p><ul><li>复合拍子第一拍后的强拍子均为次强拍,没有”次次强拍”的说法</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/wck43ia2.png" alt=""></p><h2 id="一拍子、散拍子"><a href="#一拍子、散拍子" class="headerlink" title="一拍子、散拍子"></a>一拍子、散拍子</h2><ul><li>一拍子: 每小节只有一拍且这一拍是强拍(一般只有在戏曲中能见到)</li><li>X拍子: 指每小节有X拍的拍子</li><li>散拍子: 符号类似一个”艹”。无固定小节线,拍数,强弱关系,一般用于戏曲音乐中,由演奏者自由发挥</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/si47nfvi.png" alt=""></p><h2 id="变换拍子、交错拍子"><a href="#变换拍子、交错拍子" class="headerlink" title="变换拍子、交错拍子"></a>变换拍子、交错拍子</h2><ul><li>变换拍子: 一首音乐演奏时拍子发生了变换</li><li>写法见下图。大多数情况下左上角只写开始的拍子</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/osnwiowp.png" alt=""></p><ul><li>交错拍子: 一首音乐由多个乐器演奏时,各乐器的拍子不同(很少用到)</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/jp1iw9pq.png" alt=""></p><h2 id="小节序号"><a href="#小节序号" class="headerlink" title="小节序号"></a>小节序号</h2><ul><li>标在某些小节开始处的数字</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/4hp49n93.png" alt=""></p><ul><li>小节序号最主要的作用是方便查找</li><li>很多乐谱没有小节序号,要自己标记</li><li>小节序号通常标在换行之后的第一个小节</li><li>有一些会以五或十小节为单位标记小节序号</li><li>小节序号标在小节线的正上方或者稍微偏右</li><li>第一小节不用标</li></ul><h2 id="弱起小节、弱起"><a href="#弱起小节、弱起" class="headerlink" title="弱起小节、弱起"></a>弱起小节、弱起</h2><ul><li>弱起小节:音乐不是从强拍开始的,是从弱拍或者次强拍开始的。弱起小节是不完整的小节(拍数不够)</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/sizvigbm.png" alt=""></p><ul><li><p>补充</p><ul><li>拥有弱起小节的音乐有些时候在这段音乐的最后一个小节也是不完整的</li><li>弱起小节不算第一小节,第一小节一定要在由强拍且完整的节拍上</li><li>弱起小节必须是完整的。如下图中加上了前导0的完整小节不能被称之为弱起小节</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/202axy3w.png" alt=""></p><ul><li>弱起:指旋律从非强拍的位置开始</li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/jp5i61ox.png" alt=""></p></li></ul><h2 id="情绪与速度、具体的速度、BPM"><a href="#情绪与速度、具体的速度、BPM" class="headerlink" title="情绪与速度、具体的速度、BPM"></a>情绪与速度、具体的速度、BPM</h2><ul><li><p>具体速度的表达方式</p><ul><li><p>每分钟X拍</p></li><li><p>♩ = X  每分钟有X个四分音符</p></li><li>X BPM(beats per minute,和方法1含义相同)</li></ul></li></ul><h2 id="抽象的速度"><a href="#抽象的速度" class="headerlink" title="抽象的速度"></a>抽象的速度</h2><ul><li>抽象的速度<ul><li>意文largo等,中文广板等,慢中快速等 (看看就行)</li><li>与”速度”看似无直接关系的副词,如激烈的,欢快的,悲伤的等</li></ul></li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/71kdjxlt.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/zykyx8l9.png" alt=""></p><ul><li>如果同时出现BPM与抽象副词,以BPM为准</li></ul><h2 id="节拍器与使用"><a href="#节拍器与使用" class="headerlink" title="节拍器与使用"></a>节拍器与使用</h2><ul><li>基本上是个音乐软件都会有的功能,照着用就行</li></ul><h2 id="拍号、情绪与速度总结篇"><a href="#拍号、情绪与速度总结篇" class="headerlink" title="拍号、情绪与速度总结篇"></a>拍号、情绪与速度总结篇</h2><ul><li>略</li></ul><h2 id="打拍子（1）-V字打拍法"><a href="#打拍子（1）-V字打拍法" class="headerlink" title="打拍子（1）-V字打拍法"></a>打拍子（1）-V字打拍法</h2><ul><li>四分音符打一拍,一个V字(一上一下),其他整数类拍以此类推</li></ul><h2 id="打拍子（2）-休止符打法"><a href="#打拍子（2）-休止符打法" class="headerlink" title="打拍子（2）-休止符打法"></a>打拍子（2）-休止符打法</h2><ul><li>嘴停手不停</li><li>最开始练习时,休止符可以先念作”空”</li></ul><h2 id="打拍子（3）-二八"><a href="#打拍子（3）-二八" class="headerlink" title="打拍子（3）-二八"></a>打拍子（3）-二八</h2><ul><li>二八: 两个八分音符</li><li>唱法:下去的时候唱第一个音,上来的时候唱第二个音</li></ul><h2 id="打拍子（4）-四十六"><a href="#打拍子（4）-四十六" class="headerlink" title="打拍子（4）-四十六"></a>打拍子（4）-四十六</h2><ul><li>四十六: 四个十六分音符</li><li>唱法:上下都发两次音</li></ul><h2 id="打拍子（5）-前八后十六、前十六后八"><a href="#打拍子（5）-前八后十六、前十六后八" class="headerlink" title="打拍子（5）-前八后十六、前十六后八"></a>打拍子（5）-前八后十六、前十六后八</h2><ul><li>一个八分音符+两个十六分音符</li><li>原理一样 多练</li></ul><h2 id="打拍子（6）-前附点、后附点"><a href="#打拍子（6）-前附点、后附点" class="headerlink" title="打拍子（6）-前附点、后附点"></a>打拍子（6）-前附点、后附点</h2><h2 id="打拍子（7）-小切分"><a href="#打拍子（7）-小切分" class="headerlink" title="打拍子（7）-小切分"></a>打拍子（7）-小切分</h2><h2 id="打拍子（8）-一拍内的变体"><a href="#打拍子（8）-一拍内的变体" class="headerlink" title="打拍子（8）-一拍内的变体"></a>打拍子（8）-一拍内的变体</h2><h2 id="打拍子（9）-大附点与变体"><a href="#打拍子（9）-大附点与变体" class="headerlink" title="打拍子（9）-大附点与变体"></a>打拍子（9）-大附点与变体</h2><h2 id="打拍子（10）-大切分与变体"><a href="#打拍子（10）-大切分与变体" class="headerlink" title="打拍子（10）-大切分与变体"></a>打拍子（10）-大切分与变体</h2>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 基础乐理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘画记录</title>
      <link href="/2022/07/31/%E7%BB%98%E7%94%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/07/31/%E7%BB%98%E7%94%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="978416782fd83a5f3f1c401dd2a554f247c3a30b3728c9ec8db81b0b6ea771f7">4630436162ade97ba2718b7d0c4b3b632387b86b41c24be2b4e2e5674a0e5e2907e141d3549a1b8f51f98364158dd3b57ac6c7b7ae025e51fe7231dd55d0cecc7ddc7ae0269377559163a2bb4b6d54b34378a697fe395ec9fdebe9eb22103104a03d4425cb599bc4f6ccef086f63b02762c3b407a0bbdd86bfd2bc3c0f422f3225cdbb14ec303b1dff41ae724a70ed725a58e8f5e8800b19e7e7cd4f0844c96c0ac54906d893a0e8122c45b3dd5d93132f6689158ab1f7f3fec69cf35ecb6b7a8cf05031ef50e0cc0b7681a60f7fa5d2013388dc0b87236dfde1230040c07251ba51c134f5d5abe719bceff13aab4bdec327cfbb1953780681131cc9b7aa7595cc25eaed46ba8354904fe2553cc78ce9308b1e2e957071851ef30a3021672bcee9d1de9e6729af748ac0b7cc9c69068ad975977064a72a497c0199bc7c849ace5ad254f9a57926790ece2f0d8ffe0996e0e6780ddc810e8675a24cfce396c79b6bbd325260599c559fc44292b9d6374739afd6afd0d7680277738b4a58def994e256bcbc72319b4c70c942e12bd3c177946dfffa7eb1f12be3747c55cdb5fb378c1f85b213fc54dcd04f497af1c13ce7e18c3c490c6f1cb287aad64b654e75d30345e903f914453a34ae32f5192a9225cb8fadaeffd477b095495db22d98c4348e13cdc2a2bd715dcbf709c504c7034dfd150caa223e1f427f61debe542fcf75ffc1c1e7945b8f2c98b4cd768e13236534a20f830abc2c3fd464a36b9b0b46b324961886ce103fada0535e1505bc38391be3d09e355b4fc73ddae648cdb17b42a55184793b36e0301c37ddba0db7fd62f2e63780e0c1213670f8f8f8b827d6f0c6e2369dfad730c6911c1e1bc0422f77c4cca31f900d2b7978e5db3abeb6475954945217dbb39697beaf756debfa92ab0c071204a717a15361ffae4bc051f30a6da40e80fd03e2022fba11187508b1b464ebfc98b026dd36594beb5b3d26346c3b9e8c5e4a1c9140ed736099c356fc21</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 绘画 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>v大预科作业第二周</title>
      <link href="/2022/07/08/v%E5%A4%A7%E9%A2%84%E7%A7%91%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%BA%8C%E5%91%A8/"/>
      <url>/2022/07/08/v%E5%A4%A7%E9%A2%84%E7%A7%91%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%BA%8C%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="DAY1"><a href="#DAY1" class="headerlink" title="DAY1"></a>DAY1</h2><p>感觉这个色彩组合临摹目前来说对我没啥用处…</p><p>考虑明天换个东西做做</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/xj1izccz.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/o7qjq059.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/bo4q7m2p.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/fopzqf9d.png" alt=""></p><h2 id="DAY2"><a href="#DAY2" class="headerlink" title="DAY2"></a>DAY2</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/xhxnsbod.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/mgpa5agy.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/20j7isx9.png" alt=""></p><h2 id="DAY3"><a href="#DAY3" class="headerlink" title="DAY3"></a>DAY3</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/rlmijh66.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 绘画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 预科作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v大预科作业第一周</title>
      <link href="/2022/07/02/v%E5%A4%A7%E9%A2%84%E7%A7%91%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
      <url>/2022/07/02/v%E5%A4%A7%E9%A2%84%E7%A7%91%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="DAY1"><a href="#DAY1" class="headerlink" title="DAY1"></a>DAY1</h2><p>这量就离谱</p><p>从早上九点一直画到晚上十点多才画完= =</p><p>终究还是我太菜了/kk</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/mtx9gumm.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/9tw63rc9.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/4dia4e3o.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/rlah1j27.png" alt=""></p><h2 id="DAY-2"><a href="#DAY-2" class="headerlink" title="DAY 2"></a>DAY 2</h2><p>把最恶心的十个单体练习搞定了</p><p>剩下的明天搞</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/c2rbm3ws.png" alt=""></p><h2 id="DAY-3"><a href="#DAY-3" class="headerlink" title="DAY 3"></a>DAY 3</h2><p>把昨天没做的补完了</p><p>感觉手感比第一天好多了</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ra4l48mb.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/xpon3tyt.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ecj3opjx.png" alt=""></p><h2 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h2><p>单体练习有一些细节还没画完 懒得补了(</p><p>衣玖的衣服是真nm难画…</p><p> <img src="https://cdn.luogu.com.cn/upload/image_hosting/lchyu9kk.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/milzyu7b.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/j707cogi.png" alt=""></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/2a8vxfdi.png" alt=""></p><h2 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h2><p><del>休息了一整天</del></p><p>随便画了点自己喜欢的东西</p>]]></content>
      
      
      <categories>
          
          <category> 绘画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 预科作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P6835 [Cnoi2020]线形生物</title>
      <link href="/2021/02/12/p6835/"/>
      <url>/2021/02/12/p6835/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p><strong><a href="https://www.luogu.com.cn/problem/solution/P6835">原题面</a></strong></p><p>有$n+1$个点,对于每个点$i(i≤n)$都有一条连向$i+1$的边,形成一条链,并在其中加入$m$条返祖边</p><p>现在从1号节点出发，每次等概率的前往到一个相邻的节点，求走到第$n+1$个点的期望步数</p><p>$n,m≤10^6$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>设$E_{x→y}$表示从$x$点走到$y$点的期望步数，$k_i$表示第$i$个点的返祖边条数</p><p>有转移：</p><center>$~~~~~E_{x→x+1} = \dfrac{1}{k_x+1}×1+\dfrac{1}{k_x+1}×\sum\limits_{(x,y)∈E}E_{y→x+1}+1$</center><center>$= 1+\dfrac{1}{k_x+1}×\sum\limits_{(x,y)∈E}E_{y→x+1}$</center><p>根据期望的线性性质,有$E<em>{x→y} =\sum\limits</em>{i=x}^{y-1}E_{i→i+1}$,代回原式：</p><center>$E_{x→x+1} = 1+\dfrac{1}{k_x+1}×\sum\limits_{(x,y)∈E}\sum\limits_{i=y}^{x-1}E_{i→i+1}+\dfrac{k_x×E_{x→x+1}}{k_x+1}$</center><center>$E_{x→x+1} = 1+k_x+\sum\limits_{(x,y)∈E}\sum\limits_{i=y}^{x-1}E_{i→i+1}$</center><p>维护一下前缀和即可,$\sum\limits<em>{i=x}^{y-1}E</em>{i→i+1}$既为所求答案</p><p>时间复杂度$O(n+m)$</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xcxc82 2021/2/9/20:50 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000010</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;<span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> to,from,next;</span><br><span class="line">&#125;e[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">2</span>],cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">e[++cnt].next = head[u];</span><br><span class="line">e[cnt].from = u;</span><br><span class="line">e[cnt].to = v;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> id,n,m,out[MAXN],sum[MAXN],f[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    id = <span class="built_in">read</span>(),n =<span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u = <span class="built_in">read</span>(),v =<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">add</span>(u,v);</span><br><span class="line">out[u]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">f[u] = <span class="number">1</span>+out[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line">f[u] = (f[u]+(sum[u<span class="number">-1</span>]-sum[v<span class="number">-1</span>]+mo)%mo)%mo;</span><br><span class="line">&#125;</span><br><span class="line">sum[u] = (sum[u<span class="number">-1</span>]+f[u])%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum[n]);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OI时期的最后一篇博客</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4046 [JSOI2010]快递服务</title>
      <link href="/2021/01/24/p4046/"/>
      <url>/2021/01/24/p4046/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://www.luogu.com.cn/problem/P4046">题目链接</a> <a href="https://www.luogu.com.cn/problem/SP703">双倍经验</a></strong></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有$m$个位置,从位置$p$移动到位置$q$需要花费$c(p,q)$的价钱,但并不保证$c(p,q)≠c(q,p)$</p><p>现在有三个员工,初始位置在$1,2,3$和有$n$个请求，任何时刻只有一名员工可以移动，且不允许同一位置上有 $2$ 个以上员工。第 $i$ 个请求发生在位置 $p_i$,公司必须按照顺序,派一名员工到位置 $p_i$去完成请求</p><p>求公司的最小花费。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>设$f(i,x,y,z)$表示解决完前$i$个请求时,三个员工分别在$x,y,z$处时的最小花费,转移:</p><p>$f(i+1,p<em>{i+1},y,z) = min{f(i,x,y,z)+c(x,p</em>{i+1})}\qquad (p_{i+1}≠y≠z)$</p><p>$f(i+1,x,p<em>{i+1},z) = min{f(i,x,y,z)+c(y,p</em>{i+1})}\qquad (x≠p_{i+1}≠z)$</p><p>$f(i+1,x,y,p<em>{i+1}) = min{f(i,x,y,z)+c(z,p</em>{i+1})}\qquad (x≠y≠p_{i+1})$</p><p>时空复杂度$O(nm^3)$,无论是在时间上还是空间上都接受不了</p><p>考虑优化:</p><p>可以发现,在完成第$i$个任务时,一定有一个人站在$p_i$的位置上,也就是说,这个人的信息是”多余”的,只需要记录另外两个人的位置</p><p>设$f(i,x,y)$表示解决前$i$个请求时,三个员工分别在$x,y,p_i$时的最小花费,转移:</p><p>$f(i+1,p<em>i,y) = min{f(i,x,y)+c(x,p</em>{i+1})}\qquad (p<em>i≠y≠p</em>{i+1})$</p><p>$f(i+1,x,y) = min{f(i,x,y)+c(p<em>i,p</em>{i+1})}\qquad (x≠y≠p_{i+1})$</p><p>$f(i+1,x,p<em>i) = min{f(i,x,y)+c(y,p</em>{i+1})}\qquad (x≠p<em>i≠p</em>{i+1})$</p><p>时间复杂度$O(nm^2)$,再用滚动数组优化一下空间即可</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">xcxc82</span><br><span class="line">*/</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define inf 1e9+10</span><br><span class="line">const int MAXN = 210;</span><br><span class="line">int T,L,n;</span><br><span class="line">inline int read()&#123;</span><br><span class="line">int X=0; bool flag=1; char ch=getchar();</span><br><span class="line">while(ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;) &#123;if(ch==&#x27;-&#x27;) flag=0; ch=getchar();&#125;</span><br><span class="line">while(ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;) &#123;X=(X&lt;&lt;1)+(X&lt;&lt;3)+ch-&#x27;0&#x27;; ch=getchar();&#125;</span><br><span class="line">if(flag) return X;return ~(X-1);</span><br><span class="line">&#125;</span><br><span class="line">int f[2][MAXN][MAXN];</span><br><span class="line">int val[MAXN][MAXN],a[MAXN*5];</span><br><span class="line">int main()&#123;</span><br><span class="line">memset(f,0x3f,sizeof(f));</span><br><span class="line">L = read();</span><br><span class="line">for(int i=1;i&lt;=L;i++)&#123;</span><br><span class="line">for(int j=1;j&lt;=L;j++)&#123;</span><br><span class="line">val[i][j] = read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    a[0] = 3;</span><br><span class="line">f[0][1][2] = 0;</span><br><span class="line">int now;</span><br><span class="line">while(cin&gt;&gt;now) a[++n] = now;</span><br><span class="line">for(int i=0;i&lt;=n-1;i++)&#123;</span><br><span class="line">memset(f[i+1&amp;1],0x3f,sizeof(f[i+1&amp;1]));</span><br><span class="line">for(int x=1;x&lt;=L;x++)&#123;</span><br><span class="line">for(int y=1;y&lt;=L;y++)&#123;</span><br><span class="line">if(x==y||x==a[i]||y==a[i]) continue;</span><br><span class="line">f[i+1&amp;1][a[i]][y] = min(f[i+1&amp;1][a[i]][y],f[i&amp;1][x][y]+val[x][a[i+1]]);</span><br><span class="line">f[i+1&amp;1][x][y] = min(f[i+1&amp;1][x][y],f[i&amp;1][x][y]+val[a[i]][a[i+1]]);</span><br><span class="line">f[i+1&amp;1][x][a[i]] = min(f[i+1&amp;1][x][a[i]],f[i&amp;1][x][y]+val[y][a[i+1]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int ans = 0x3f3f3f3f;</span><br><span class="line"></span><br><span class="line">for(int i=1;i&lt;=L;i++) </span><br><span class="line"> for(int j=1;j&lt;=L;j++) </span><br><span class="line">  ans = min(ans,f[n&amp;1][i][j]);</span><br><span class="line">  </span><br><span class="line">printf(&quot;%d&quot;,ans);</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5774 [JSOI2016]病毒感染</title>
      <link href="/2021/01/19/p5774/"/>
      <url>/2021/01/19/p5774/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://www.luogu.com.cn/problem/P5774">题目链接</a></strong></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有$N$个小镇爆发了疫情,其中第$i$个小镇每天会死$a_i$个人,现在从第一个小镇出发,每一天可以选择:</p><ul><li><p>走向一个相邻的村庄,若往左走,则必须把之前所有未治愈村庄全部治愈</p></li><li><p>治疗目前所在的村庄,这一天内该村庄内不会有任何人死去</p></li></ul><p>求最少死亡人数</p><p>$n≤3000,a_i≤10^9$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>可以发现,每个村庄只可能在第一次被经过或第二次被经过时治愈被治愈,换句话说,<strong>在区间$[l,r]$进行一次往返走$(l \Rightarrow r \Rightarrow l \Rightarrow r)$可以治愈该区间内的所有村庄</strong>,并且总过程就是由一连串的”往返走”组成的</p><p>不妨先设$f(i)$表示治疗前$i$个村庄的最少死亡人数,$v(i,j)$表示在区间$[l,r]$进行一次往返走后该区间的最少死亡人数,转移也比较好推,就是细节比较多:</p><center>$f(i) = min \{f(j)+(4×(i-j)+2)×\sum\limits_{x=i+1}^n+v(i+1,j)\}(0≤j＜i)$</center><p>显然这个$v(i,j)$也是可以用$DP$预处理出来的,分类讨论治愈的时间,有转移:</p><center> $v(i,j) = v(i+1,j)+ \begin{cases}2×\sum\limits_{x=i+1}^ja_x\\3×(j-i)×a_i+\sum\limits_{x=i+1}^ja_x\end{cases}$ </center><p>时间复杂度$O(n^2)$</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//xcxc82 2021/1/19/22:03</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define int long long</span><br><span class="line">const int MAXN = 3010;</span><br><span class="line">inline int read()&#123;</span><br><span class="line">int X=0; bool flag=1; char ch=getchar();</span><br><span class="line">while(ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;) &#123;if(ch==&#x27;-&#x27;) flag=0; ch=getchar();&#125;</span><br><span class="line">while(ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;) &#123;X=(X&lt;&lt;1)+(X&lt;&lt;3)+ch-&#x27;0&#x27;; ch=getchar();&#125;</span><br><span class="line">if(flag) return X;return ~(X-1);</span><br><span class="line">&#125;</span><br><span class="line">int n,a[MAXN];</span><br><span class="line">int v[MAXN][MAXN],sum[MAXN]; </span><br><span class="line">int f[MAXN];</span><br><span class="line">signed main()&#123;</span><br><span class="line">   n =read();</span><br><span class="line">   for(int i=1;i&lt;=n;i++) a[i] = read(),sum[i] = sum[i-1]+a[i];</span><br><span class="line">   memset(f,0x3f,sizeof(f));</span><br><span class="line">   memset(v,0x3f,sizeof(v));</span><br><span class="line">   f[0]=0;</span><br><span class="line">   for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">v[i][i] = 0;</span><br><span class="line">&#125;</span><br><span class="line">for(int len=1;len&lt;=n-1;len++)&#123;</span><br><span class="line"> for(int i=1;i+len&lt;=n;i++)&#123;</span><br><span class="line">int j=i+len;</span><br><span class="line">v[i][j] = v[i+1][j]+min(2*(sum[j]-sum[i]),a[i]*3*len+sum[j]-sum[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">for(int j=0;j&lt;i;j++)&#123;</span><br><span class="line">f[i] = min(f[j]+v[j+1][i]+(4*(i-j)-2)*(sum[n]-sum[i]),f[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%lld&quot;,f[n]);</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2577 [ZJOI2004]午餐</title>
      <link href="/2021/01/16/p2577/"/>
      <url>/2021/01/16/p2577/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://www.luogu.com.cn/problem/P2577">题目链接</a></strong></p><p>重构于$2020/1/16$</p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有$n$个人去排队吃饭,每个人都有一个吃饭时间$a_i$和打饭时间$b_i$,一共有两个打饭窗口,要求安排一种分队和排队方案使得所有人都吃完饭的时间尽量早,输出最佳方案下所有人吃完饭的时刻</p><p>$n,a_i,b_i≤200$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>猜个结论,<strong>吃饭吃的越慢的人排在越前面</strong>,用邻项交换法易证。这样每个人的吃饭顺序就是固定的了</p><p>先来考虑只有一个窗口的情况,不难发现总时间是由<strong>最后一个吃完饭的人的吃饭时间</strong>和<strong>他前面的总排队时间</strong>组成的,设$sum_i$表示前$i$个人打饭的时间,那么全部都吃完饭的时间为$max{sum_i+b_i}$</p><p>再回来看两个窗口时的情况,受只有一个窗口的情况的启发,一个比较好想到的状态是设$f(i,j,k)$表示在前$i$个人中,在$1$窗口排队的总时间为$j$,在$2$窗口排队的总时间为$k$的最早吃完时间,转移显然:</p><p>$f(i,j,k) = min\begin{cases}max{f(i-1,j-a_i,k),j+b_i}&amp;j≥a_i\max{f(i-1,j,k-a_i),k+b_i}&amp;k≥a_i\end{cases}(j+k = sum_i)$</p><p>时间复杂度$O(n×max{t}^2)$,得分$50pts$</p><p>发现<strong>在窗口$2$排队的时间为在窗口$1$排队的时间的补集</strong>,可以直接用总时间减去在窗口$1$排队的时间得出,因此$k$维度可以去掉</p><p>设$f(i,j)$表示在前$i$个人中,在$1$窗口排队的总时间为$j$时的最早吃完时间,转移:</p><p>$f(i,j) = min\begin{cases}max{f(i-1,j-a_i),j+b_i}&amp;j≥a_i\max{f(i-1,j),sum_i-j+b_i}\end{cases}$</p><p>时间复杂度$O(n×max{t})$</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN*MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">person</span>&#123;</span><br><span class="line"><span class="type">int</span> wait,eat;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(person k) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> eat&gt;k.eat;</span><br><span class="line">&#125;</span><br><span class="line">&#125;d[MAXN];</span><br><span class="line"><span class="type">int</span> sum[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;d[i].wait&gt;&gt;d[i].eat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(d+<span class="number">1</span>,d+<span class="number">1</span>+n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum[i] = sum[i<span class="number">-1</span>] + d[i].wait;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=sum[i];j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=d[i].wait) f[i][j] = <span class="built_in">min</span>(f[i][j],<span class="built_in">max</span>(f[i<span class="number">-1</span>][j-d[i].wait],j+d[i].eat));</span><br><span class="line">f[i][j] = <span class="built_in">min</span>(f[i][j],<span class="built_in">max</span>(f[i<span class="number">-1</span>][j],sum[i]-j+d[i].eat));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1145141919</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=sum[n];i++)&#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans , f[n][i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing277. 饼干</title>
      <link href="/2021/01/15/acwing277/"/>
      <url>/2021/01/15/acwing277/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://www.acwing.com/problem/content/279/">题目链接</a></strong></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有$m$块饼干,$n$个人,每个人都有一个贪婪度,第$i$个人的贪婪度为$g_i$,如果有$a_i$个人拿到的饼干数比第$i$个人多,那么他就会产生$g_i×a_i$的怨气,求一种排列方式,使得每个人至少分到一块饼干且怨气和最小</p><p>$n≤30,n≤m≤5000$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>发现这个贡献计算是有后效性的,不太好搞</p><p>先来尝试猜个结论:<strong>越贪的人吃越多的饼干</strong>,用邻项交换易证。这样每个人分到的饼干数就是单调不上升的了</p><p>也就是说,<strong>要计算第$i$个人的贡献,我们只需要知道第$i$个人前面有几个人和他分到的饼干数相等</strong>，一个比较NAIVE的想法是设$f(i,j,k)$表示在前$i$个人中,一共分了$j$块饼干,第$i$个人分到$k$块时的最小怨气值和</p><p>转移也比较显然,枚举前面有几个人和他分到的饼干数相等:</p><p>$f(i,j,k) = min\begin{cases}min(f(i-1,j-k,p)+g<em>i×(i-1))&amp;{j-k≥p×(i-1),p&gt;k})\min(f(i-p,j-p×k,k)+\sum</em>{b=i-p+1}^ig_b×(i-p-1))&amp;{j-p×k≥(i-p-1)×k}\end{cases}$</p><p>时间复杂度$O(nm^3)$</p><p><del>数据似乎比较水(,可以拿个80pts左右的样子</del></p><p>现在来考虑优化</p><p>可以发现,我们<strong>只关心每个人分到的饼干数之间的相对大小</strong>,而不关心其具体数值,因此我们可以尝试去把前面那个状态的$k$维度去掉</p><p>设$f(i,j)$表示在前$i$个人中共分了$j$块饼干的最小怨气值和</p><p>如果第$i$个人分到的饼干数不为$1$,<strong>前$i$个人共分到$j$块饼干等价于每人少分一块饼干,既$f(i,j-i)$</strong>,因为每个人拿到的饼干数之间的相对大小没有变,总贡献也不会变</p><p>如果第$i$个人分到的饼干数为$1$,那么就可以枚举他前面有多少个人分到的饼干数也为$1$</p><p>转移方程$:$</p><center>$f(i,j) = min\begin{cases}f(i,j-i)&{j≥i}\\min(f(k,j-(i-k))+\sum_{x=k+1}^ig_i×k)&{j≥i-k}\end{cases}$</center><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xcxc82</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">80pts</span></span><br><span class="line"><span class="comment">memset(f,0x3f,sizeof(f));</span></span><br><span class="line"><span class="comment">memset(f[1],0,sizeof(f[1]));</span></span><br><span class="line"><span class="comment">  for(int i=2;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">    for(int j=1;j&lt;=m;j++)&#123;</span></span><br><span class="line"><span class="comment">      for(int k=1;k&lt;j;k++)&#123;</span></span><br><span class="line"><span class="comment">    for(int p=k+1;p&lt;=j;p++)&#123;</span></span><br><span class="line"><span class="comment">    if(j-k&lt;p*(i-1)||j&lt;k) continue;</span></span><br><span class="line"><span class="comment">    f[i][j][k] = min(f[i][j][k],f[i-1][j-k][p]+g[i]*(i-1));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for(int p=1;p&lt;=i-1;p++)&#123;//注意要特判p=i-1,j-p×k!=k的情况</span></span><br><span class="line"><span class="comment">if(j-p*k&lt;(i-p-1)*k||j&lt;p*k||(p==i-1&amp;&amp;j-p*k!=k)) continue;</span></span><br><span class="line"><span class="comment"> f[i][j][k] = min(f[i][j][k],f[i-p][j-p*k][k]+(i-p-1)*(sum[i]-sum[i-p]));</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> sum[MAXN],n,m,f[MAXN/<span class="number">100</span>][MAXN];</span><br><span class="line"><span class="type">int</span> l1[MAXN/<span class="number">100</span>][MAXN],l2[MAXN/<span class="number">100</span>][MAXN],ans[MAXN/<span class="number">100</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cookie</span>&#123;</span><br><span class="line"><span class="type">int</span> g,ind;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(cookie x,cookie y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.g&gt;y.g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SUM</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[j] - sum[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;<span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">print</span>(l1[i][j],l2[i][j]);</span><br><span class="line"><span class="keyword">if</span>(i==l1[i][j])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">1</span>;x&lt;=i;x++) ans[a[x].ind]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> x=l1[i][j]+<span class="number">1</span>;x&lt;=i;x++) ans[a[x].ind] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i].g = <span class="built_in">read</span>(),a[i].ind = i;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i] = sum[i<span class="number">-1</span>]+a[i].g;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=m;j++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[k][j-(i-k)]+k*<span class="built_in">SUM</span>(k+<span class="number">1</span>,i)&lt;f[i][j])&#123;</span><br><span class="line">    f[i][j] = f[k][j-(i-k)]+k*<span class="built_in">SUM</span>(k+<span class="number">1</span>,i);</span><br><span class="line">    l1[i][j] = k,l2[i][j] = j-(i-k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[i][j-i]&lt;f[i][j])&#123;</span><br><span class="line">f[i][j] = f[i][j-i];</span><br><span class="line">l1[i][j] = i,l2[i][j] = j-i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[n][m]);</span><br><span class="line"><span class="built_in">print</span>(n,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2020 字符串匹配</title>
      <link href="/2021/01/08/noip2020-2/"/>
      <url>/2021/01/08/noip2020-2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P7114">题目链接</a></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个字符串$S$,求$S=(AB)^iC$的方案数,其中$F(A)≤F(C)$,$F(S)$表示字符串 $S$ 中出现奇数次的字符的数量</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>设$cnt_i$表示奇数字符数小于等于$i$的$A$的个数</p><p>枚举$AB$的长度,然后用$KMP$的$next$数组去枚举循环次数$i$,将小于等于$C$中奇数字符的数量的$A$的方案数,也就是$cnt_{j}$($j$为$C$中出现奇数次字符从数量)加到答案中,并更新一下$cnt$</p><p>最坏时间复杂度$O(n×(logn+26))$,不开$O2$ $92$~$96$pts,开$O2$稳过</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">xcxc82</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = (<span class="number">1</span>&lt;&lt;<span class="number">20</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;<span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> pre[MAXN],suf[MAXN],next[MAXN],pre_value[<span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> buc[<span class="number">30</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> T,n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="built_in">sizeof</span>(pre));</span><br><span class="line"><span class="built_in">memset</span>(suf,<span class="number">0</span>,<span class="built_in">sizeof</span>(suf));</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="built_in">sizeof</span>(next));</span><br><span class="line"><span class="built_in">memset</span>(buc,<span class="number">0</span>,<span class="built_in">sizeof</span>(buc));</span><br><span class="line"><span class="built_in">memset</span>(pre_value,<span class="number">0</span>,<span class="built_in">sizeof</span>(pre_value));</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kmp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j+<span class="number">1</span>]) j = next[j];</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j+<span class="number">1</span>]) j++;</span><br><span class="line">next[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">s = <span class="string">&#x27; &#x27;</span>+s;</span><br><span class="line">n = s.<span class="built_in">length</span>()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>]) vis[s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>] = <span class="number">1</span>,cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">kmp</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> now = s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">buc[now]++;</span><br><span class="line"><span class="keyword">if</span>(buc[now]&amp;<span class="number">1</span>) pre[i] = pre[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> pre[i] = pre[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(buc,<span class="number">0</span>,<span class="built_in">sizeof</span>(buc));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="type">int</span> now = s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">buc[now]++;</span><br><span class="line"><span class="keyword">if</span>(buc[now]&amp;<span class="number">1</span>) suf[i] = suf[i+<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> suf[i] = suf[i+<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n;j+=i)&#123;</span><br><span class="line"><span class="keyword">if</span>((i%(j-next[j])==<span class="number">0</span>&amp;&amp;j/(j-next[j])&gt;<span class="number">1</span>)||(j==i))</span><br><span class="line">ans+=(<span class="type">long</span> <span class="type">long</span>)(pre_value[suf[j+<span class="number">1</span>]]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=pre[i];j&lt;=cnt;j++)&#123;</span><br><span class="line">pre_value[j]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO05DEC Cleaning Shifts S</title>
      <link href="/2021/01/01/usaco05dec/"/>
      <url>/2021/01/01/usaco05dec/</url>
      
        <content type="html"><![CDATA[<h2 id="P4644-USACO05DEC-Cleaning-Shifts-S"><a href="#P4644-USACO05DEC-Cleaning-Shifts-S" class="headerlink" title="P4644 [USACO05DEC]Cleaning Shifts S"></a>P4644 [USACO05DEC]Cleaning Shifts S</h2><h3 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h3><p>有$n$条贴纸,第$i$条贴纸可以将第$a_i$到$b_i$段覆盖,售价为$c_i$,现在要用若干条贴纸覆盖纸带上第$L$~$R$个格子,求至少要花费多少钱</p><p>$1≤n≤25000,1≤L≤R≤10^6$</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>设$f(i)$表示覆盖$L~i$区间所需要的最少花费,将贴纸按右端点升序排序,有显然的转移:<center>$f(b(i)) = min(f(j))+c(i))~~~~~~~~~{a(i)-1≤j≤b(i)}$</center></p><p>再用线段树来维护一下$min(f(j))$即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//xcxc82 2021/7/30</span></span><br><span class="line"><span class="comment">//f[b[i]] = min(f[j])+c(a[i]-1&lt;=j&lt;b[i])</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson (node&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson (node&lt;&lt;1|1)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;<span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> min;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].min = <span class="built_in">min</span>(tree[lson].min,tree[rson].min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].min = f[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line"><span class="keyword">return</span> tree[node].min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = inf;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) ans = <span class="built_in">min</span>(ans,<span class="built_in">query</span>(lson,l,mid,x,y));</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) ans = <span class="built_in">min</span>(ans,<span class="built_in">query</span>(rson,mid+<span class="number">1</span>,r,x,y));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].min = v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(lson,l,mid,x,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(rson,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l,r,n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">v</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,v;</span><br><span class="line">&#125;val[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">S</span><span class="params">(<span class="type">const</span> v &amp;x, <span class="type">const</span> v &amp;y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">n = <span class="built_in">read</span>(),l = <span class="built_in">read</span>(),r = <span class="built_in">read</span>();</span><br><span class="line">l++,r++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">val[i].l = <span class="built_in">read</span>(),val[i].r = <span class="built_in">read</span>(),val[i].v = <span class="built_in">read</span>();</span><br><span class="line">val[i].l++,val[i].r++;</span><br><span class="line"><span class="keyword">if</span>(val[i].l&lt;l) val[i].l = l;</span><br><span class="line"><span class="keyword">if</span>(val[i].r&gt;r) val[i].r = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(val+<span class="number">1</span>,val+<span class="number">1</span>+n,S);</span><br><span class="line">f[l<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ans = inf;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,l<span class="number">-1</span>,r);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(val[i].l&gt;val[i].r) <span class="keyword">continue</span>;</span><br><span class="line">f[val[i].r] = <span class="built_in">min</span>(f[val[i].r],<span class="built_in">query</span>(<span class="number">1</span>,l<span class="number">-1</span>,r,val[i].l<span class="number">-1</span>,val[i].r)+val[i].v);</span><br><span class="line"><span class="keyword">if</span>(val[i].r&gt;=r)&#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans,f[val[i].r]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>,l<span class="number">-1</span>,r,val[i].r,f[val[i].r]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==inf) cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;ans;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P7076 [CSP-S2020] 动物园</title>
      <link href="/2020/12/27/p7076/"/>
      <url>/2020/12/27/p7076/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://www.luogu.com.cn/problem/P7076">题目链接</a></h3><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>显然,只有在动物不需要购买一种饲料且该种饲料有要求时才不合法</p><p>注意要特判$n = 0,x = 64$的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">xcxc82</span><br><span class="line">*/</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define lson node&lt;&lt;1</span><br><span class="line">#define rson node&lt;&lt;1|1</span><br><span class="line">#define int unsigned long long</span><br><span class="line">const int MAXN = 10010;</span><br><span class="line">int k,c,n,m;</span><br><span class="line">inline int read()&#123;</span><br><span class="line">int X=0; bool flag=1; char ch=getchar();</span><br><span class="line">while(ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;) &#123;if(ch==&#x27;-&#x27;) flag=0; ch=getchar();&#125;</span><br><span class="line">while(ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;) &#123;X=(X&lt;&lt;1)+(X&lt;&lt;3)+ch-&#x27;0&#x27;; ch=getchar();&#125;</span><br><span class="line">if(flag) return X;return ~(X-1);</span><br><span class="line">&#125;</span><br><span class="line">int status,buy;</span><br><span class="line">signed main()&#123;</span><br><span class="line">n = read(),m = read(),c = read(),k = read();</span><br><span class="line"></span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">int am = read();</span><br><span class="line">status|=am;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;=m;i++)&#123;</span><br><span class="line">int p =  read(),q = read();</span><br><span class="line">buy|=(1ull&lt;&lt;p);</span><br><span class="line">&#125;</span><br><span class="line">int x = 0;</span><br><span class="line">for(int i=0;i&lt;=k-1;i++)&#123;</span><br><span class="line">int s = (status&gt;&gt;i)&amp;1,b = (buy&gt;&gt;i)&amp;1;</span><br><span class="line">if((!s&amp;&amp;!b)||(s|b&amp;&amp;s)) x++; </span><br><span class="line">&#125;</span><br><span class="line">if(x==64&amp;&amp;n==0)&#123;</span><br><span class="line">cout&lt;&lt;&quot;18446744073709551616&quot;;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(1ull&lt;&lt;x)-n;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP1557 GSS2 - Can you answer these queries II</title>
      <link href="/2020/12/11/sp1557/"/>
      <url>/2020/12/11/sp1557/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP1557">题目链接</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出长度为$n$的序列$a_i$，$q$ 次询问，求最大子段和，相同的数只算一次</p><p>$1 ≤ n,q≤ 100000$</p><p>$-100000≤a_i≤100000$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>没有修改操作,考虑离线处理</p><p>正序扫描序列加入每个元素,并在线段树中的每个叶子节点$i$维护区间$[i,j]$去掉重复元素后的区间和($j$为目前扫描到的位置)</p><h3 id="如何去重"><a href="#如何去重" class="headerlink" title="如何去重"></a>如何去重</h3><p>定义$pre[i]$表示$i$上一次出现的位置</p><p>如果一个元素$a_i$在$pre[a_i]$的位置出现过了,那就只在区间$[pre[a_i]+1,i]$中加入它(区间加),相当于自动完成了去重</p><h3 id="如何处理询问"><a href="#如何处理询问" class="headerlink" title="如何处理询问"></a>如何处理询问</h3><p>把每个询问离线下来,按右端点排序,对于每个询问$[l,r]$,在加入$a<em>r$后查询$max(a_i+a</em>{i+1}…+a_{j-1}+a_j)$  $l≤i≤j≤r$(区间查询),既区间$[l,r]$中的<strong>历史最大值</strong></p><h3 id="如何维护历史最大值"><a href="#如何维护历史最大值" class="headerlink" title="如何维护历史最大值"></a>如何维护历史最大值</h3><p>线段树中的下放操作有较大的”时间差”,直接和当前值取max肯定不行</p><p>于是我们在线段树中维护四个值：最大去重和, 历史最大去重和, 历史最大标记, 目前标记</p><p>下放一个节点时,用该节点的历史最大标记去更新子节点的历史最大去重和和历史最大标记即可</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson node&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson node&lt;&lt;1|1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;</span><br><span class="line"><span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,a[MAXN],pre[<span class="number">20</span>*MAXN],ans[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line">&#125;q[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(query a,query b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> max,hismax;</span><br><span class="line"><span class="type">int</span> tag,histag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].max = <span class="built_in">max</span>(tree[lson].max,tree[rson].max);</span><br><span class="line">tree[node].hismax = <span class="built_in">max</span>(tree[lson].hismax,tree[rson].hismax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">tree[node].hismax = <span class="built_in">max</span>(tree[node].hismax,tree[fa].histag+tree[node].max);<span class="comment">//更新历史最大值和历史最大tag</span></span><br><span class="line">tree[node].histag = <span class="built_in">max</span>(tree[node].histag,tree[fa].histag+tree[node].tag);</span><br><span class="line">tree[node].max+=tree[fa].tag;</span><br><span class="line">tree[node].tag+=tree[fa].tag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PUSHDOWN</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tree[node].tag) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(lson,node);</span><br><span class="line"><span class="built_in">pushdown</span>(rson,node);</span><br><span class="line">tree[node].histag = tree[node].tag = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">tree[node].max+=val,tree[node].tag+=val;</span><br><span class="line">tree[node].hismax = <span class="built_in">max</span>(tree[node].hismax,tree[node].max);</span><br><span class="line">tree[node].histag = <span class="built_in">max</span>(tree[node].histag,tree[node].tag);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">PUSHDOWN</span>(node);</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(lson,l,mid,x,y,val);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) <span class="built_in">modify</span>(rson,mid+<span class="number">1</span>,r,x,y,val);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line"><span class="keyword">return</span> tree[node].hismax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">PUSHDOWN</span>(node);</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(y&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(lson,l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(x&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(rson,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">query</span>(lson,l,mid,x,y),<span class="built_in">query</span>(rson,mid+<span class="number">1</span>,r,x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line">m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    q[i].l = <span class="built_in">read</span>(),q[i].r = <span class="built_in">read</span>();</span><br><span class="line">    q[i].id = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(q+<span class="number">1</span>,q+<span class="number">1</span>+m,cmp);</span><br><span class="line"><span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,pre[a[i]+<span class="number">100000</span>]+<span class="number">1</span>,i,a[i]);</span><br><span class="line">pre[a[i]+<span class="number">100000</span>] = i;</span><br><span class="line"><span class="keyword">while</span>(i==q[j].r&amp;&amp;j&lt;=m) ans[q[j].id] = <span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,q[j].l,q[j].r),j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4556 [Vani有约会]雨天的尾巴 /【模板】线段树合并</title>
      <link href="/2020/11/22/p4556/"/>
      <url>/2020/11/22/p4556/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一颗$n$个节点的树,现在有$m$次操作,每次选择两个节点$u$,$v$,对$u$到$v$的路径上的每个节点都发放一袋$z$类型的物品</p><p>求所有操作完成后,每个点存放最多的是哪种物品</p><p>$n,m≤10^5,z≤10^9$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>线段树合并模板题</p><p>差分+离散化一下</p><p>每次操作时将$u$和$v$的权值线段树中的$z$位置$+1$,$lca(u,v)$和$fa_{lca(u,v)}$中的$z$位置$-1$,所有操作完成后再$dfs$一遍合并子树</p><p>复杂度$(n+m)log(n+m)$</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAXN = 100010;</span><br><span class="line">int n,m;</span><br><span class="line">int f[MAXN][21],dep[MAXN];</span><br><span class="line"></span><br><span class="line">inline int read()&#123;</span><br><span class="line">int X=0; bool flag=1; char ch=getchar();</span><br><span class="line">while(ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;) &#123;if(ch==&#x27;-&#x27;) flag=0; ch=getchar();&#125;</span><br><span class="line">while(ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;) &#123;X=(X&lt;&lt;1)+(X&lt;&lt;3)+ch-&#x27;0&#x27;; ch=getchar();&#125;</span><br><span class="line">if(flag) return X;</span><br><span class="line">return ~(X-1);</span><br><span class="line">&#125;</span><br><span class="line">struct st&#123;</span><br><span class="line">int lson,rson,val,pos;</span><br><span class="line">&#125;tree[MAXN*100];</span><br><span class="line">int tot,root[MAXN];</span><br><span class="line">struct e&#123;</span><br><span class="line">int v,next;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;1];</span><br><span class="line">int head[MAXN&lt;&lt;1],cnt;</span><br><span class="line">void add(int u,int v)&#123;</span><br><span class="line">edge[++cnt].v = v;</span><br><span class="line">edge[cnt].next = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line">struct Lca&#123;</span><br><span class="line">void dfs(int u,int fa)&#123;</span><br><span class="line">dep[u] = dep[fa]+1;</span><br><span class="line">f[u][0] = fa;</span><br><span class="line">for(int i=1;(1&lt;&lt;i)&lt;=dep[u];i++)&#123;</span><br><span class="line">f[u][i] = f[f[u][i-1]][i-1];</span><br><span class="line">&#125;</span><br><span class="line">for(int i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line">int v = edge[i].v;</span><br><span class="line">if(v==fa) continue;</span><br><span class="line">dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    int lca(int u,int v)&#123;</span><br><span class="line">if(dep[u]&gt;dep[v]) swap(u,v);</span><br><span class="line">for(int i=20;i&gt;=0;i--)&#123;</span><br><span class="line">if(dep[u]&lt;=dep[v]-(1&lt;&lt;i)) v = f[v][i];</span><br><span class="line">&#125;</span><br><span class="line">if(u==v) return u;</span><br><span class="line">for(int i=20;i&gt;=0;i--)&#123;</span><br><span class="line">if(f[u][i]!=f[v][i])&#123;</span><br><span class="line">u = f[u][i];</span><br><span class="line">v = f[v][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return f[u][0];</span><br><span class="line">&#125;</span><br><span class="line">&#125;LCA;</span><br><span class="line"></span><br><span class="line">void pushup(int node)&#123;</span><br><span class="line">tree[node].val = max(tree[tree[node].lson].val,tree[tree[node].rson].val);</span><br><span class="line">tree[node].pos = tree[tree[node].lson].val&gt;=tree[tree[node].rson].val?tree[tree[node].lson].pos:tree[tree[node].rson].pos;</span><br><span class="line">&#125; </span><br><span class="line">void insert(int &amp;node,int l,int r,int pos,int val)&#123;</span><br><span class="line">if(!node) node = ++tot;</span><br><span class="line">if(l==r)&#123;</span><br><span class="line">tree[node].val += val;</span><br><span class="line">tree[node].pos = l;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int mid = (l+r)&gt;&gt;1;</span><br><span class="line">if(pos&lt;=mid) insert(tree[node].lson,l,mid,pos,val);</span><br><span class="line">else if(pos&gt;mid)insert(tree[node].rson,mid+1,r,pos,val);</span><br><span class="line">pushup(node);</span><br><span class="line">&#125;</span><br><span class="line">int merge(int a,int b,int l,int r)&#123;</span><br><span class="line">if(!b) return a;</span><br><span class="line">if(!a) return b;</span><br><span class="line">if(l==r)&#123;</span><br><span class="line">tree[a].val+=tree[b].val;</span><br><span class="line">tree[a].pos = tree[a].val?l:0;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line">int mid = (l+r)&gt;&gt;1;</span><br><span class="line">tree[a].lson = merge(tree[a].lson,tree[b].lson,l,mid);</span><br><span class="line">tree[a].rson = merge(tree[a].rson,tree[b].rson,mid+1,r);</span><br><span class="line">pushup(a);</span><br><span class="line">return a; </span><br><span class="line">&#125;</span><br><span class="line">int len;</span><br><span class="line">int a[MAXN],b[MAXN],c[MAXN];</span><br><span class="line">int value[MAXN];</span><br><span class="line">int ans[MAXN];</span><br><span class="line">int getid(int x)&#123;</span><br><span class="line">return lower_bound(value+1,value+1+len,c[x]) - value;</span><br><span class="line">&#125;</span><br><span class="line">void dfs2(int u,int fa)&#123;</span><br><span class="line">for(int i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line">int v = edge[i].v;</span><br><span class="line">if(v==fa) continue;</span><br><span class="line">dfs2(v,u);</span><br><span class="line">merge(root[u],root[v],1,len);</span><br><span class="line">&#125;</span><br><span class="line">ans[u] = tree[root[u]].pos;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">n = read(),m = read();</span><br><span class="line">for(int i=1;i&lt;n;i++)&#123;</span><br><span class="line">int u = read(),v = read();</span><br><span class="line">add(u,v),add(v,u);</span><br><span class="line">&#125;</span><br><span class="line">LCA.dfs(1,0);</span><br><span class="line">for(int i=1;i&lt;=n;i++) root[i] = ++tot; </span><br><span class="line">for(int i=1;i&lt;=m;i++)&#123;</span><br><span class="line">a[i] =read(),b[i] = read(),c[i] = read();</span><br><span class="line">value[i] = c[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(value+1,value+1+m);</span><br><span class="line">len = unique(value+1,value+1+m)-(value+1);</span><br><span class="line">for(int i=1;i&lt;=m;i++)&#123;</span><br><span class="line">int x = a[i],y = b[i],z = getid(i);</span><br><span class="line">int fa = LCA.lca(x,y);</span><br><span class="line">int Fa = f[fa][0];</span><br><span class="line">insert(root[x],1,len,z,1);</span><br><span class="line">insert(root[y],1,len,z,1);</span><br><span class="line">insert(root[fa],1,len,z,-1);</span><br><span class="line">if(Fa) insert(root[Fa],1,len,z,-1);</span><br><span class="line">&#125;</span><br><span class="line">dfs2(1,0);</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">printf(&quot;%d\n&quot;,value[ans[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3224 [HNOI2012]永无乡</title>
      <link href="/2020/11/22/p3224/"/>
      <url>/2020/11/22/p3224/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一颗$n$个节点带点权图,现在有$m$次操作,操作分为两种:</p><ul><li><p>询问当前与$u$联通的第$k$大权值是哪个</p></li><li><p>连接两个节点$u,v$</p></li></ul><p>$n,m≤10^5$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>并查集+线段树合并</p><p>维护一个并查集,在合并两个节点$u$和$v$的时候把它们的线段树也合并起来</p><p>复杂度$(n+m)logn$</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAXN = 100010;</span><br><span class="line">int fa[MAXN];</span><br><span class="line">inline int read()&#123;</span><br><span class="line">int X=0; bool flag=1; char ch=getchar();</span><br><span class="line">while(ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;) &#123;if(ch==&#x27;-&#x27;) flag=0; ch=getchar();&#125;</span><br><span class="line">while(ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;) &#123;X=(X&lt;&lt;1)+(X&lt;&lt;3)+ch-&#x27;0&#x27;; ch=getchar();&#125;</span><br><span class="line">if(flag) return X;</span><br><span class="line">return ~(X-1);</span><br><span class="line">&#125;</span><br><span class="line">struct st&#123;</span><br><span class="line">int lson,rson,val,pos;</span><br><span class="line">&#125;tree[MAXN*100];</span><br><span class="line">int tot,root[MAXN];</span><br><span class="line">int val[MAXN];</span><br><span class="line">int n,m;</span><br><span class="line">void pushup(int node)&#123;</span><br><span class="line">tree[node].val = tree[tree[node].lson].val+tree[tree[node].rson].val;</span><br><span class="line">&#125;</span><br><span class="line">void insert(int &amp;node,int l,int r,int pos,int val,int ind)&#123;</span><br><span class="line">if(!node) node = ++tot;</span><br><span class="line">if(l==r)&#123;</span><br><span class="line">tree[node].val+=val;</span><br><span class="line">tree[node].pos = ind;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int mid = (l+r)&gt;&gt;1;</span><br><span class="line">if(pos&lt;=mid) insert(tree[node].lson,l,mid,pos,val,ind);</span><br><span class="line">else if(pos&gt;mid) insert(tree[node].rson,mid+1,r,pos,val,ind);</span><br><span class="line">pushup(node);</span><br><span class="line">&#125;</span><br><span class="line">int query(int node,int l,int r,int k)&#123;</span><br><span class="line">if(!node||tree[node].val&lt;k)&#123;</span><br><span class="line">  return -1;</span><br><span class="line">&#125; </span><br><span class="line">if(l==r)&#123;</span><br><span class="line">return tree[node].pos;</span><br><span class="line">&#125;</span><br><span class="line">int mid =(l+r)&gt;&gt;1;</span><br><span class="line">if(k&lt;=tree[tree[node].lson].val) return query(tree[node].lson,l,mid,k);</span><br><span class="line">else return query(tree[node].rson,mid+1,r,k-tree[tree[node].lson].val);</span><br><span class="line">&#125;</span><br><span class="line">int merge(int node1,int node2,int l,int r)&#123;</span><br><span class="line">if(!node1) return node2;</span><br><span class="line">if(!node2) return node1;</span><br><span class="line">if(l==r)&#123;</span><br><span class="line">if(tree[node2].pos)&#123;</span><br><span class="line">tree[node1].pos = tree[node2].pos;</span><br><span class="line">tree[node1].val += tree[node2].val;</span><br><span class="line">&#125;</span><br><span class="line">return node1;</span><br><span class="line">&#125;</span><br><span class="line">int mid =(l+r)&gt;&gt;1;</span><br><span class="line">tree[node1].lson = merge(tree[node1].lson,tree[node2].lson,l,mid);</span><br><span class="line">tree[node1].rson = merge(tree[node1].rson,tree[node2].rson,mid+1,r);</span><br><span class="line">pushup(node1);</span><br><span class="line">return node1;</span><br><span class="line">&#125;</span><br><span class="line">int find(int x)&#123;</span><br><span class="line">if(fa[x]==x) return x;</span><br><span class="line">return fa[x] = find(fa[x]);</span><br><span class="line">&#125; </span><br><span class="line">int main()&#123;</span><br><span class="line">n = read(),m = read();</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;val[i] = read();</span><br><span class="line">fa[i] = i;</span><br><span class="line">insert(root[i],1,n,val[i],1,i);</span><br><span class="line">&#125; </span><br><span class="line">for(int i=1;i&lt;=m;i++) &#123;</span><br><span class="line">int u = read(),v = read();</span><br><span class="line">int x = find(u),y = find(v);</span><br><span class="line">fa[y] = x; </span><br><span class="line">root[x] = merge(root[x],root[y],1,n);</span><br><span class="line">&#125;</span><br><span class="line">int q = read();</span><br><span class="line">for(int i=1;i&lt;=q;i++)&#123;</span><br><span class="line">char c;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line">int u = read(),v = read();</span><br><span class="line">int x = find(u),y = find(v);</span><br><span class="line">if(c==&#x27;B&#x27;)&#123;</span><br><span class="line">if(x==y) continue;</span><br><span class="line">fa[y] = x;</span><br><span class="line">root[x] = merge(root[x],root[y],1,n);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    cout&lt;&lt;query(root[x],1,n,v)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4130 [NOI2007]项链工厂</title>
      <link href="/2020/11/21/p4130/"/>
      <url>/2020/11/21/p4130/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4130">间隙</a></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个串包含$n$个珠子的项链,其中第$i$个珠子的颜色是$c_i$</p><p>现在要求维护以下几个操作:</p><p><img src="https://img2020.cnblogs.com/blog/2092833/202011/2092833-20201120232612748-2008256197.png" alt=""></p><p><img src="https://img2020.cnblogs.com/blog/2092833/202011/2092833-20201120232626190-1424942522.png" alt=""></p><p>$n,m≤500000$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>细节巨多的一道线段树题</p><p>调了将近四个小时/kk</p><p>如果没有翻转操作,这就是个线段树裸题</p><p>不难发现,翻转操作只是把顺时针旋转变成了逆时针旋转</p><p>维护两个变量$r$和$k$,分别代表旋转的幅度和是否翻转,然后就可以通过计算轻松搞出查询区间了</p><h3 id="亿点细节"><a href="#亿点细节" class="headerlink" title="亿点细节"></a>亿点细节</h3><ul><li><p>区间颜色全部相同时要特判</p></li><li><p>旋转后区间要翻转</p></li><li><p>注意题目中给的是一个环,因此要特判$l≤r$和$l＞r$的情况</p></li><li><p>区间赋值相加tag,傻逼!</p></li><li><p>交换操作用原数列数据,傻逼!</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">using namespace std;</span><br><span class="line">const int MAXN = 500010;</span><br><span class="line">#define lson node&lt;&lt;1</span><br><span class="line">#define rson node&lt;&lt;1|1 </span><br><span class="line">inline int read()&#123;</span><br><span class="line">int X=0; bool flag=1; char ch=getchar();</span><br><span class="line">while(ch&lt;&#x27;0&#x27;||ch&gt;&#x27;9&#x27;) &#123;if(ch==&#x27;-&#x27;) flag=0; ch=getchar();&#125;</span><br><span class="line">while(ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;) &#123;X=(X&lt;&lt;1)+(X&lt;&lt;3)+ch-&#x27;0&#x27;; ch=getchar();&#125;</span><br><span class="line">if(flag) return X;</span><br><span class="line">return ~(X-1);</span><br><span class="line">&#125;</span><br><span class="line">int n,m,a[MAXN];</span><br><span class="line">int now;</span><br><span class="line">int T[MAXN];</span><br><span class="line">int cnt = 0;</span><br><span class="line">bool is_rotate;</span><br><span class="line">struct st&#123;</span><br><span class="line">int l,r,val,tag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;2];</span><br><span class="line">stack&lt;st&gt; s;</span><br><span class="line">void pushdown(int node)&#123;</span><br><span class="line">if(!tree[node].tag) return;</span><br><span class="line">tree[lson].l = tree[lson].r = tree[rson].l = tree[rson].r = tree[node].tag;</span><br><span class="line">tree[lson].tag = tree[node].tag;</span><br><span class="line">tree[rson].tag = tree[node].tag;</span><br><span class="line">tree[lson].val = tree[rson].val = 1;</span><br><span class="line">tree[node].tag = 0;</span><br><span class="line">&#125;</span><br><span class="line">void pushup(int node)&#123;</span><br><span class="line">tree[node].l = tree[lson].l;</span><br><span class="line">tree[node].r = tree[rson].r;</span><br><span class="line">if(tree[lson].r == tree[rson].l)&#123;</span><br><span class="line">tree[node].val = tree[lson].val+tree[rson].val -1;</span><br><span class="line">&#125;</span><br><span class="line">else tree[node].val = tree[lson].val+tree[rson].val;</span><br><span class="line">&#125;</span><br><span class="line">void build(int node,int l,int r)&#123;</span><br><span class="line">if(l==r)&#123;</span><br><span class="line">tree[node].l = tree[node].r = a[l];</span><br><span class="line">tree[node].val = 1;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int mid = (l+r)&gt;&gt;1;</span><br><span class="line">build(lson,l,mid);</span><br><span class="line">build(rson,mid+1,r);</span><br><span class="line">pushup(node);</span><br><span class="line">&#125;</span><br><span class="line">int query(int node,int l,int r,int x,int y)&#123;</span><br><span class="line">if(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">return tree[node].val;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(node);</span><br><span class="line">int mid = (l+r)&gt;&gt;1;</span><br><span class="line">if(x&lt;=mid&amp;&amp;y&gt;mid) return query(lson,l,mid,x,y)+query(rson,mid+1,r,x,y)-(tree[lson].r==tree[rson].l);</span><br><span class="line">if(x&lt;=mid) return query(lson,l,mid,x,y);</span><br><span class="line">if(y&gt;mid) return query(rson,mid+1,r,x,y);</span><br><span class="line">pushup(node);</span><br><span class="line">&#125;</span><br><span class="line">st find(int node,int l,int r,int x,int y)&#123;</span><br><span class="line">if(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">return tree[node];</span><br><span class="line">&#125;</span><br><span class="line">pushdown(node);</span><br><span class="line">int mid = (l+r)&gt;&gt;1;</span><br><span class="line">if(x&lt;=mid) return find(lson,l,mid,x,y);</span><br><span class="line">if(y&gt;mid) return find(rson,mid+1,r,x,y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*int merge2()&#123;</span><br><span class="line">int ans = 0;</span><br><span class="line">st last;</span><br><span class="line">while(!s.empty())&#123;</span><br><span class="line">st a = s.top();</span><br><span class="line">s.pop();</span><br><span class="line">ans+=a.val;</span><br><span class="line">if(a.l==last.r) ans--;</span><br><span class="line">last = a;</span><br><span class="line">//cout&lt;&lt;&quot;[&quot;&lt;&lt;a.l&lt;&lt;&quot; &quot;&lt;&lt;a.r&lt;&lt;&quot;]&quot;&lt;&lt;&quot; &quot;&lt;&lt;a.val&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;*/</span><br><span class="line">void modify(int node,int l,int r,int x,int y,int val)&#123;</span><br><span class="line">if(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">tree[node].val = 1;</span><br><span class="line">tree[node].tag = val;</span><br><span class="line">tree[node].l = tree[node].r = val;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(node);</span><br><span class="line">int mid = (l+r)&gt;&gt;1;</span><br><span class="line">if(x&lt;=mid) modify(lson,l,mid,x,y,val);</span><br><span class="line">if(y&gt;mid) modify(rson,mid+1,r,x,y,val);</span><br><span class="line">pushup(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void calc(int &amp;x,int &amp;y)&#123;</span><br><span class="line">if(!is_rotate)</span><br><span class="line">    &#123;</span><br><span class="line">        if(x&gt;=now+1)x=x-now;</span><br><span class="line">        else x=n-now+x;</span><br><span class="line">        if(y&gt;=now+1) y=y-now;</span><br><span class="line">        else y=n-now+y;</span><br><span class="line">    &#125;else</span><br><span class="line">    &#123;</span><br><span class="line">        if(x&lt;=now+1)x=now-x+2;</span><br><span class="line">        else x=now+n-x+2;</span><br><span class="line">        if(y&lt;=now+1) y=now-y+2;</span><br><span class="line">        else y=now+n-y+2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">int main()&#123;</span><br><span class="line">n = read(),m = read();</span><br><span class="line">for(int i=1;i&lt;=n;i++) a[i] = read();</span><br><span class="line">    build(1,1,n);</span><br><span class="line">    int t;</span><br><span class="line">    t = read();</span><br><span class="line">    while(t--)&#123;</span><br><span class="line">    char opt[2];</span><br><span class="line">    cin&gt;&gt;opt;</span><br><span class="line">    if(opt[0]==&#x27;R&#x27;)&#123;</span><br><span class="line">    int k = read();</span><br><span class="line">    now = (now+k)%n;</span><br><span class="line">&#125;</span><br><span class="line">else if(opt[0]==&#x27;F&#x27;)&#123;</span><br><span class="line">is_rotate = !is_rotate;</span><br><span class="line">now = (n-now)%n;</span><br><span class="line">&#125;</span><br><span class="line">else if(opt[0]==&#x27;P&#x27;)&#123;</span><br><span class="line">int l = read(),r = read(),val = read();</span><br><span class="line">calc(l,r);</span><br><span class="line">if(is_rotate) swap(l,r);</span><br><span class="line">if(l&lt;=r) modify(1,1,n,l,r,val);</span><br><span class="line">else modify(1,1,n,l,n,val),modify(1,1,n,1,r,val);</span><br><span class="line">&#125;</span><br><span class="line">else if(opt[0]==&#x27;C&#x27;&amp;&amp;opt[1]!=&#x27;S&#x27;)&#123;</span><br><span class="line">if(tree[1].l!=tree[1].r) cout&lt;&lt;tree[1].val&lt;&lt;endl;//T[++cnt] = tree[1].val;</span><br><span class="line">else cout&lt;&lt;max(1,tree[1].val - 1)&lt;&lt;endl;//T[++cnt] = tree[1].val-1;</span><br><span class="line">&#125;</span><br><span class="line">else if(opt[0]==&#x27;S&#x27;)&#123;</span><br><span class="line">int l =read(),r = read();</span><br><span class="line">calc(l,r);</span><br><span class="line">st a = find(1,1,n,l,l);</span><br><span class="line">st b = find(1,1,n,r,r);</span><br><span class="line">modify(1,1,n,l,l,b.l);</span><br><span class="line">modify(1,1,n,r,r,a.l);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">int l = read(),r = read();</span><br><span class="line">calc(l,r);</span><br><span class="line">if(is_rotate) swap(l,r);</span><br><span class="line">//cout&lt;&lt;&quot;[&quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot;]&quot;&lt;&lt;endl;</span><br><span class="line">if(l&lt;=r) cout&lt;&lt;query(1,1,n,l,r)&lt;&lt;endl;</span><br><span class="line">else&#123;</span><br><span class="line">cout&lt;&lt;max(1,query(1,1,n,l,n)+query(1,1,n,1,r)-(tree[1].l==tree[1].r))&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"> // T[++cnt] = merge();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3354 [IOI2005]Riv 河流</title>
      <link href="/2020/11/14/p3354/"/>
      <url>/2020/11/14/p3354/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一颗$n$个节点的树,根节点是一个伐木场,每个节点都有一个村庄,每个村庄的每根木头运送到其父亲的代价是$d_i$,现在要建立$k$个伐木场,每个村庄有$w_i$根木头要沿树边运到最近的伐木场,求最小代价</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>树形$dp$</p><p>一开始比较容易想到的是设$f(i,j)$表示在$i$的子树中建立$j$个伐木场所花费的最小代价</p><p>发现无法得知一个节点的上一个伐木场在哪,即无法计算代价,考虑在状态中记录上一个伐木场的位置</p><p>设$f(i,j,k)$表示上一个伐木场的位置是$j$,$i$的子树中建立$j$个伐木场所花费的代价</p><p>有显然的转移:</p><center>$f(u,j,k) = min\{f(u,j,k-l)+min(f(v,v,l),f(v,j,l))\}(1≤l≤k)$</center><p>亿点细节:</p><ul><li><p>记得删除不合法的状态,详细见代码</p></li><li><p>枚举$j$时要先判断$j$是否在$u$的祖先中</p></li></ul><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf (1&lt;&lt;30)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> v,w,next;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n,K;</span><br><span class="line"><span class="type">int</span> c[MAXN],f[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> is_fa[MAXN];</span><br><span class="line"><span class="type">int</span> dis[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">edge[++cnt].v = v;</span><br><span class="line">edge[cnt].next = head[u];</span><br><span class="line">edge[cnt].w = w;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">is_fa[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=K;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!is_fa[i]) f[u][i][j] = inf;<span class="comment">//除去不合法状态</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>||u!=i) f[u][i][j] = (dis[u] - dis[i])*c[u];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j!=<span class="number">0</span>) f[u][i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> f[u][i][j] = inf;<span class="comment">//显然在u=i且j=0时状态不合法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line">dis[v] = edge[i].w+dis[u];</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!is_fa[j]) <span class="keyword">continue</span>;<span class="comment">//判断是否为祖先</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=K;k&gt;=<span class="number">0</span>;k--)&#123;</span><br><span class="line">f[u][j][k]+=f[v][j][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">1</span>;s&lt;=k;s++)&#123;</span><br><span class="line">f[u][j][k] = <span class="built_in">min</span>(f[u][j][k],f[u][j][k-s]+<span class="built_in">min</span>(f[v][v][s],f[v][j][s]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">is_fa[u] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;K;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,w;</span><br><span class="line">cin&gt;&gt;c[i]&gt;&gt;u&gt;&gt;w;</span><br><span class="line"><span class="built_in">add</span>(u,i,w);</span><br><span class="line">dis[i] = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;f[<span class="number">0</span>][<span class="number">0</span>][K];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF10D LCIS</title>
      <link href="/2020/11/08/cf10d/"/>
      <url>/2020/11/08/cf10d/</url>
      
        <content type="html"><![CDATA[<p><del>考完水篇博客放松一下</del></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>求两个串的最长公共上升子序列。</p><p>$1≤n,m≤500$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>设$f(i,j)$表示$a$串中前$i$个字符,$b$串中前$j$个字符构成以$b_j$结尾的$LCIS$长度</p><p>有显然的转移:</p><ul><li>$a_i = b_j$时</li></ul><p>$f(i,j) = max\left{f(i-1,k)\right}+1(0≤k&lt;j,b_k&lt;a_i)$</p><ul><li>$a_i≠b_j$时</li></ul><p>$f(i,j) = f(i-1,j)$</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN],n,m,k,last[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> a[MAXN],b[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">print</span>(i<span class="number">-1</span>,last[i][now]);</span><br><span class="line"><span class="keyword">if</span>(last[i][now]!=now)</span><br><span class="line">cout&lt;&lt;b[now]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">cin&gt;&gt;m;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cin&gt;&gt;b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[j]==a[i]) f[i][j] = f[i<span class="number">-1</span>][k]+<span class="number">1</span>,last[i][j] = k;</span><br><span class="line"><span class="keyword">else</span> f[i][j] = f[i<span class="number">-1</span>][j],last[i][j] = j;</span><br><span class="line"><span class="keyword">if</span>(b[j]&lt;a[i]&amp;&amp;f[i<span class="number">-1</span>][j]&gt;f[i<span class="number">-1</span>][k]) k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[n][i]&gt;f[n][ans]) ans = i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;f[n][ans]&lt;&lt;endl;</span><br><span class="line"><span class="built_in">print</span>(n,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP263 PERIOD - Period</title>
      <link href="/2020/11/06/sp263/"/>
      <url>/2020/11/06/sp263/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如果一个字符串$S$是由一个字符串$T$重复$K$次形成的，则称$T$是$S$的循环元。使$K$最大的字符串$T$称为$S$的最小循环元，此时的$K$称为最大循环次数。</p><p>现给一个给定长度为N的字符串$S$，对$S$的每一个前缀$S[1$~$i]$，如果它的最大循环次数大于$1$，则输出该前缀的长度和最大循环次数。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h3><p>$S[1$-$i]$具有长度$len&lt;i$的循环元的充要条件是$len$能整除$i$并且$S[len+1$-$i]=S[1$~$i-len]$(即$i-len$是$KMP$算法中$next[i]$的”候选择”)</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明:"></a>证明:</h3><p>首先,$len$能作为$S$的循环元,必须满足$len$能整除$i$,且$S[len+1$-$i]$和$S[1$-$i-len]$都是由$i/len-1$个循环元构成的,即$S[len+1$-$i]=S[1$-$i-len]$</p><p>其次,分别从$S[len+1$-$i]$和$S[1$-$i-len]$取前$len$个字符,可以发现$S[len+1$-$2*len]$ $=$ $S[1$-$len]$,依此类推,可以发现$S[len+1$-$i]$和$S[1$-$i-len]$是以$len$为间隔错位对齐的,故$S[1$-$len]$是$S$的循环元</p><p>证毕</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> next[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN],s2[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j+<span class="number">1</span>]) j = next[j];</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j+<span class="number">1</span>]) j++;</span><br><span class="line">next[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">now++;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;s[i];</span><br><span class="line"><span class="built_in">pre</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Test case #%d\n&quot;</span>, now);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(i%(i-next[i])==<span class="number">0</span>&amp;&amp;i/(i-next[i])&gt;<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i/(i-next[i])&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《算法竞赛进阶指南》-李煜东</p><h1 id="CSP2020-RP"><a href="#CSP2020-RP" class="headerlink" title="CSP2020 RP++"></a>CSP2020 RP++</h1>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4735 最大异或和(可持久化trie树模板)</title>
      <link href="/2020/10/31/p4735/"/>
      <url>/2020/10/31/p4735/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://www.luogu.com.cn/problem/P4735">间隙</a></strong></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非负整数序列 ${a}$，初始长度为$n$。</p><p>有 $m$ 个操作，有以下两种操作类型：</p><p>A x：添加操作，表示在序列末尾添加一个数 $x$，序列的长度 $n+1$。</p><p>Q l r x：询问操作，你需要找到一个位置 $p$，满足$x⊕a[p]⊕a[p+1]⊕…⊕a[N]⊕x$最大，输出最大是多少。</p><p>$N,M≤300000$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>可持久化trie树模板</p><p>设$s[i]$表示前$i$个数$⊕$起来的结果,根据异或的性质:</p><p>$a<em>p⊕a</em>{p+1}⊕…⊕a[n]⊕x = s[p-1]⊕s[n]⊕x$</p><p>对于添加操作,直接插入即可</p><p>对于查询操作:</p><p>维护一个数组$b_i$,表示节点$b_i$的子树中的最大版本号(最大下标)</p><p>显然,只有在最大版本号不小于$l-1$时该节点才合法,在合法的前提下尽可能地往与当前位相反的指针走</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">600010</span>;</span><br><span class="line"><span class="type">int</span> n,m,child[MAXN*<span class="number">24</span>][<span class="number">2</span>], tot;</span><br><span class="line"><span class="type">int</span> s[MAXN],a[MAXN],root[MAXN],maxindex[MAXN*<span class="number">24</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">maxindex[node] = <span class="built_in">max</span>(maxindex[child[node][<span class="number">0</span>]],maxindex[child[node][<span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> now,<span class="type">int</span> ind,<span class="type">int</span> last)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now&lt;<span class="number">0</span>)&#123;</span><br><span class="line">maxindex[node] = ind;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> c = s[ind]&gt;&gt;now&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(last) child[node][c^<span class="number">1</span>] = child[last][c^<span class="number">1</span>];</span><br><span class="line">child[node][c] = ++tot;</span><br><span class="line"><span class="built_in">insert</span>(child[node][c],now<span class="number">-1</span>,ind,child[last][c]);</span><br><span class="line"><span class="built_in">update</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> now,<span class="type">int</span> val,<span class="type">int</span> limit)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> s[maxindex[node]]^val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> c = val&gt;&gt;now&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(maxindex[child[node][c^<span class="number">1</span>]]&gt;=limit)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(child[node][c^<span class="number">1</span>],now<span class="number">-1</span>,val,limit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(child[node][c],now<span class="number">-1</span>,val,limit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">maxindex[<span class="number">0</span>] = <span class="number">-1</span>;<span class="comment">//坑</span></span><br><span class="line">root[<span class="number">0</span>] = ++tot;</span><br><span class="line"><span class="built_in">insert</span>(root[<span class="number">0</span>],<span class="number">23</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">s[i] = s[i<span class="number">-1</span>]^x;</span><br><span class="line">root[i] = ++tot;</span><br><span class="line"><span class="built_in">insert</span>(root[i],<span class="number">23</span>,i,root[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">char</span> opt[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;val);</span><br><span class="line">root[++n] = ++tot;</span><br><span class="line">s[n] = s[n<span class="number">-1</span>]^val;</span><br><span class="line"><span class="built_in">insert</span>(root[n],<span class="number">23</span>,n,root[n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(root[r<span class="number">-1</span>],<span class="number">23</span>,x^s[n],l<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4551 最长异或路径(01trie模板)</title>
      <link href="/2020/10/31/p4551/"/>
      <url>/2020/10/31/p4551/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://www.luogu.com.cn/problem/P4551">间隙</a></strong></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给定一棵$n$个点的带权树，求最长的异或路径。</p><p>异或路径指的是指两个结点之间唯一路径上的所有边权的异或</p><p>$1≤n≤100000$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>01trie模板</p><p>设$f<em>i$表示从根节点到$i$节点的异或路径,有显然的递推公式:$f_v = f</em>{fa}⊕edge.w$</p><p>根据异或的性质,$x$到$y$之间的异或路径即为$f_v⊕f_u$($a⊕a = 0$,即路径上重合的一部分恰好抵消)</p><p>于是可以将每个$f_i$的二进制串从左到右插入到一颗$trie$树中,并在查询时尽可能地往与当前位相反的指针走即可</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w,next;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">1</span>],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">++cnt;</span><br><span class="line">edge[cnt].w = w;</span><br><span class="line">edge[cnt].u = u;</span><br><span class="line">edge[cnt].v = v;</span><br><span class="line">edge[cnt].next = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> child[MAXN*<span class="number">40</span>][<span class="number">2</span>],tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">a[v] = a[u]^edge[i].w;</span><br><span class="line"><span class="built_in">dfs</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">int</span> now = a&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!child[p][now]) child[p][now] = ++tot;</span><br><span class="line">p = child[p][now];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findmax</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">int</span> now = a&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(child[p][now^<span class="number">1</span>])&#123;</span><br><span class="line">res|=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">p = child[p][now^<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p = child[p][now];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line"><span class="built_in">add</span>(u,v,w);</span><br><span class="line"><span class="built_in">add</span>(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">insert</span>(a[i]);</span><br><span class="line"><span class="built_in">findmax</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模板】manacher算法</title>
      <link href="/2020/10/23/manacher%E7%AE%97%E6%B3%95/"/>
      <url>/2020/10/23/manacher%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>看进阶指南的时候看到的算法,正好最近<del>没啥事干</del>来学一下</p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个长度为$n$字符串$S$,求$S$中的最长回文字串</p><p>$n≤1.1×10^7$</p><hr><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><p>暴力</p><p>枚举每个点能扩散到的最大长度</p><p>时间复杂度$O(n^2)$</p><hr><h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>$hash+$二分</p><p>建立出$S$的前后缀$hash$值,然后二分答案,找到最大扩展长度</p><p>时间复杂度$O(nlogn)$</p><hr><h2 id="算法三"><a href="#算法三" class="headerlink" title="算法三"></a>算法三</h2><p>$manacher$<del>麻辣串</del>算法</p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><p>1.在每两个字符间插入一个额外字符,以去掉偶回文串的情况</p><hr><p>2.定义$r_i$表示以$i$为中心时的最大回文半径</p><p>$R$表示当前情况能扩展到的最右字符$(即最右回文右端点)$,$mid$表示最右回文的中心</p><p>考虑每个新进来的字符的情况:</p><p>$1.$ $i∈[mid,R]$</p><p>显然,$i$有一个关于$mid$的对称点$j = mid×2-i$,根据对称性,$j$周围的字符和$i$周围的字符一定相同,于是可以先用$r<em>j$去更新$r_i$,即$r_i = min(r</em>{mid×2-i},r_{mid}-i+mid)$,(右侧不能大于$R$,否则处于未知的位置,无法保证正确性),最后再去试试$i$还能不能扩展,同时更新$R$和$mid$的值</p><p>$2.$ $i∈(R,n]$</p><p>此时$i$处于一个未知的位置,因此只能暴力扩展,同时更新$R$和$mid$的值</p><p>最后的答案即为$(2*max(r_i)-2)/2 = max(r_i)-1$,由于$R$最多会向右移$n$次,因此总时间复杂度为线性($O(n)$)</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">91000000</span>;</span><br><span class="line"><span class="type">char</span> c[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="type">int</span> L[MAXN],R[MAXN]; </span><br><span class="line"><span class="type">int</span> MAX_R;</span><br><span class="line"><span class="type">int</span> r[MAXN],len,mid; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manacher</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(MAX_R&gt;i&amp;&amp;mid&lt;=i) r[i] = <span class="built_in">min</span>(r[mid*<span class="number">2</span>-i],r[mid]-i+mid);</span><br><span class="line"><span class="keyword">else</span> r[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(s[i+r[i]]==s[i-r[i]]) r[i]++;</span><br><span class="line"><span class="keyword">if</span>(i+r[i]&gt;MAX_R)&#123;</span><br><span class="line">mid = i;</span><br><span class="line">MAX_R = r[i]+i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line">s[<span class="number">0</span>] =<span class="string">&#x27;#&#x27;</span>,s[<span class="number">1</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">len = <span class="built_in">strlen</span>(c); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">s[i*<span class="number">2</span>+<span class="number">2</span>] = c[i];</span><br><span class="line">s[i*<span class="number">2</span>+<span class="number">3</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line">len = len*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">-114514</span>;</span><br><span class="line"><span class="built_in">manacher</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,r[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans<span class="number">-1</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing 105. 七夕祭</title>
      <link href="/2020/10/17/ac105/"/>
      <url>/2020/10/17/ac105/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有一个$n×m$的矩阵,矩阵上有$t$个点有摊位,两个摊位相邻,当且仅当它们在同一行或同一列的相邻位置上,且每一行和每一列的第一个位置和最后一个位置也算作相邻</p><p>求至少需要交换多少个相邻摊位,能使得各行各列上的摊位数均相等</p><p>$1≤n,m≤100000$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>经过观察可以发现交换上下相邻两个的节点只会改变某两行中的摊位数,交换左右两个相邻的节点只会改变某两列中的摊位数,因此可以把原问题拆成两个问题:</p><p>1.至少移动多少个相邻摊位可以使各行中的摊位数相同</p><p>2.至少移动多少个想来摊位可以使各列中的摊位数相同</p><p>先来考虑不是环形的情况</p><p>设$a[i]$表示第$i$行中的摊位数量</p><p>显然,这是个经典的均分纸牌问题,最终答案即为$\sum_{i=1}^n|a[i]-\dfrac{t}{m}|$,列也同理</p><p>对于加上环形的情况,一种比较好想的处理方法是断换成链,枚举断开哪个点,但对于$1≤n,m≤100000$的数据范围肯定会T飞,考虑优化;</p><p>设$sum[i]$表示$\sum_{i=1}^n|a[i]-\dfrac{t}{m}|$,即$|a[i]-\dfrac{t}{m}|$的前缀和</p><p>假设在第$k$个人后把环断开</p><p>显然,对于区间$[k+1,n]$的行,其前缀和为$sum[i]-sum[k]$</p><p>对于区间$[1,k]$之间的行,其前缀和为$sum[i]+sum[n]-sum[k]$</p><p>又因为$sum[m]$必定是$0$,因此前缀和的变化就是每个位置都减掉$sum[k]$</p><p>答案即为$\sum_{i=1}^n|sum[i]-sum[k]|$</p><p>把每个$sum[i]$都看作数轴上的一个点,那么就变成了一个经典的中位数最短距离问题:</p><p>在一个数轴上有$n$个点,从中选出一个点,使得其他的点到该点的距离之和最小</p><p>将$sum$排序后取中位数即可</p><p>总复杂度$O(nlogn+mlogm)$</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,m,t;</span><br><span class="line"><span class="type">int</span> row[MAXN];</span><br><span class="line"><span class="type">int</span> col[MAXN];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ROW</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum[MAXN];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> unneed = t/n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) row[i]-=t/n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i] = sum[i<span class="number">-1</span>]+row[i];</span><br><span class="line"><span class="built_in">sort</span>(sum+<span class="number">1</span>,sum+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++) ans+=sum[n-i+<span class="number">1</span>]-sum[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">COL</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum[MAXN];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> unneed = t/m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) col[i]-=t/m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) sum[i] = sum[i<span class="number">-1</span>]+col[i];</span><br><span class="line"><span class="built_in">sort</span>(sum+<span class="number">1</span>,sum+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m/<span class="number">2</span>;i++) ans+=sum[m-i+<span class="number">1</span>]-sum[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">row[x]++;</span><br><span class="line">col[y]++;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt%n==<span class="number">0</span>&amp;&amp;cnt%m==<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;both &quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">ROW</span>()+<span class="built_in">COL</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt%n==<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;row &quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">ROW</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt%m==<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;column &quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">COL</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4141 消失之物</title>
      <link href="/2020/10/09/p4141/"/>
      <url>/2020/10/09/p4141/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给$n$个物品和一个容量为$m$的背包,设$cnt(i,x)$表示删去某个物品$i$时填满容量为$x$的背包的方案数</p><p>求所有的$cnt(i,x)$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>容斥+$dp$</p><p>和<a href="https://www.luogu.com.cn/problem/P1450"><strong>P1450 [HAOI2008]硬币购物</strong></a>大同小异的解法</p><p>总方案数 $=$ 不删去物品时的方案数 $-$ 不合法的方案数</p><p>设$f[j]$表示不删去任何物品时背包容量为$j$时的方案数,$g[j]$表示删去物品$i$时填充容量为$j$的背包的方案数</p><p>对于不删去物品时方案数,直接跑一遍01背包即可，对于不合法的方案数:</p><p>当且仅当一个方案使用了第$i$个物品时该改方案不合法,有一个比较容易想到的转移,即:</p><p>$g[j] = f[j] - f[j-w[i]]$</p><p><del>显然是错的</del>,因为在$f[j-w[i]]$中可能也有$w[i]$的贡献</p><p>因此因改为:</p><p>$g[j] = f[j] - g[j-w[i]]$</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2010</span>;</span><br><span class="line"><span class="type">int</span> f[MAXN],w[MAXN],n,m;</span><br><span class="line"><span class="type">int</span> ie[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">ie[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;w[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=w[i];j--)&#123;</span><br><span class="line">f[j]+=f[j-w[i]];</span><br><span class="line">f[j]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;w[i];j++)&#123;</span><br><span class="line">ie[j] = f[j];</span><br><span class="line">ie[j]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=w[i];j&lt;=m;j++)&#123;</span><br><span class="line">ie[j] = (f[j] - ie[j-w[i]]+<span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) cout&lt;&lt;ie[j];</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>听说ZJ今年复赛晋级人数要下降30%…怕不是要初赛AFO了/kk</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2827 蚯蚓</title>
      <link href="/2020/10/05/p2827/"/>
      <url>/2020/10/05/p2827/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给$n$个数,$m$次操作,每次操作都将最大的一个数$K$分割为$p×K$和$K-p×K$两个数,每次操作后未被切割的数都会长长$q$,现在要求:</p><p>1.第$1t,2t,3t,…$次操作时被切割的数的大小($t$为给定参数)</p><p>2.操作完成后排名为$1t,2t,3t,…$的数的大小</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h3><p>直接开一个堆来模拟</p><p>可以获得$90pts$的<del>超高</del>分</p><p>复杂度约为$O(mlogn)$</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;</span><br><span class="line"><span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt;que;</span><br><span class="line"><span class="type">int</span> n,m,q,u,v,t;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m =<span class="built_in">read</span>(),q =<span class="built_in">read</span>(),u =<span class="built_in">read</span>(),v =<span class="built_in">read</span>(),t =<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> qy;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">qy = <span class="built_in">read</span>();</span><br><span class="line">que.<span class="built_in">push</span>(qy);</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">double</span> px = (<span class="type">double</span>)u/v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> now = que.<span class="built_in">top</span>()+val;</span><br><span class="line">val+=q;</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> xx = (<span class="type">double</span>)(px*now),yy = now - xx;</span><br><span class="line">xx-=val,yy-=val;</span><br><span class="line">que.<span class="built_in">push</span>(xx),que.<span class="built_in">push</span>(yy);</span><br><span class="line"><span class="keyword">if</span>(i%t==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,now);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> now = que.<span class="built_in">top</span>()+val;</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(T%t==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,now);</span><br><span class="line">T++;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>通过观察可以发现:</p><p>假设有两个数$x$和$y$,且$x≥y$,那么两个数被切割后分别为</p><p>$p×x$和$(1-p)×x$,$p×y$和$(1-p)×y$</p><p>易得</p><p>$p×x≥p×y$,$(1-p)×x≥(1-p)×y$</p><p>说明被切割后的两个数具有单调性</p><p>可以开三个队列,一个存储经排序后的原数,另外两个分别存储被切割后的两个数</p><p>每次操作时取三个队首中最大的一个,并弹出即可</p><p>复杂度为$O(m+nlogn)$</p><h2 id="code-1"><a href="#code-1" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;</span><br><span class="line"><span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q1,q2,q3;</span><br><span class="line"><span class="type">int</span> n,m,q,u,v,t;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&gt;y;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">choise</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>) q1.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">2</span>) q2.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span> q3.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> n = <span class="built_in">read</span>(),m =<span class="built_in">read</span>(),q =<span class="built_in">read</span>(),u =<span class="built_in">read</span>(),v =<span class="built_in">read</span>(),t =<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> qy;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i] = <span class="built_in">read</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">double</span> px = (<span class="type">double</span>)u/v;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">q1.<span class="built_in">push</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> que,now = <span class="number">-11451419</span>;</span><br><span class="line"><span class="keyword">if</span>(!q1.<span class="built_in">empty</span>()&amp;&amp;q1.<span class="built_in">front</span>()+val&gt;now) now = q1.<span class="built_in">front</span>()+val,que = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!q2.<span class="built_in">empty</span>()&amp;&amp;q2.<span class="built_in">front</span>()+val&gt;now) now = q2.<span class="built_in">front</span>()+val,que = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(!q3.<span class="built_in">empty</span>()&amp;&amp;q3.<span class="built_in">front</span>()+val&gt;now) now = q3.<span class="built_in">front</span>()+val,que = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">choise</span>(que);</span><br><span class="line">val+=q;</span><br><span class="line"><span class="type">int</span> xx = (<span class="type">double</span>)(px*now),yy = now - xx;</span><br><span class="line">xx-=val,yy-=val;</span><br><span class="line">q2.<span class="built_in">push</span>(xx),q3.<span class="built_in">push</span>(yy);</span><br><span class="line"><span class="keyword">if</span>(i%t==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">while</span>(!(q1.<span class="built_in">empty</span>()&amp;&amp;q2.<span class="built_in">empty</span>()&amp;&amp;q3.<span class="built_in">empty</span>()))&#123;</span><br><span class="line"><span class="type">int</span> que,now = <span class="number">-11451419</span>;</span><br><span class="line"><span class="keyword">if</span>(!q1.<span class="built_in">empty</span>()&amp;&amp;q1.<span class="built_in">front</span>()+val&gt;now) now = q1.<span class="built_in">front</span>()+val,que = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!q2.<span class="built_in">empty</span>()&amp;&amp;q2.<span class="built_in">front</span>()+val&gt;now) now = q2.<span class="built_in">front</span>()+val,que = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(!q3.<span class="built_in">empty</span>()&amp;&amp;q3.<span class="built_in">front</span>()+val&gt;now) now = q3.<span class="built_in">front</span>()+val,que = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">choise</span>(que);</span><br><span class="line"><span class="keyword">if</span>(T%t==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,now);</span><br><span class="line">T++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2679 子串</title>
      <link href="/2020/10/05/p2679/"/>
      <url>/2020/10/05/p2679/</url>
      
        <content type="html"><![CDATA[<p>update on 2021/1/24</p><p><strong><a href="https://www.luogu.com.cn/problem/P2679">题目链接</a></strong></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给两个字符串$A$和$B$,从字符串 $A$ 中取出 $k$ 个互不重叠的非空子串，把这 $k$ 个子串按照其在字符串 $A$ 中出现的顺序依次连接起来得到一个新的字符串,求有多少种方案可以使这个新串和字符串$B$相等</p><p>$1≤n≤1000,1≤m≤200,1≤k≤m$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>设$f(i,j,k,0/1)$表示在$A$中的前$i$个字符,$B$中前$j$个字符,一共拆了$k$个字串,第$i$个字符选$/$不选的方案数,分类讨论拼接的情况,有显然的转移:</p><p>$f(i,j,k,1) = f(i-1,j-1,k,0)+f(i-1,j-1,k-1,1)+f_(i-1,j-1,k,1)$</p><p>$f(i,j,k,0) = f(i-1,j,k,1)+f(i-1,j,k,0)$</p><p>再用滚动数组优化一下即可</p><p>时间复杂度$O(nmk)$</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//90pts</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN =<span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> f[<span class="number">1005</span>][<span class="number">110</span>][<span class="number">110</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m,k0;</span><br><span class="line">string a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k0;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">a = <span class="string">&#x27; &#x27;</span>+a;</span><br><span class="line">b = <span class="string">&#x27; &#x27;</span>+b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">f[i][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=k0;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==b[j])&#123;</span><br><span class="line">f[i][j][k][<span class="number">0</span>] = (f[i<span class="number">-1</span>][j][k][<span class="number">1</span>]+f[i<span class="number">-1</span>][j][k][<span class="number">0</span>])%mo;</span><br><span class="line">f[i][j][k][<span class="number">1</span>] = ((f[i<span class="number">-1</span>][j<span class="number">-1</span>][k<span class="number">-1</span>][<span class="number">0</span>]+f[i<span class="number">-1</span>][j<span class="number">-1</span>][k<span class="number">-1</span>][<span class="number">1</span>])%mo+f[i<span class="number">-1</span>][j<span class="number">-1</span>][k][<span class="number">1</span>])%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">f[i][j][k][<span class="number">0</span>] = (f[i<span class="number">-1</span>][j][k][<span class="number">1</span>]+f[i<span class="number">-1</span>][j][k][<span class="number">0</span>])%mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(f[n][m][k0][<span class="number">0</span>]+f[n][m][k0][<span class="number">1</span>])%mo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN =<span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> f[<span class="number">2</span>][<span class="number">205</span>][MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m,k0;</span><br><span class="line">string a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] =  <span class="number">1</span>;</span><br><span class="line">f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] =  <span class="number">1</span>;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k0;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">a = <span class="string">&#x27; &#x27;</span>+a;</span><br><span class="line">b = <span class="string">&#x27; &#x27;</span>+b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=k0;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==b[j])&#123;</span><br><span class="line">f[now][j][k][<span class="number">0</span>] = (f[now^<span class="number">1</span>][j][k][<span class="number">1</span>]+f[now^<span class="number">1</span>][j][k][<span class="number">0</span>])%mo;</span><br><span class="line">f[now][j][k][<span class="number">1</span>] = ((f[now^<span class="number">1</span>][j<span class="number">-1</span>][k<span class="number">-1</span>][<span class="number">0</span>]+f[now^<span class="number">1</span>][j<span class="number">-1</span>][k<span class="number">-1</span>][<span class="number">1</span>])%mo+f[now^<span class="number">1</span>][j<span class="number">-1</span>][k][<span class="number">1</span>])%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">f[now][j][k][<span class="number">0</span>] = (f[now^<span class="number">1</span>][j][k][<span class="number">1</span>]+f[now^<span class="number">1</span>][j][k][<span class="number">0</span>])%mo;</span><br><span class="line">f[now][j][k][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">now^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(f[n&amp;<span class="number">1</span>][m][k0][<span class="number">0</span>]+f[n&amp;<span class="number">1</span>][m][k0][<span class="number">1</span>])%mo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3959 宝藏</title>
      <link href="/2020/10/04/p3959/"/>
      <url>/2020/10/04/p3959/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一张$n$个点$m$条边的图,求出一颗生成树,生成树中的每条边的边权为该边的边权$w$$×$该边的深度$dep$,求生成树的最小权值和</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>枚举每个点暴力$dfs$肯定会$T$飞</p><p>发现$n≤12$且有重复状态,考虑状态压缩；</p><p>设$f[i][j][k]$表示当前点集为$i$,且父亲为$j$,深度为$j$时的最小代价</p><p>枚举集合$i$的子集$s$和$u$的儿子$v$</p><p>当且仅当子集合法时,有转移:</p><p>$f[i][u][k] = min(f[s][j][k]+f[s$^$i][v][k+1]+edge(u,v)×k)$</p><p>$(u∈s,v∈s$^$i,edge(u,v)!=inf)$</p><p>采用记忆化搜索的形式来实现</p><p>要注意的是当一个状态被访问过且该状态的$f$数组还未被更新时也要特判</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">15</span>;</span><br><span class="line"><span class="type">int</span> n,m,ans;</span><br><span class="line"><span class="type">int</span> edge[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> f[<span class="number">1</span>&lt;&lt;(MAXN)][MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">1</span>&lt;&lt;(MAXN)][MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> status,<span class="type">int</span> u,<span class="type">int</span> dep)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[status][u][dep]!=<span class="number">-1</span>) <span class="keyword">return</span> f[status][u][dep];</span><br><span class="line"><span class="keyword">if</span>(vis[status][u][dep]) <span class="keyword">return</span> inf;</span><br><span class="line">vis[status][u][dep] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(status==(<span class="number">1</span>&lt;&lt;(u<span class="number">-1</span>))) <span class="keyword">return</span> f[status][u][dep] = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ans = inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> s = status;s;s = (s<span class="number">-1</span>) &amp; status)&#123;</span><br><span class="line"><span class="keyword">if</span>(!(s&amp;(<span class="number">1</span>&lt;&lt;(u<span class="number">-1</span>)))) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">1</span>;v&lt;=n;v++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!(status&amp;(<span class="number">1</span>&lt;&lt;(v<span class="number">-1</span>)))||edge[u][v] == edge[<span class="number">0</span>][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">ans = <span class="built_in">min</span>(ans,<span class="built_in">dfs</span>(s,u,dep)+<span class="built_in">dfs</span>((s^status),v,dep+<span class="number">1</span>)+edge[u][v]*dep);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[status][u][dep] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">ans = inf;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="built_in">memset</span>(edge,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(edge));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">edge[u][v] = edge[v][u] = <span class="built_in">min</span>(edge[u][v],w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">ans = <span class="built_in">min</span>(ans,<span class="built_in">dfs</span>((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>,i,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5628 【AFOI-19】面基</title>
      <link href="/2020/10/04/p5628/"/>
      <url>/2020/10/04/p5628/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一颗$n$个节点的带边权树,每条边权的值为边两端的端点所形成的子树的乘积,求</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>换根$dp$板子题(或者说是树上容斥?)</p><p>细节有点坑</p><p>设$f[u][j]$表示以$u$为根,距离$u$小于等于$k$的边权和</p><p>先以任意一个节点$u$为根,计算$u$的子树对$u$的贡献,即$f[u][j] = \sum f[v][j-1]$</p><p>接下来从$u$去转移到其他节点</p><p>新节点的边权和 $=$ 父亲对它的贡献$+$子树对它的贡献 $-$ 重复的部分</p><p>易得转移$:$</p><p>$f[v][j] =f[v][j]+ f[u][j-1]-f[v]<a href="j≥2">j-2</a>$</p><p><strong>几个坑点</strong></p><ul><li><p>$j=1$要特判</p></li><li><p>一个点能截断所有与该点相连的道路,因此道路的距离可能为$k+1$</p></li></ul><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">30010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">-114514191919</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w,next;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[MAXN],val[MAXN];</span><br><span class="line"><span class="type">int</span> n,k,cnt = <span class="number">1</span>,size[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">++cnt;</span><br><span class="line">edge[cnt].u = u;</span><br><span class="line">edge[cnt].v = v;</span><br><span class="line">edge[cnt].next = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[MAXN][<span class="number">310</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">size[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line">edge[i].w = size[v]*(n-size[v]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k+<span class="number">1</span>;j++)&#123;</span><br><span class="line">f[u][j]+=edge[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs2</span>(v,u);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k+<span class="number">1</span>;j++)</span><br><span class="line">     f[u][j]+=f[v][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u!=<span class="number">1</span>)&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=k+<span class="number">1</span>;i&gt;=<span class="number">2</span>;i--)&#123;</span><br><span class="line">f[u][i] += f[fa][i<span class="number">-1</span>] - f[u][i<span class="number">-2</span>];</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(ans , f[u][k+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">f[v][<span class="number">1</span>]+=edge[i].w;</span><br><span class="line"><span class="built_in">dp</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line"><span class="built_in">add</span>(u,v),<span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dp</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1967 货车运输</title>
      <link href="/2020/10/03/p1967/"/>
      <url>/2020/10/03/p1967/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一张$n$个点,$m$条边的带边权无向图,现在有$q$次询问,每次询问都给一个$x$和$y$,求$x$到$y$的路径上长度最小的边的大小</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>大水题</p><p>先跑一遍最小生成树</p><p>然后把点权转成边权,上树剖即可</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson (node&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson (node&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1145141919</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w,next;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">koishi</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> koishi &amp;k)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> w&gt;k.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> w[MAXN&lt;&lt;<span class="number">2</span>],n,m;</span><br><span class="line"><span class="type">int</span> dep[MAXN],son[MAXN],fa[MAXN],size[MAXN],faa[MAXN];</span><br><span class="line"><span class="type">int</span> id[MAXN],val[MAXN],tot = <span class="number">0</span>,cnt = <span class="number">1</span>,top[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(faa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> faa[x] = <span class="built_in">find</span>(faa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">edge[cnt].u = u;</span><br><span class="line">edge[cnt].v = v;</span><br><span class="line">edge[cnt].w = w;</span><br><span class="line">edge[cnt].next = head[u];</span><br><span class="line">head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f,<span class="type">int</span> deep)</span></span>&#123;</span><br><span class="line">dep[u] = deep;</span><br><span class="line">fa[u] = f;</span><br><span class="line">size[u] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">w[v] = edge[i].w;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u,deep+<span class="number">1</span>);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;maxson)&#123;</span><br><span class="line">son[u] = v;</span><br><span class="line">maxson = size[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">id[u] = ++tot;</span><br><span class="line">val[tot] = u;</span><br><span class="line">top[u] = topf;</span><br><span class="line"><span class="keyword">if</span>(!son[u]) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==son[u]||v==fa[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> minn,l,r,tag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].minn = <span class="built_in">min</span>(tree[lson].minn,tree[rson].minn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">tree[node].l = l,tree[node].r = r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].minn = w[val[l]];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">update</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x&lt;=tree[node].l&amp;&amp;tree[node].r&lt;=y)&#123;</span><br><span class="line"><span class="keyword">return</span> tree[node].minn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mid = (tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> now = inf;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) now = <span class="built_in">min</span>(now,<span class="built_in">query</span>(lson,x,y));</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) now = <span class="built_in">min</span>(now,<span class="built_in">query</span>(rson,x,y));</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qb</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = inf;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">ans=<span class="built_in">min</span>(ans,<span class="built_in">query</span>(<span class="number">1</span>,id[top[u]],id[u]));</span><br><span class="line">u = fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">ans=<span class="built_in">min</span>(ans,<span class="built_in">query</span>(<span class="number">1</span>,id[u]+<span class="number">1</span>,id[v]));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">faa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">find</span>(a[i].u),y = <span class="built_in">find</span>(a[i].v);</span><br><span class="line"><span class="keyword">if</span>(x!=y)&#123;</span><br><span class="line">faa[x] = y;</span><br><span class="line"><span class="built_in">add</span>(a[i].u,a[i].v,a[i].w),<span class="built_in">add</span>(a[i].v,a[i].u,a[i].w);</span><br><span class="line">tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tot==n<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(w,<span class="number">-1</span>,<span class="built_in">sizeof</span>(w));</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i].u&gt;&gt;a[i].v&gt;&gt;a[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+m);</span><br><span class="line"><span class="built_in">kruskal</span>();</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line">cin&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="type">int</span> xx = <span class="built_in">find</span>(x),yy = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(xx!=yy) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="built_in">qb</span>(x,y)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>水博客好爽啊</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3953 逛公园</title>
      <link href="/2020/10/03/p3953/"/>
      <url>/2020/10/03/p3953/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有一张$n$个点$m$条边的有向图,求出从$1$号点到$n$号点长度$≤d+k$的路径条数($d$表示从$1$到$n$的最短路长度)</p><p>$n≤100000,m≤200000,k≤50$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>注意到$k≤50$,考虑$dp$</p><h3 id="dp"><a href="#dp" class="headerlink" title="$dp$"></a>$dp$</h3><p>设$f[i][j]$表示走到$i$这个点时有$j$步可多走且到达终点时恰好走完$j$步的方案数</p><p>假设有一条要转移的边$(u,v,w)$</p><p>那么到达$u$时走的总路程即为$d_u+k-j$</p><p>再从$u$走到$v$就走了$d_u+k-j+w$</p><p>剩下的步数即为$k +d_v- (d_u+k-j+w)  = d_v - d_u+j-w$</p><p>易得转移:</p><p>$f[u][j] = f[v][d_v - d_u+j-w]$</p><p>使用记忆化搜索来实现</p><h3 id="判零环"><a href="#判零环" class="headerlink" title="判零环"></a>判零环</h3><p>此题最坑的地方</p><p>一个比较容易想到的处理方式是在$dfs$的时候记录状态是否出现过,若一个状态出现过两次则说明产生了零环</p><p>但不是所有的零环都会被跑，如果有一个零环被经过时的路径总和大于$k+d_n$,那他就不会被经过</p><p>可以建个反图,然后跑一遍原图的最短路和反图的最短路,然后枚举每个点,判断该点是否满足$d1_i+d2_i≤k+d1_n$,若不满足,则打上一个标记,在$dfs$的时候特判即可</p><p><strong>几个坑点</strong></p><ul><li>$dp$时要判断状态是否合法</li></ul><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> to,next,w;</span><br><span class="line">&#125;edge1[MAXN&lt;&lt;<span class="number">1</span>],edge2[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="comment">//----------------------------------edge</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> index,dist;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;x)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dist&gt;x.dist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//----------------------------------</span></span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="type">int</span> dis1[MAXN],dis2[MAXN],cnt1,cnt2,head1[MAXN],head2[MAXN],vis[MAXN],n;</span><br><span class="line"><span class="type">int</span> f[MAXN][<span class="number">60</span>];</span><br><span class="line"><span class="type">bool</span> ch[MAXN][<span class="number">60</span>];</span><br><span class="line"><span class="type">bool</span> c[MAXN];</span><br><span class="line"><span class="type">int</span> m,k,p;</span><br><span class="line"><span class="comment">//----------------------------------</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">edge1[++cnt1].next = head1[u];</span><br><span class="line">edge1[cnt1].to = v;</span><br><span class="line">edge1[cnt1].w = w;</span><br><span class="line">head1[u] = cnt1;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">edge2[++cnt2].next = head2[u];</span><br><span class="line">edge2[cnt2].to = v;</span><br><span class="line">edge2[cnt2].w = w;</span><br><span class="line">head2[u] = cnt2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------------++edge</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij1</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">node h = &#123;now,<span class="number">0</span>&#125;;</span><br><span class="line">q.<span class="built_in">push</span>(h);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">node u = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[u.index]) <span class="keyword">continue</span>;</span><br><span class="line">vis[u.index] = <span class="number">1</span>;</span><br><span class="line">dis1[u.index] = u.dist;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head1[u.index];i;i=edge1[i].next)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[edge1[i].to]) <span class="keyword">continue</span>;</span><br><span class="line">h.dist = u.dist+edge1[i].w;</span><br><span class="line">h.index = edge1[i].to;</span><br><span class="line">q.<span class="built_in">push</span>(h);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij2</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">node h = &#123;now,<span class="number">0</span>&#125;;</span><br><span class="line">q.<span class="built_in">push</span>(h);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">node u = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[u.index]) <span class="keyword">continue</span>;</span><br><span class="line">vis[u.index] = <span class="number">1</span>;</span><br><span class="line">dis2[u.index] = u.dist;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head2[u.index];i;i=edge2[i].next)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[edge2[i].to]) <span class="keyword">continue</span>;</span><br><span class="line">h.dist = u.dist+edge2[i].w;</span><br><span class="line">h.index = edge2[i].to;</span><br><span class="line">q.<span class="built_in">push</span>(h);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------------dij</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">cnt1 = cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="built_in">memset</span>(head1,<span class="number">0</span>,<span class="built_in">sizeof</span>(head1));</span><br><span class="line"><span class="built_in">memset</span>(head2,<span class="number">0</span>,<span class="built_in">sizeof</span>(head2));</span><br><span class="line"><span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="built_in">sizeof</span>(ch));</span><br><span class="line"><span class="built_in">memset</span>(dis1,<span class="number">127</span>,<span class="built_in">sizeof</span>(dis1));</span><br><span class="line"><span class="built_in">memset</span>(dis2,<span class="number">127</span>,<span class="built_in">sizeof</span>(dis2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------------clear</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> lest)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[now][lest]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(f[now][lest]!=<span class="number">-1</span>) <span class="keyword">return</span> f[now][lest];</span><br><span class="line">ch[now][lest] = <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(now==n&amp;&amp;lest==<span class="number">0</span>) sum++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head1[now];i;i=edge1[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge1[i].to;</span><br><span class="line"><span class="keyword">if</span>(!c[v]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(dis1[v]+lest-dis1[now]-edge1[i].w&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> val = <span class="built_in">dfs</span>(v,dis1[v]-dis1[now]+lest-edge1[i].w);</span><br><span class="line"><span class="keyword">if</span>(val==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">sum+=val;</span><br><span class="line">sum%=p;</span><br><span class="line">&#125;</span><br><span class="line">f[now][lest] = sum;</span><br><span class="line">ch[now][lest] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> sum;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------------dfs</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;p;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line"><span class="built_in">add1</span>(u,v,w);</span><br><span class="line"><span class="built_in">add2</span>(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dij1</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dij2</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis1[i]+dis2[i]&gt;k+dis1[n]) <span class="keyword">continue</span>;</span><br><span class="line">c[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="type">int</span> now = <span class="built_in">dfs</span>(<span class="number">1</span>,i);</span><br><span class="line"><span class="keyword">if</span>(now==<span class="number">-1</span>)&#123;</span><br><span class="line">b = <span class="literal">false</span>;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=now;</span><br><span class="line">ans%=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b) cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础数论</title>
      <link href="/2020/10/02/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/"/>
      <url>/2020/10/02/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="1-同余及其基本性质"><a href="#1-同余及其基本性质" class="headerlink" title="1.同余及其基本性质"></a>1.同余及其基本性质</h2><p>1.$a\equiv b\pmod{m}-&gt;ac \equiv bc\pmod{m}$</p><p>2.$a\equiv b\pmod{m},c\equiv d\pmod{m}-&gt;a+b \equiv b+d\pmod{m}$</p><p>3.$a\equiv b\pmod{m},c\equiv d\pmod{m}-&gt;ab \equiv bd\pmod{m}$</p><p>4.$a\equiv b\pmod{m}-&gt;a^n \equiv b^n\pmod{m}$</p><p>小推理:如果有$a\equiv b\pmod{m}$,对任意多项式$f(x) = r<em>kx^k+r</em>{k-1}x^{k-1}+..+r_1x+r_0$,都有$f(a) = f(b)\pmod{m}$</p><h2 id="2-剩余系"><a href="#2-剩余系" class="headerlink" title="2.剩余系"></a>2.剩余系</h2><p>概念:</p><ul><li><p>设$S \subseteq Z$,如果任意整数都与$S$中正好一个元素关于模$m$同余,则称$S$是模$m$的一个<strong>完全剩余系</strong></p></li><li><p>与$m$互素的数构成的集合称为模$m$的一个<strong>既约剩余系</strong></p></li><li><p><strong>欧拉函数</strong>:$φ(m)$表示所有不大于$m$且与$m$互素的正整数的个数</p></li></ul><p>定理1:$a∈Z$,$m$是正整数,若$(a,m) = 1$那么有$a^{φ(m)}\equiv 1\pmod{m}$——-(<strong>欧拉定理</strong>)</p><p>定理2:如果$a∈Z$,$p$是素数,则$a^p \equiv a\pmod{p}$,特别的,若$P$不整除$a$,则$a^{p-1}\equiv 1 \pmod{p}$——-(<strong>费马小定理</strong>)</p><h3 id="欧拉函数及其一些性质"><a href="#欧拉函数及其一些性质" class="headerlink" title="欧拉函数及其一些性质:"></a>欧拉函数及其一些性质:</h3><ul><li><p>$φ(m) = \prod\limits_{p|m}(1-\dfrac{1}{p})$——-(欧拉函数表达式)</p></li><li><p>当$a$与$b$互质时,$φ(ab) = φ(a)φ(b)$——-(数论函数基本定理)</p></li><li><p>若$p$是质数且$a≥1$,有$φ(m) = p^a - p^{a-1}$</p></li><li><p>$(a,b) = d$,有$φ(ab) = φ(a)φ(b)\dfrac{d}{φ(d)}$</p></li></ul><p>证明:</p><center>\begin{split}\dfrac{φ(ab)}{ab}&=\prod\limits_{p|ab}(1-\dfrac{1}{p})\\&=\dfrac{\prod\limits_{p|a}(1-\dfrac{1}{p})\prod\limits_{p|b}(1-\dfrac{1}{p})}{\prod\limits_{p|d}(1-\dfrac{1}{p})}\\&=\dfrac{\dfrac{φ(a)}{a}\dfrac{φ(b)}{b}}{\dfrac{φ(d)}{d}}\\&=\dfrac{φ(a)φ(b)}{ab}·\dfrac{d}{φ(d)}\end{split}</center><p>因此$φ(ab) = φ(a)φ(b)\dfrac{d}{φ(d)}$</p><p>证毕。</p><ul><li><p>设$p$为质数,若$p|n$且$p^2|n$,则$φ(n) = φ(\dfrac{n}{p})·p$</p></li><li><p>设$p$为质数,若$p|n$且$p^2!|n$,则$φ(n) = φ(\dfrac{n}{p})·(p-1)$</p></li></ul><p><del>其实这玩意当时是我写着练习latex格式用的</del></p><p><del>未来有空或许会补完?</del></p><p>2022/6/30</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1081 开车旅行</title>
      <link href="/2020/10/02/p1081/"/>
      <url>/2020/10/02/p1081/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有$n$个城市,每个城市都有一个海拔$h_i$,两个城市$i,j$之间的距离为$|h_i-h_j|$,现在有两个人$A$和$B$轮流向东开车,$A$每次会选择一个距离第二近的城市,$B$每次会选择一个第一进的城市,当开到最后一个城市或距离超过$x$时停止开车,现在要求:</p><p> 对于一个给定的$x = x_0$,$A$开车距离与$B$开车的距离比值最小,（如果小 $B$ 的行驶路程为 $0$，此时的比值可视为无穷大，且两个无穷大视为相等）,若有多个城市满足,输出海拔最低的那个</p><p>$m$次询问，每次给一个$x$和出发城市$s$,求小$A$开车行驶的总路程数和小$B$开车行驶的总路程数</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>可以发现很多城市下一次的开车决策是不变的,考虑先去把每个城市下一次开到的点预处理出来</p><p>先把所有的值排一次序,建立双向链表</p><p>从$[1,n]$枚举每个城市</p><p>显然离城市$i$最近和次近的城市即为$i-2,i-1,i+1,i+2$中的两个</p><p>每次选完后把该城市删除即可</p><p>先来看第一问</p><p>直接枚举每个点,暴力模拟开车过程肯定是不行的,复杂度过不了</p><p>发现中间很多开车过程都是无用的,考虑倍增优化</p><p>设$f<em>{i,j,0/1}$表示从$j$城市出发,开车$2^i$天,$A/B$先开车开到的城市,$dis</em>{0/1,i,j,0/1}$表示$A/B$从城市$j$出发,开了$2^i$天,$A/B$形式的距离</p><p>根据倍增的性质($2^i = 2^{i-1}×2^{i-1}$),有转移:</p><p>$f<em>{i,j,k} = f</em>{i-1,f(i-1,j,k),k}$ </p><p>$dis<em>{0/1,i,j,k} = dis</em>{0/1,i-1,f<em>{i-1,j,k}}+dis</em>{0/1,i-1,j,k}$  </p><p>注意:$i=1$时前后两天不是同一个人开车,需要特判</p><p>枚举每个点,像$LCA$那样从大到小往前跳即可</p><p>操作2也同理</p><p> <strong>几个坑点</strong></p><ul><li><p>链表中要判定当前位置的前驱和后继不存在的情况</p></li><li><p>$i=1$时要特判</p></li><li><p>比值的除法要转化为乘法,否则会出现一些奇奇怪怪的精度问题</p></li><li><p>注意特判$B$开车距离为$0$时的情况</p></li></ul><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//细节有亿点多</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> now ((i==1)?k^1:k)<span class="comment">//i=1时的特判</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> ansa = <span class="number">1</span>,ansb,best;</span><br><span class="line"><span class="type">int</span> pos[MAXN],n;</span><br><span class="line"><span class="type">int</span> f[<span class="number">30</span>][MAXN][<span class="number">2</span>],dis[<span class="number">2</span>][<span class="number">30</span>][MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> x0,s,x,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cc</span>&#123;</span><br><span class="line"><span class="type">int</span> min1,min2;</span><br><span class="line">&#125;drive[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">c</span>&#123;</span><br><span class="line"><span class="type">int</span> id,pre,next,val;</span><br><span class="line">&#125;city[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(c a,c b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">g</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> id)</span></span>&#123;<span class="comment">//选次大的城市</span></span><br><span class="line"><span class="keyword">if</span>(!a) <span class="keyword">return</span> city[b].id;<span class="comment">//特判不存在的情况</span></span><br><span class="line"><span class="keyword">if</span>(!b) <span class="keyword">return</span> city[a].id;</span><br><span class="line"><span class="keyword">if</span>(city[id].val-city[a].val&lt;=city[b].val-city[id].val)</span><br><span class="line"><span class="keyword">return</span> city[a].id;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> city[b].id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//删除操作</span></span><br><span class="line"><span class="keyword">if</span>(city[x].next) city[city[x].next].pre = city[x].pre;</span><br><span class="line"><span class="keyword">if</span>(city[x].pre) city[city[x].pre].next = city[x].next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(city+<span class="number">1</span>,city+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pos[city[i].id] = i,city[i].next = i+<span class="number">1</span>,city[i].pre = i<span class="number">-1</span>;<span class="comment">//建立链表和映射</span></span><br><span class="line">city[<span class="number">1</span>].pre = <span class="number">0</span>,city[n].next = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> pre = city[pos[i]].pre,next = city[pos[i]].next;</span><br><span class="line"><span class="keyword">if</span>(pre&amp;&amp;(city[pos[i]].val - city[pre].val&lt;=city[next].val-city[pos[i]].val||!next))&#123;</span><br><span class="line">drive[i].min2 = city[pre].id;</span><br><span class="line">drive[i].min1 = <span class="built_in">g</span>(city[pre].pre,next,pos[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">drive[i].min2 = city[next].id;</span><br><span class="line">drive[i].min1 = <span class="built_in">g</span>(pre,city[next].next,pos[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">del</span>(pos[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;city[i].val;</span><br><span class="line">city[i].id = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">prepare</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">if</span>(drive[i].min1)&#123;</span><br><span class="line">f[<span class="number">0</span>][i][<span class="number">0</span>] = drive[i].min1;</span><br><span class="line">dis[<span class="number">0</span>][<span class="number">0</span>][i][<span class="number">0</span>] = <span class="built_in">abs</span>(city[pos[i]].val - city[pos[drive[i].min1]].val);</span><br><span class="line">dis[<span class="number">1</span>][<span class="number">0</span>][i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(drive[i].min2)&#123;</span><br><span class="line">f[<span class="number">0</span>][i][<span class="number">1</span>] = drive[i].min2;</span><br><span class="line">dis[<span class="number">0</span>][<span class="number">0</span>][i][<span class="number">1</span>]= <span class="number">0</span>;</span><br><span class="line">dis[<span class="number">1</span>][<span class="number">0</span>][i][<span class="number">1</span>] = <span class="built_in">abs</span>(city[pos[i]].val - city[pos[drive[i].min2]].val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t = ((<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>)+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;<span class="comment">//转移</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i<span class="number">-1</span>][j][k]) f[i][j][k] = f[i<span class="number">-1</span>][f[i<span class="number">-1</span>][j][k]][now];</span><br><span class="line"><span class="keyword">if</span>(f[i][j][k])&#123;</span><br><span class="line">dis[<span class="number">0</span>][i][j][k] = dis[<span class="number">0</span>][i<span class="number">-1</span>][j][k]+dis[<span class="number">0</span>][i<span class="number">-1</span>][f[i<span class="number">-1</span>][j][k]][now];</span><br><span class="line">dis[<span class="number">1</span>][i][j][k] = dis[<span class="number">1</span>][i<span class="number">-1</span>][j][k]+dis[<span class="number">1</span>][i<span class="number">-1</span>][f[i<span class="number">-1</span>][j][k]][now];</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;x0;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> disa =<span class="number">0</span>,disb = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>,value = x0;</span><br><span class="line"><span class="type">int</span> s = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=t;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[j][s][k]&amp;&amp;value&gt;=dis[<span class="number">0</span>][j][s][k]+dis[<span class="number">1</span>][j][s][k])&#123;<span class="comment">//倍增跳</span></span><br><span class="line">value-=dis[<span class="number">0</span>][j][s][k]+dis[<span class="number">1</span>][j][s][k];</span><br><span class="line">disa+=dis[<span class="number">0</span>][j][s][k],disb+=dis[<span class="number">1</span>][j][s][k];</span><br><span class="line"><span class="keyword">if</span>(!j) k^=<span class="number">1</span>;</span><br><span class="line">s = f[j][s][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!disb) disa = <span class="number">1</span>;<span class="comment">//disb为0时,比值为无限大</span></span><br><span class="line"><span class="keyword">if</span>(disa*ansb&lt;disb*ansa)&#123;<span class="comment">//除转乘</span></span><br><span class="line">ansa = disa,ansb = disb,best = i;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(disa*ansb==disb*ansa&amp;&amp;city[pos[i]].val&gt;city[pos[best]].val)&#123;<span class="comment">//选海拔低的那个点</span></span><br><span class="line">ansa = disa,ansb = disb,best = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;best&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="type">int</span> x0,s;</span><br><span class="line">cin&gt;&gt;s&gt;&gt;x0;</span><br><span class="line"><span class="type">int</span> disa =<span class="number">0</span>,disb = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>,value = x0;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=t;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[j][s][k]&amp;&amp;value&gt;=dis[<span class="number">0</span>][j][s][k]+dis[<span class="number">1</span>][j][s][k])&#123;</span><br><span class="line">value-=dis[<span class="number">0</span>][j][s][k]+dis[<span class="number">1</span>][j][s][k];</span><br><span class="line">disa+=dis[<span class="number">0</span>][j][s][k],disb+=dis[<span class="number">1</span>][j][s][k];</span><br><span class="line"><span class="keyword">if</span>(!j) k^=<span class="number">1</span>;</span><br><span class="line">s = f[j][s][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;disa&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;disb&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1450 [HAOI2008]硬币购物</title>
      <link href="/2020/09/30/p1450/"/>
      <url>/2020/09/30/p1450/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有 $4$ 种硬币。面值分别为 $c_1,c_2,c_3,c_4$</p><p>现在有$d_i$枚 $i$ 种硬币,要买一个价值为$s$的商品,求购买方案总数</p><p>$s≤10^5$ </p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>容斥$+dp$</p><p>挺nb的一道$dp$</p><p>如果直接做一次多重背包,显然$T$飞</p><p>通过观察可以发现, 总方案数$=$无硬币数量限制的方案总数$-$不合法的方案数</p><h4 id="对于无硬币数量限制的方案"><a href="#对于无硬币数量限制的方案" class="headerlink" title="对于无硬币数量限制的方案:"></a>对于无硬币数量限制的方案:</h4><p>设$f[i]$表示无硬币数量限制时买$i$元钱的物品有多少种购买方法</p><p>直接上完全背包的板子即可</p><h4 id="对于不合法的方案"><a href="#对于不合法的方案" class="headerlink" title="对于不合法的方案:"></a>对于不合法的方案:</h4><p>一个方案不合法,当且仅当他花了$d_i$以上个硬币</p><p>方案数即为$f<a href="s≥(d_i+1">s - (d_i+1)×c_i</a>×c<em>i)$,将答案减去$\sum</em>{i=1} ^4f<a href="s≥(d_i+1">s - (d_i+1)×c_i</a>×c_i)$即可</p><p>但由于两种方案间可能会有交集,会将两个方案的交集多减一次,需要容斥</p><p>对于任意两个方案集合$N$和$M$,有:</p><p>$N∩M = N+M-N∪M =f[s - (d_N+1)×c_N -(d_M+1)×c_M]$</p><p>将两种方案数的交集重新加进答案即可</p><p><img src="https://img2020.cnblogs.com/blog/2092833/202009/2092833-20200930224735277-917935686.png" alt=""></p><p>同时,由于交集之间可能还会有交集,又会加重,需要再次减去交集和交集间的交集,方法和前面的类似,以此类推</p><p>使用二进制枚举子集或直接手动枚举每种情况即可</p><h2 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ie(i) ((d[i]+1)*c[i])</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100000</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="type">int</span> f[MAXN+<span class="number">10</span>],n,d[<span class="number">10</span>],c[<span class="number">10</span>],m;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) cin&gt;&gt;c[i];</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=c[i];j&lt;=MAXN;j++)</span><br><span class="line">f[j]+=f[j-c[i]];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/*if(s&gt;=ie(1)) ans-=f[s-ie(1)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(2)) ans-=f[s-ie(2)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(3)) ans-=f[s-ie(3)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(4)) ans-=f[s-ie(4)];</span></span><br><span class="line"><span class="comment">      if(s&gt;=ie(1)+ie(2)) ans+=f[s-ie(1)-ie(2)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(1)+ie(3)) ans+=f[s-ie(1)-ie(3)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(1)+ie(4)) ans+=f[s-ie(1)-ie(4)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(2)+ie(3)) ans+=f[s-ie(2)-ie(3)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(2)+ie(4)) ans+=f[s-ie(2)-ie(4)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(3)+ie(4)) ans+=f[s-ie(3)-ie(4)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(1)+ie(2)+ie(4)) ans-=f[s-ie(1)-ie(2)-ie(4)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(1)+ie(2)+ie(3)) ans-=f[s-ie(1)-ie(2)-ie(3)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(1)+ie(3)+ie(4)) ans-=f[s-ie(1)-ie(3)-ie(4)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(2)+ie(3)+ie(4)) ans-=f[s-ie(2)-ie(3)-ie(4)];</span></span><br><span class="line"><span class="comment">  if(s&gt;=ie(1)+ie(2)+ie(3)+ie(4)) ans+=f[s-ie(1)-ie(2)-ie(3)-ie(4)];*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++) cin&gt;&gt;d[j];</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line">ans = f[m];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">1</span>;s&lt;=<span class="number">15</span>;s++)&#123;</span><br><span class="line"><span class="type">int</span> now = m, k=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> sub = s,j=<span class="number">1</span>;sub;sub&gt;&gt;=<span class="number">1</span>,j++)</span><br><span class="line"><span class="keyword">if</span>(sub&amp;<span class="number">1</span>) k^=<span class="number">1</span>,now-=<span class="built_in">ie</span>(j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(now&gt;=<span class="number">0</span>) k?ans-=f[now]:ans+=f[now];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3891 [GDOI2014]采集资源</title>
      <link href="/2020/09/29/p3891/"/>
      <url>/2020/09/29/p3891/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有$m$块钱,$n$种苦工,每个苦工都有一个购入值$a_i$和每秒收入$b_i$,求让总钱数达到$t$的最少时间</p><p>$n≤100，m,t≤1000, a_i,b_i≤2^{31}$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>考虑到每秒钟的决策和花费金钱数及当前每秒收入量有关,且这里的<strong>每秒收入量数值较大</strong>,不妨设$f(i,j)$表示在前$i$秒总钱数为$j$时的每秒收入量</p><p>设该秒花费的钱数为$k$,花$k$元钱能买到的最大收入量为$v_k$,有显然的转移: </p><center>$f(i,j) = max(f(i-1,j+k-f(i-1,j+k)-v_k)+v_k)$</center><p>总钱数达到$t$时输出$i$即可</p><p>小坑点:初始钱数大于t时直接输出0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xcxc82 2021/7/30</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1010</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;<span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,t;</span><br><span class="line"><span class="type">int</span> a[MAXN],b[MAXN];</span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN],g[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>(),t = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(m&gt;=t)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i] =<span class="built_in">read</span>(),b[i] = <span class="built_in">read</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">-1</span>,<span class="built_in">sizeof</span>(g));</span><br><span class="line">g[<span class="number">0</span>] = <span class="number">0</span>,f[<span class="number">0</span>][m] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=a[i];j&lt;=<span class="number">1000</span>;j++)&#123;</span><br><span class="line">g[j] = <span class="built_in">max</span>(g[j],g[j-a[i]]+b[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=t;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i][j]!=<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=j;k++)&#123;</span><br><span class="line">f[i+<span class="number">1</span>][j-k+g[k]+f[i][j]] = <span class="built_in">max</span>(g[k]+f[i][j],f[i+<span class="number">1</span>][j-k+g[k]+f[i][j]]);</span><br><span class="line"><span class="keyword">if</span>(j-k+g[k]+f[i][j]&gt;=t)&#123;</span><br><span class="line">cout&lt;&lt;i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构于2021/7/30</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>splay学习笔记</title>
      <link href="/2020/09/26/splay%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/09/26/splay%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>一种二叉树的树形数据结构，其定义如下：</p><ul><li><p>左子树上的所有节点的权值均小于其根节点的权值</p></li><li><p>右子树上的所有节点的权值均大于其根节点的权值</p></li><li><p>二叉搜索树的左右子树均为二叉搜索树</p></li></ul><h1 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>一种自平衡二叉搜索树，通过不断将某个节点旋转到根节点,使得整棵树仍然满足二叉查找树的性质，且保持平衡而不至于退化为链</p><h3 id="维护的信息"><a href="#维护的信息" class="headerlink" title="维护的信息"></a>维护的信息</h3><div class="table-container"><table><thead><tr><th style="text-align:right">$root$</th><th style="text-align:right">$tot$</th><th style="text-align:right">$fa[i]$</th><th style="text-align:right">$child[i][0/1]$</th><th style="text-align:right">$val[i]$</th><th style="text-align:right">$cnt[i]$</th><th style="text-align:right">$size[i]$</th></tr></thead><tbody><tr><td style="text-align:right">根节点</td><td style="text-align:right">节点总数</td><td style="text-align:right">父亲</td><td style="text-align:right">左右儿子</td><td style="text-align:right">点权</td><td style="text-align:right">出现次数</td><td style="text-align:right">子树大小</td></tr></tbody></table></div><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li><p>$update(x)$ 更新$x$节点的$size$</p></li><li><p>$clear(x)$ 摧毁节点$x$</p></li><li><p>$get(x)$ 判断$x$是其父亲的左儿子还是右儿子</p></li></ul><h3 id="code"><a href="#code" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;child[x][<span class="number">0</span>] = child[x][<span class="number">1</span>] = size[x] = fa[x] = val[x] = <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">if</span>(!x) <span class="keyword">return</span>; size[x] = size[child[x][<span class="number">0</span>]]+size[child[x][<span class="number">1</span>]]+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==child[fa[x]][<span class="number">1</span>];&#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2></li></ul><p>为调换$Splay$中父子节点的位置,我们使用旋转操作,将一个节点向上移动一个位置,并保证:</p><ul><li><p>整棵$Splay$的中序遍历不变</p></li><li><p>受影响的节点维护的信息依然正确有效</p></li><li><p>$root$必须指向旋转后的根节点</p></li></ul><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p><img src="https://img2020.cnblogs.com/blog/2092833/202009/2092833-20200926185814991-1893107179.gif" alt=""></p><p>$Splay$中的旋转分为两种,左旋和右旋,这里以右旋为例:</p><p>旋转分为四个步骤$:$</p><p>(假设需要旋转的节点为$x$,其父亲为$y$)</p><p>$1.$将$y$的左儿子指向$x$的右儿子,且$x$的右儿子的父亲指向$y$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">child[y][<span class="number">0</span>] = child[x][<span class="number">1</span>];</span><br><span class="line">fa[child[x][<span class="number">1</span>]] = y;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$2.$将$x$的右儿子指向$y$，且$y$的父亲指向$x$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">child[x][<span class="number">1</span>] = y;</span><br><span class="line">fa[y] = x;</span><br></pre></td></tr></table></figure><p>$3.$如果$y$还有父亲$z$,将$y$原来在$z$中所在的位置指向$x$,且$x$的父亲指向$y$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fa[x] = z;</span><br><span class="line">child[z][y==child[z][<span class="number">1</span>]] = x;</span><br></pre></td></tr></table></figure><p>$4.$更新$x$和$y$的$size$</p><h3 id="code-1"><a href="#code-1" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> y = fa[x],z=fa[y];</span><br><span class="line"><span class="type">int</span> chy = <span class="built_in">get</span>(x),chx = chy^<span class="number">1</span>;</span><br><span class="line">child[y][chy] = child[x][chx];</span><br><span class="line">fa[child[x][chx]] = y;</span><br><span class="line">child[x][chx] = y;</span><br><span class="line">fa[y] = x;</span><br><span class="line">fa[x] = z;</span><br><span class="line"><span class="keyword">if</span>(z) child[z][y==child[z][<span class="number">1</span>]] = x;</span><br><span class="line"><span class="built_in">update</span>(y),<span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="Splay-操作"><a href="#Splay-操作" class="headerlink" title="$Splay$操作"></a>$Splay$操作</h2></li></ul><p>$Splay$规定,每访问一个节点后,都要强制将该节点旋转到根的位置</p><h3 id="具体步骤-1"><a href="#具体步骤-1" class="headerlink" title="具体步骤"></a>具体步骤</h3><p>为保证不退化成链,$Splay$操作一共分三步</p><p>$1.$如果父节点为目标位置,则向上旋转</p><p>$2.$如果<strong>当前节点与父节点的“关系”和父节点与祖父节点的“关系”相同</strong>，则先旋转父节点，再旋转自身</p><p>$3.$如果不满足以上条件,则将自身连续旋转两次</p><p>重复以上操作,直到旋转到根</p><h3 id="code-2"><a href="#code-2" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> goal)</span></span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> f; (f=fa[x])!=goal; <span class="built_in">rotate</span>(x))&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[f]!=goal) <span class="built_in">rotate</span>(<span class="built_in">get</span>(x)==<span class="built_in">get</span>(f)?f:x);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> (!goal) root=x;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2></li></ul><p>设插入的值为$k$</p><ul><li>若树为空树,直接插入根</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!root)&#123;</span><br><span class="line">val[++tot] = k;</span><br><span class="line">cnt[tot]++;</span><br><span class="line">root = tot;</span><br><span class="line"><span class="built_in">update</span>(root);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>否则,根据二叉搜索树的性质向下查找,直到查找到权值等于$k$的节点或空节点</li></ul><p>同时需要将该节点$Splay$到根的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> now = root,f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(val[now]==k)&#123;</span><br><span class="line">cnt[now]++;</span><br><span class="line"><span class="built_in">update</span>(now);</span><br><span class="line"><span class="built_in">update</span>(f);</span><br><span class="line"><span class="built_in">Splay</span>(now);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">f = now;</span><br><span class="line">now = child[now][val[now]&lt;k];</span><br><span class="line"><span class="keyword">if</span>(!now)&#123;</span><br><span class="line">val[++tot] = k;</span><br><span class="line">cnt[tot]++;</span><br><span class="line">fa[tot] = f;</span><br><span class="line">child[f][val[f]&lt;k] = tot;</span><br><span class="line"><span class="built_in">update</span>(tot);</span><br><span class="line"><span class="built_in">update</span>(f);</span><br><span class="line"><span class="built_in">Splay</span>(tot);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="排名"><a href="#排名" class="headerlink" title="排名"></a>排名</h2></li><li><h3 id="查询给定值的排名"><a href="#查询给定值的排名" class="headerlink" title="查询给定值的排名"></a>查询给定值的排名</h3><p>设$x$为需要查询的值</p></li></ul><p>根据二叉搜索树的性质:</p><ul><li><p>若$x$比当前节点的权值小,向左子树查找</p></li><li><p>若$x$比当前节点的权值大，将答案$ans$加上左子树的$size$和当前节点$cnt$的大小,向其右子树查找。</p></li><li><p>若$x$与当前节点的权值相同,返回$ans+1$</p></li></ul><h3 id="code-3"><a href="#code-3" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">rank</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>,now = root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(k&lt;val[now]) now = child[now][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans+=size[child[now][<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">if</span>(k==val[now])&#123;</span><br><span class="line"><span class="built_in">Splay</span>(now);</span><br><span class="line"><span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=cnt[now];</span><br><span class="line">now = child[now][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="查询给定排名的值"><a href="#查询给定排名的值" class="headerlink" title="查询给定排名的值"></a>查询给定排名的值</h3></li></ul><p>设$k$为剩余排名,根据二叉搜索树的性质:</p><ul><li><p>若$k$小于左子树的$size$且左子树非空,向左子树查找</p></li><li><p>否则将$k$减去左子树的大小和根的$cnt$</p><p>若此时$k$的值小于等于$0$,返回根节点的权值</p><p>否则继续向右子树查找</p><h3 id="code-4"><a href="#code-4" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now = root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(child[now][<span class="number">0</span>]&amp;&amp;k&lt;=size[child[now][<span class="number">0</span>]])&#123;</span><br><span class="line">now = child[now][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">k-=cnt[now]+size[child[now][<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">if</span>(k&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">Splay</span>(now);</span><br><span class="line"><span class="keyword">return</span> val[now];</span><br><span class="line">&#125;</span><br><span class="line">now = child[now][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="前驱-amp-amp-后继"><a href="#前驱-amp-amp-后继" class="headerlink" title="前驱&amp;&amp;后继"></a>前驱&amp;&amp;后继</h2></li></ul><p>一个数的前驱定义为小于$x$的最大的数</p><p>后继定义为大于$x$的最小的数</p><p>显然,一个数的前驱是其左子树中最靠右的节点,后继是其右子树的最靠左的节点</p><p>将$x$旋转到根后查询即可</p><h3 id="code-5"><a href="#code-5" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="type">int</span> now = child[root][<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">while</span>(child[now][<span class="number">1</span>]) now = child[now][<span class="number">1</span>];</span><br><span class="line">     <span class="keyword">return</span> now;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> now = child[root][<span class="number">1</span>];</span><br><span class="line">   <span class="keyword">while</span>(child[now][<span class="number">0</span>]) now = child[now][<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">return</span> now;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2></li></ul><p>首先将要删除的节点$x$旋转到根的位置</p><ul><li>如果有不止一个$x$,那么直接将$cnt[x]$减$1$即可</li></ul><p>否则</p><ul><li><p>若没有儿子节点,直接将当前节点清空</p></li><li><p>若只有一个儿子,清空当前节点,再把根节点跟新为儿子</p></li><li><p>若有两个儿子,先将$x$的前驱旋转到根,并将$x$的右子树连接到$x$的前驱上</p></li></ul><h3 id="code-6"><a href="#code-6" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="built_in">rank</span>(k);</span><br><span class="line"><span class="keyword">if</span>(cnt[root]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">cnt[root]--;</span><br><span class="line"><span class="built_in">update</span>(root);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!child[root][<span class="number">0</span>]&amp;&amp;!child[root][<span class="number">1</span>])&#123;</span><br><span class="line"><span class="built_in">clear</span>(root);</span><br><span class="line">root = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!child[root][<span class="number">0</span>])&#123;</span><br><span class="line"><span class="type">int</span> now = root;</span><br><span class="line">root = child[root][<span class="number">1</span>];</span><br><span class="line">fa[root] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">clear</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!child[root][<span class="number">1</span>])&#123;</span><br><span class="line"><span class="type">int</span> now = root;</span><br><span class="line">root = child[root][<span class="number">0</span>];</span><br><span class="line">fa[root] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">clear</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> now = root,x = <span class="built_in">pre</span>();</span><br><span class="line">fa[child[now][<span class="number">1</span>]] = x;</span><br><span class="line">child[x][<span class="number">1</span>] = child[now][<span class="number">1</span>];</span><br><span class="line"><span class="built_in">clear</span>(now);</span><br><span class="line"><span class="built_in">update</span>(root);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="type">int</span> child[MAXN][<span class="number">2</span>],size[MAXN],root,tot,fa[MAXN],val[MAXN],cnt[MAXN];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ci(Q) scanf(<span class="string">&quot;%d&quot;</span>,&amp;Q)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">splay</span>&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;size[x] = size[child[x][<span class="number">0</span>]]+size[child[x][<span class="number">1</span>]]+cnt[x];&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==child[fa[x]][<span class="number">1</span>];&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;fa[x] = child[x][<span class="number">0</span>] = child[x][<span class="number">1</span>] = size[x] = val[x] = cnt[x] = <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> y = fa[x] , z = fa[y];</span><br><span class="line"><span class="type">int</span> chy = <span class="built_in">pd</span>(x) ,chx = chy^<span class="number">1</span>;</span><br><span class="line">child[y][chy] = child[x][chx];</span><br><span class="line">fa[child[x][chx]] = y;</span><br><span class="line">child[x][chx] = y,fa[y] = x,fa[x] = z;</span><br><span class="line"><span class="keyword">if</span>(z) child[z][y==child[z][<span class="number">1</span>]] = x;</span><br><span class="line"><span class="built_in">update</span>(x),<span class="built_in">update</span>(y);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Splay</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> f = fa[x];f=fa[x],f;<span class="built_in">rotate</span>(x))&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[f]) <span class="built_in">rotate</span>(<span class="built_in">pd</span>(x)==<span class="built_in">pd</span>(f)?f:x);</span><br><span class="line">&#125;</span><br><span class="line">root = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!root)&#123;</span><br><span class="line">val[++tot] = k;</span><br><span class="line">cnt[tot]++;</span><br><span class="line">root = tot;</span><br><span class="line"><span class="built_in">update</span>(root);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> now = root,f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(val[now]==k)&#123;</span><br><span class="line">cnt[now]++;</span><br><span class="line"><span class="built_in">update</span>(now);</span><br><span class="line"><span class="built_in">update</span>(f);</span><br><span class="line"><span class="built_in">Splay</span>(now);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">f = now;</span><br><span class="line">now = child[now][val[now]&lt;k];</span><br><span class="line"><span class="keyword">if</span>(!now)&#123;</span><br><span class="line">val[++tot] = k;</span><br><span class="line">cnt[tot]++;</span><br><span class="line">fa[tot] = f;</span><br><span class="line">child[f][val[f]&lt;k] = tot;</span><br><span class="line"><span class="built_in">update</span>(tot);</span><br><span class="line"><span class="built_in">update</span>(f);</span><br><span class="line"><span class="built_in">Splay</span>(tot);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rank</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>,now = root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(k&lt;val[now]) now = child[now][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans+=size[child[now][<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">if</span>(k==val[now])&#123;</span><br><span class="line"><span class="built_in">Splay</span>(now);</span><br><span class="line"><span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=cnt[now];</span><br><span class="line">now = child[now][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now = root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(child[now][<span class="number">0</span>]&amp;&amp;k&lt;=size[child[now][<span class="number">0</span>]])&#123;</span><br><span class="line">now = child[now][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">k-=cnt[now]+size[child[now][<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">if</span>(k&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">Splay</span>(now);</span><br><span class="line"><span class="keyword">return</span> val[now];</span><br><span class="line">&#125;</span><br><span class="line">now = child[now][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now = child[root][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span>(child[now][<span class="number">1</span>]) now = child[now][<span class="number">1</span>];</span><br><span class="line"><span class="built_in">Splay</span>(now);</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now = child[root][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(child[now][<span class="number">0</span>]) now = child[now][<span class="number">0</span>];</span><br><span class="line"><span class="built_in">Splay</span>(now);</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="built_in">rank</span>(k);</span><br><span class="line"><span class="keyword">if</span>(cnt[root]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">cnt[root]--;</span><br><span class="line"><span class="built_in">update</span>(root);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!child[root][<span class="number">0</span>]&amp;&amp;!child[root][<span class="number">1</span>])&#123;</span><br><span class="line"><span class="built_in">clear</span>(root);</span><br><span class="line">root = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!child[root][<span class="number">0</span>])&#123;</span><br><span class="line"><span class="type">int</span> now = root;</span><br><span class="line">root = child[root][<span class="number">1</span>];</span><br><span class="line">fa[root] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">clear</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!child[root][<span class="number">1</span>])&#123;</span><br><span class="line"><span class="type">int</span> now = root;</span><br><span class="line">root = child[root][<span class="number">0</span>];</span><br><span class="line">fa[root] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">clear</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> now = root,x = <span class="built_in">pre</span>();</span><br><span class="line">fa[child[now][<span class="number">1</span>]] = x;</span><br><span class="line">child[x][<span class="number">1</span>] = child[now][<span class="number">1</span>];</span><br><span class="line"><span class="built_in">clear</span>(now);</span><br><span class="line"><span class="built_in">update</span>(root);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,op,x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;op,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>) tree.<span class="built_in">insert</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) tree.<span class="built_in">del</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tree.<span class="built_in">rank</span>(x));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tree.<span class="built_in">kth</span>(x));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">5</span>) tree.<span class="built_in">insert</span>(x),<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,val[tree.<span class="built_in">pre</span>()]),tree.<span class="built_in">del</span>(x);</span><br><span class="line"><span class="keyword">else</span> tree.<span class="built_in">insert</span>(x),<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,val[tree.<span class="built_in">next</span>()]),tree.<span class="built_in">del</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文艺平衡树-Splay维护区间信息"><a href="#文艺平衡树-Splay维护区间信息" class="headerlink" title="文艺平衡树(Splay维护区间信息)"></a>文艺平衡树(Splay维护区间信息)</h2><h3 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h3><p>给一个长度为$n$的序列,序列中第$a_i$项的初始值为$i$</p><p>有$m$次区间翻转操作,输出经过 $m$ 次变换后的结果</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>按点的编号建立一颗$Splay$</p><p>每次翻转时</p><p>先将$val = l-1$和$val = r+1$的节点分别转到根和根的儿子节点</p><p>根据$Splay$的性质,整颗树的中序遍历不变</p><p>因此只需要将$child[child[root][1]][0]$下的所有子树交换</p><p>通过给打懒标记的方式来实现交换操作即可</p><h3 id="code-7"><a href="#code-7" class="headerlink" title="$code$"></a>$code$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">114514191</span>;</span><br><span class="line"><span class="type">int</span> child[MAXN][<span class="number">2</span>],a[MAXN],size[MAXN],root,tot,fa[MAXN],val[MAXN],cnt[MAXN],tag[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span>&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[x]) <span class="keyword">return</span>;</span><br><span class="line">tag[child[x][<span class="number">1</span>]]^=<span class="number">1</span>;</span><br><span class="line">tag[child[x][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap</span>(child[x][<span class="number">1</span>],child[x][<span class="number">0</span>]);</span><br><span class="line">tag[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;size[x] = size[child[x][<span class="number">0</span>]]+size[child[x][<span class="number">1</span>]]+cnt[x];&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==child[fa[x]][<span class="number">1</span>];&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;fa[x] = child[x][<span class="number">0</span>] = child[x][<span class="number">1</span>] = size[x] = val[x] = cnt[x] = <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> y = fa[x] , z = fa[y];</span><br><span class="line"><span class="type">int</span> chy = <span class="built_in">pd</span>(x) ,chx = chy^<span class="number">1</span>;</span><br><span class="line">child[y][chy] = child[x][chx];</span><br><span class="line">fa[child[x][chx]] = y;</span><br><span class="line">child[x][chx] = y,fa[y] = x,fa[x] = z;</span><br><span class="line"><span class="keyword">if</span>(z) child[z][y==child[z][<span class="number">1</span>]] = x;</span><br><span class="line"><span class="built_in">update</span>(x),<span class="built_in">update</span>(y);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> now = ++tot;</span><br><span class="line">fa[now] = f;</span><br><span class="line">cnt[now]++;</span><br><span class="line">val[now] = a[mid];</span><br><span class="line">    size[now]++;</span><br><span class="line">    child[now][<span class="number">0</span>] = <span class="built_in">build</span>(l,mid<span class="number">-1</span>,now);</span><br><span class="line">    child[now][<span class="number">1</span>] = <span class="built_in">build</span>(mid+<span class="number">1</span>,r,now);</span><br><span class="line">    <span class="built_in">update</span>(now);</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> goal)</span></span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> f; (f=fa[x])!=goal; <span class="built_in">rotate</span>(x))&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[f]!=goal) <span class="built_in">rotate</span>(<span class="built_in">pd</span>(x)==<span class="built_in">pd</span>(f)?f:x);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span> (!goal) root=x;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now = root;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(now);</span><br><span class="line"><span class="keyword">if</span>(child[now][<span class="number">0</span>]&amp;&amp;k&lt;=size[child[now][<span class="number">0</span>]])&#123;</span><br><span class="line">now = child[now][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> t = cnt[now]+size[child[now][<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">if</span>(k&lt;=t)&#123;</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line">k-=t;</span><br><span class="line">now = child[now][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"> <span class="type">int</span> l = <span class="built_in">kth</span>(x<span class="number">-1</span>),r = <span class="built_in">kth</span>(y+<span class="number">1</span>);</span><br><span class="line"> <span class="built_in">splay</span>(l,<span class="number">0</span>),<span class="built_in">splay</span>(r,l);</span><br><span class="line"> <span class="type">int</span> now = child[root][<span class="number">1</span>];</span><br><span class="line"> now = child[now][<span class="number">0</span>];</span><br><span class="line"> tag[now]^=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"> <span class="built_in">pushdown</span>(x);</span><br><span class="line"> <span class="keyword">if</span>(child[x][<span class="number">0</span>]) <span class="built_in">dfs</span>(child[x][<span class="number">0</span>]);</span><br><span class="line"> <span class="keyword">if</span>(val[x]!=inf&amp;&amp;val[x]!=-inf) cout&lt;&lt;val[x]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"> <span class="keyword">if</span>(child[x][<span class="number">1</span>]) <span class="built_in">dfs</span>(child[x][<span class="number">1</span>]); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;tree; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">a[<span class="number">1</span>] = -inf,a[n+<span class="number">2</span>] = inf;<span class="comment">//给区间[1,n]的序列翻转</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i+<span class="number">1</span>] = i;</span><br><span class="line">root = tree.<span class="built_in">build</span>(<span class="number">1</span>,n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">tree.<span class="built_in">reverse</span>(l+<span class="number">1</span>,r+<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line">tree.<span class="built_in">dfs</span>(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://oi-wiki.org/ds/splay/">splay-oi-wiki</a></p><p><a href="https://oi.men.ci/splay-notes-1/">Splay 学习笔记（一）-Menci</a></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>p4135 作诗</title>
      <link href="/2020/09/20/p4135/"/>
      <url>/2020/09/20/p4135/</url>
      
        <content type="html"><![CDATA[<h1 id="P4135-作诗"><a href="#P4135-作诗" class="headerlink" title="P4135 作诗"></a>P4135 作诗</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给定 $n$ 个不大于 $c$ 的正整数$a_1…a_n$ 和 $m$ 组询问，每次问区间$[l,r]$中有多少个数出现正偶数次。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>分块入门题</p><p>设$sum[i][j]$为前$i$个块中第$j$个元素出现的个数</p><p>$ans[i][j]$为第$i$个块到第$j$个块中出现正偶数次的数的个数</p><p>先来考虑如何预处理出$ans[i][j]$</p><p>考虑每个新进来的数对$a[i][j]$的贡献<br>若新进来的数使该数在这几个区间中的出现次数变成了奇数,则答案减一,反之加一</p><p>对于查询</p><p>若$l,r$在同一个块内,直接暴力查询即可</p><p>若$l,r$不在同一个块内:</p><p>对于完整块,其对答案的贡献即为$ans[l+1][r-1]$</p><p>对于不完整块,暴力统计其块内每个数出现的个数,再加上$sum[r-1][a[i]]-sum[l][a[i]]$</p><p>若总出现次数为奇数,则答案加一,反之减一</p><p>复杂度$O(n \sqrt n)$</p><details><summary><font size=4 font face="comic sans MS">code</font></summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;inline&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fgcse&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fgcse-lm&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fipa-sra&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-ftree-pre&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-ftree-vrp&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fpeephole2&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-ffast-math&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fsched-spec&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;unroll-loops&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-falign-jumps&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-falign-loops&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-falign-labels&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fdevirtualize&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fcaller-saves&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fcrossjumping&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fthread-jumps&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-funroll-loops&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fwhole-program&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-freorder-blocks&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fschedule-insns&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;inline-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-ftree-tail-merge&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fschedule-insns2&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fstrict-aliasing&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fstrict-overflow&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-falign-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fcse-skip-blocks&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fcse-follow-jumps&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fsched-interblock&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fpartial-inlining&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;no-stack-protector&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-freorder-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-findirect-inlining&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fhoist-adjacent-loads&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-frerun-cse-after-loop&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;inline-small-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-finline-small-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-ftree-switch-conversion&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-foptimize-sibling-calls&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fexpensive-optimizations&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-funsafe-loop-optimizations&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;inline-functions-called-once&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fdelete-null-pointer-checks&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;</span><br><span class="line"><span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> now (sum[y-1][a[i]]-sum[x][a[i]]+b[a[i]])</span></span><br><span class="line"><span class="type">int</span> a[MAXN],belong[MAXN],t[MAXN],n,m,st[MAXN],ed[MAXN],tag[MAXN],num,sum[<span class="number">400</span>][MAXN],ans[<span class="number">400</span>][<span class="number">400</span>],b[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x = belong[l];</span><br><span class="line"><span class="type">int</span> y = belong[r];</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">b[a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!b[a[i]]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b[a[i]]%<span class="number">2</span>==<span class="number">0</span>) res++;</span><br><span class="line">b[a[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">res = ans[x+<span class="number">1</span>][y<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=ed[x];i++)&#123;</span><br><span class="line">b[a[i]]++;</span><br><span class="line"><span class="keyword">if</span>(now&gt;<span class="number">1</span>&amp;&amp;(now&amp;<span class="number">1</span>)) res--;</span><br><span class="line"><span class="keyword">if</span>(now%<span class="number">2</span>==<span class="number">0</span>) res++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=st[y];i&lt;=r;i++)&#123;</span><br><span class="line">b[a[i]]++;</span><br><span class="line"><span class="keyword">if</span>(now&gt;<span class="number">1</span>&amp;&amp;(now&amp;<span class="number">1</span>)) res--;</span><br><span class="line"><span class="keyword">if</span>(now%<span class="number">2</span>==<span class="number">0</span>) res++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),num = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size = <span class="built_in">sqrt</span>(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=size;i++) st[i] = (i<span class="number">-1</span>)*size+<span class="number">1</span>,ed[i] = i*size;</span><br><span class="line">ed[size] = n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=st[i];j&lt;=ed[i];j++)&#123;</span><br><span class="line">belong[j] = i;</span><br><span class="line">sum[i][a[j]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=num;j++)&#123;</span><br><span class="line">sum[i][j] += sum[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=st[i];j&lt;=ed[i];j++)&#123;</span><br><span class="line">b[a[j]]++;</span><br><span class="line"><span class="keyword">if</span>(b[a[j]]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b[a[j]]%<span class="number">2</span>==<span class="number">0</span>) ans[i][i]++;</span><br><span class="line"><span class="keyword">else</span> ans[i][i]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=size;j++)&#123;</span><br><span class="line">ans[i][j] = ans[i][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=st[j];k&lt;=ed[j];k++)&#123;</span><br><span class="line">b[a[k]]++;</span><br><span class="line"><span class="keyword">if</span>(b[a[k]]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b[a[k]]%<span class="number">2</span>==<span class="number">0</span>) ans[i][j]++;</span><br><span class="line">    <span class="keyword">else</span> ans[i][j]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in">sizeof</span>(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> A = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">l = <span class="built_in">read</span>(),r=<span class="built_in">read</span>();</span><br><span class="line">l = (l+A)%n+<span class="number">1</span>,r = (r+A)%n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) <span class="built_in">swap</span>(l,r);</span><br><span class="line">A = <span class="built_in">query</span>(l,r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,A);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷⑨月月赛</title>
      <link href="/2020/09/19/%E6%9C%88%E6%9C%88%E8%B5%9B/"/>
      <url>/2020/09/19/%E6%9C%88%E6%9C%88%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<details><summary><font size=4 font face="comic sans MS">T1</font></summary>良心满满的送分水题直接贪心即可</details><hr><details><summary><font size=4 font face="comic sans MS">T2</font></summary>## 大致题意有一个带权方格图,给一个起点$A$,两个终点$B$和$C$,求从$A$到$B$和$C$的两条路径的并集的电阻计量值的和最小。## 分析考虑到不可能有两个分岔口,直接跑三遍最短路,枚举分岔口即可</details><hr><details><summary><font size=4 font face="comic sans MS">T3</font></summary>## T3## 大致题意有 $n$ 节点，每个点都向$[n-1,n-k]$ 中的任意一个点连边。每次可以选择一个连通块权值都减 $1$，求使得所有节点权值都变成 $0$ 的最小次数的数学期望。## 分析把树换成链,就成了一道经典题了 [**P5019 铺设道路**](https://www.luogu.com.cn/problem/P5019)拓展到树上,也就是把前后关系换成了父子关系若一个点的权值比它父亲权值的大,那么在其父亲减完后两点会断开,会增加$a_v - a_u$个操作次数,反之不会增加操作次数对答案的贡献即为:$\dfrac{\sum_{j=i-k}^{i-1} (a_i-a_j)}{k}(a_i>a_j)$对于每个节点,相当于是要求$[max(1,i-k),i-1]$中小于$a_i$的个数,且每个节点能连的点是序列上连续的一段,考虑使用树状数组来维护使用树状数组来维护点数和和权值和即可### 关于T3题目背景#### [【东方MMD】琪露诺想要理解成熟](https://www.bilibili.com/video/BV1iQ4y1M7k2)10.9补[补档](https://www.bilibili.com/video/BV1Bz4y1d7Zy?from=search&seid=4951912842973668234)原作者不知道为啥把视频删了...### 参考资料:[**洛谷9月月赛 题解（模拟+最短路+期望DP+期望DP**）_OceanLiu](https://www.cnblogs.com/Invictus-Ocean/p/13697299.html)[**某古 9 月月赛 I 游记-xiaolilsq**](https://www.cnblogs.com/lsq147/p/13697104.html#%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90)</details><p><details></p><summary><font size=4 font face="comic sans MS">T4</font></summary><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p><strong><a href="https://www.luogu.com.cn/problem/solution/P6835">原题面</a></strong></p><p>有$n$个点，形成一条单链图，并在其中加入$m$条返祖边</p><p>现在从1号节点出发，每次等概率的前往到一个相邻的节点，求走到第$n+1$个点的期望步数</p><p>$n,m≤10^6$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>设$E_{x→y}$表示从$x$点走到$y$点的期望步数，$k_i$表示第$i$个点的返祖边条数</p><p>有转移：</p><center>$E_{x→x+1} = \dfrac{1}{k+1}×1+\dfrac{1}{k+1}×\sum\limits_{(x,y)∈E}E_{y→x+1}+1$</center><center>$= 1+\dfrac{1}{k+1}×\sum\limits_{(x,y)∈E}E_{y→x+1}$</center><p>根据期望的线性性质,有$E<em>{x→y} =\sum\limits</em>{i=x}^{y-1}E_{i→i+1}$,代回原式：</p><center>$E_{x→x+1} = 1+\dfrac{1}{k+1}×\sum\limits_{(x,y)∈E}\sum\limits_{i=y}^{x-1}E_{i→i+1}+\dfrac{k×E_{x→x+1}}{k+1}$</center><center>$E_{x→x+1} = 1+k+\sum\limits_{(x,y)∈E}\sum\limits_{i=y}^{x-1}E_{i→i+1}$</center><p>维护一下前缀和即可,$\sum\limits<em>{i=x}^{y-1}E</em>{i→i+1}$既为所求答案</p><p>时间复杂度$O(n+m)$</p><h2 id="lt-details-gt"><a href="#lt-details-gt" class="headerlink" title="&lt;/details&gt;"></a>&lt;/details&gt;</h2>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2801 教主的魔法</title>
      <link href="/2020/09/19/p2801/"/>
      <url>/2020/09/19/p2801/</url>
      
        <content type="html"><![CDATA[<h1 id="P2801-教主的魔法"><a href="#P2801-教主的魔法" class="headerlink" title="P2801 教主的魔法"></a>P2801 教主的魔法</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个长度为$n$的序列$a_i$,有$m$次操作,操作分为两种$:$</p><ul><li><p>将区间$[l,r]$上的所有数加上$c$</p></li><li><p>查询区间$[l,r]$中小于$c$的数的个数</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>数列分块入门题</p><p>对于查询操作,若$l,r$在同一个块内,直接暴力查询</p><p>反之,若不在同一个块内,则答案由三部分组成:以$l$开头的不完整块,以$r$结尾的不完整块,中间一连串连续的完整快</p><p>由于要查询大于等于$c$的值,考虑开一个数组$t$存块中元素排序后的值</p><p>对于不完整块,直接暴力查询</p><p>对于完整块,在$t$数组中二分查找$c$的值即可</p><p>修改操作也同理</p><p>若$l,r$在同一个块内,直接暴力查询</p><p>若不在一个块内,对于不完整块直接暴力修改,并更新该块在$t$数组中的值</p><p>对于完整块,使用类似于$lazttag$的方式保存即可</p><hr><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>预处理时,需对每个块内元素进行一次排序,复杂度为$O(nlogn)$</p><p>查询时,每次至多暴力修改$2\sqrt n$个元素,对$\sqrt n$个块内二分或排序,复杂度为$O(\sqrt n +\sqrt n log\sqrt n  )$</p><p>总复杂度为$O(\sqrt n +\sqrt n log\sqrt n + nlogn)$</p><details><summary><font size=5 font face="comic sans MS">code</font></summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;</span><br><span class="line"><span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN],belong[MAXN],t[MAXN],n,m,st[MAXN],ed[MAXN],tag[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=st[x];i&lt;=ed[x];i++) t[i] = a[i];</span><br><span class="line"><span class="built_in">sort</span>(t+st[x],t+ed[x]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x = belong[l],y = belong[r];</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) a[i]+=val;</span><br><span class="line">  <span class="built_in">sort</span>(x);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=ed[x];i++) a[i]+=val;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=st[y];i&lt;=r;i++) a[i]+=val;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x+<span class="number">1</span>;i&lt;y;i++) tag[i]+=val;</span><br><span class="line"><span class="built_in">sort</span>(x);</span><br><span class="line"><span class="built_in">sort</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x = belong[l],y = belong[r];</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++) <span class="keyword">if</span>(a[i]+tag[x]&gt;=val) res++;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=ed[x];i++) <span class="keyword">if</span>(a[i]+tag[x]&gt;=val) res++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=st[y];i&lt;=r;i++) <span class="keyword">if</span>(a[i]+tag[y]&gt;=val) res++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x+<span class="number">1</span>;i&lt;y;i++)  res += ed[i]-(<span class="built_in">lower_bound</span>(t+st[i],t+ed[i]+<span class="number">1</span>,val-tag[i])-t)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(),m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> size  = <span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line">st[i] = (i<span class="number">-1</span>)*size+<span class="number">1</span>,ed[i] = i*size;</span><br><span class="line">&#125;</span><br><span class="line">ed[size] = n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=size;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=st[i];j&lt;=ed[i];j++)&#123;</span><br><span class="line">belong[j] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+st[i],a+ed[i]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line">cin&gt;&gt;op;</span><br><span class="line">a = <span class="built_in">read</span>(),b=<span class="built_in">read</span>(),c=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>(a,b,c)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">add</span>(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><strong><a href="https://oi-wiki.org/ds/block-array/">块状数组 - OI Wiki</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF148D Bag of mice</title>
      <link href="/2020/09/13/cf148d/"/>
      <url>/2020/09/13/cf148d/</url>
      
        <content type="html"><![CDATA[<h1 id="CF148D-Bag-of-mice"><a href="#CF148D-Bag-of-mice" class="headerlink" title="CF148D Bag of mice"></a>CF148D Bag of mice</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有$w$只白鼠和$b$只黑鼠 ，$A$和$B$轮流从袋子里抓，谁先抓到白色谁就赢。抓完后会有另一只随机老鼠跑出来。如果两个人都没有抓到白色则$B$赢。$A$先抓，问$A$赢的概率。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>概率$dp$板子题</p><p>设$f[i][j]$表示为袋子里共有$i$只白鼠$j$只黑鼠,$A$获胜的概率</p><p>考虑$f[i][j]$的转移:</p><p>先确定边界,当没有一只白鼠时,$f[0][i] = 0$,全是白鼠时$f[i][0] = 1$</p><ul><li><p>$A$抓了一只白鼠,$A$赢了,概率为$\dfrac{i}{i+j}$</p></li><li><p>$A$抓了一只黑鼠,$B$抓了一只白鼠,$B$硬了,概率为$\dfrac{j}{i+j}×\dfrac{i}{i+j-1}$</p></li><li><p>$A$抓了一只黑鼠,$B$抓了一只黑鼠,跑出来一只白鼠,概率为$\dfrac{j}{i+j}×\dfrac{j-1}{i+j-1}×\dfrac{i}{i+j-2}$,转移到$f[i][j-3]$</p></li><li><p>$A$抓了一只黑鼠,$B$抓了一只黑鼠,跑出来一只黑鼠,概率为$\dfrac{j}{i+j}×\dfrac{j-1}{i+j-1}×\dfrac{j-2}{i+j-2}$,转移到$f[i-1][j-2]$</p></li></ul><p>其中第二种情况不参与计算,只需转移其他三种情况即可</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3010</span>;</span><br><span class="line"><span class="type">double</span> f[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) f[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">f[i][j] += (<span class="type">double</span>)i/(j+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=<span class="number">2</span>&amp;&amp;i&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"> f[i][j]+=(<span class="type">double</span>)j/(j+i)*(j<span class="number">-1</span>)/(j+i<span class="number">-1</span>)*i/(j+i<span class="number">-2</span>)*f[i<span class="number">-1</span>][j<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">f[i][j]+= (<span class="type">double</span>)j/(j+i)*(j<span class="number">-1</span>)/(j+i<span class="number">-1</span>)*(j<span class="number">-2</span>)/(j+i<span class="number">-2</span>)*f[i][j<span class="number">-3</span>]; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.9lf\n&quot;</span>, f[n][m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><strong><a href="https://oi-wiki.org/dp/probability/">概率 $dp$_OI Wiki</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1850 换教室</title>
      <link href="/2020/09/13/p1850/"/>
      <url>/2020/09/13/p1850/</url>
      
        <content type="html"><![CDATA[<h1 id="P1850-换教室"><a href="#P1850-换教室" class="headerlink" title="P1850 换教室"></a>P1850 换教室</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一张$v$个教室$e$条带权边的图,有$n$个时间段,第$i$个时间段在$c_i$号教室上课,可以申请换到$d_i$号教室,成功的概率为$p_i$,上完后要去第$i+1$个时间段的教室上课,有$m$次申请机会,求最小期望路程</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>设$f[i][j][0/1]$表示第$i$个时间段前用了$j$次申请机会,第$i$个时间段申请$/$不申请的最小期望路程</p><p>$w[i][j]$表示第$i$个教室到第$j$个教室的最短路长度</p><hr><ul><li>当前阶段不申请更换:</li></ul><p>前一个状态换:</p><p>$<del>~</del><del>~</del>~~$$f[i][j][0] = f[i-1][j][1]+w[c<em>{i-1}][c</em>{i}]×(1-p<em>{i-1}) + w[d{_i-1}][c</em>{i}]×p_{i-1}$</p><p>前一个状态不换:</p><p>$<del>~</del><del>~</del>~~$$f[i][j][0] = f[i-1][j][0]+w[c_{i-1}][c_i]$</p><p>取两者的$min$即可</p><hr><ul><li>当前状态申请更换:</li></ul><p>前一个状态不换:</p><p>$<del>~</del><del>~</del>~~$$f[i][j][1] = f[i-1][j-1][0]+w[c<em>{i-1}][d</em>{i}]×p<em>{i}+w[c</em>{i-1}][c<em>{i}]×(1-p</em>{i})$</p><p>前一个状态换:</p><p>比较麻烦,有四种可能</p><ul><li><p>$d<em>{i-1}-&gt;c_i$: $k_1 = w[d</em>{i-1}][c<em>{i}]×p</em>{i-1}*(1-p<em>{i})$ $<del>~</del><del>~</del>~,~$ $d</em>{i-1}-&gt;d<em>i$: $k_2 = w[d</em>{i-1}][d<em>{i}]×p</em>{i}×p_{i-1}$</p></li><li><p>$c<em>{i-1}-&gt;c_i$: $k_3 = w[c</em>{i-1}][c<em>{i}]×(1-p</em>{i-1})<em>(1-p<em>{i})$ $~~,~$ $c</em>{i-1}-&gt;d<em>i$: $k_4 = w[c</em>{i-1}][d<em>{i}]×(1-p</em>{i-1})</em>p_{i}$</p></li></ul><p>$<del>~</del><del>~</del>~~$$f[i][j][1] = f[i-1][j-1][1]+k_1+k_2+k_3+k_4$</p><hr><p>答案即为$min(f[n][i][0])$</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1145141919</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;</span><br><span class="line"><span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> c[MAXN],d[MAXN];</span><br><span class="line"><span class="type">int</span> w[MAXN][MAXN];</span><br><span class="line"><span class="type">double</span> f[MAXN][MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="type">double</span> p[MAXN]; </span><br><span class="line"><span class="type">int</span> n,m,v,e;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyed</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=v;k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=v;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=v;j++)</span><br><span class="line">w[i][j] = <span class="built_in">min</span>(w[i][j] , w[i][k]+w[k][j]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">n = <span class="built_in">read</span>(),m=<span class="built_in">read</span>(),v=<span class="built_in">read</span>(),e=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">memset</span>(w,<span class="number">63</span>,<span class="built_in">sizeof</span>(w));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;p[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=e;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v,val;</span><br><span class="line">u = <span class="built_in">read</span>(),v=<span class="built_in">read</span>(),val=<span class="built_in">read</span>();</span><br><span class="line">w[u][v] = w[v][u] = <span class="built_in">min</span>(w[u][v] , val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">floyed</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=v;i++) w[i][i] = w[i][<span class="number">0</span>] = w[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++) f[i][j][<span class="number">0</span>] = f[i][j][<span class="number">1</span>] = <span class="number">1e9</span>;</span><br><span class="line">    </span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="built_in">min</span>(m,i);j++)&#123;</span><br><span class="line">f[i][j][<span class="number">0</span>] = <span class="built_in">min</span>(f[i<span class="number">-1</span>][j][<span class="number">0</span>]+w[c[i<span class="number">-1</span>]][c[i]],f[i<span class="number">-1</span>][j][<span class="number">1</span>]+ w[c[i<span class="number">-1</span>]][c[i]]*(<span class="number">1</span>-p[i<span class="number">-1</span>]) + w[d[i<span class="number">-1</span>]][c[i]]*p[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span><br><span class="line">f[i][j][<span class="number">1</span>] = <span class="built_in">min</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>]+w[c[i<span class="number">-1</span>]][d[i]]*p[i]+w[c[i<span class="number">-1</span>]][c[i]]*(<span class="number">1</span>-p[i]),</span><br><span class="line">f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">1</span>]+w[c[i<span class="number">-1</span>]][d[i]]*(<span class="number">1</span>-p[i<span class="number">-1</span>])*p[i]+</span><br><span class="line">w[c[i<span class="number">-1</span>]][c[i]]*(<span class="number">1</span>-p[i<span class="number">-1</span>])*(<span class="number">1</span>-p[i])+</span><br><span class="line">w[d[i<span class="number">-1</span>]][c[i]]*p[i<span class="number">-1</span>]*(<span class="number">1</span>-p[i])+</span><br><span class="line">w[d[i<span class="number">-1</span>]][d[i]]*p[i]*p[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++) ans = <span class="built_in">min</span>(ans,<span class="built_in">min</span>(f[n][i][<span class="number">0</span>],f[n][i][<span class="number">1</span>])); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1860 新魔法药水</title>
      <link href="/2020/09/12/p1860/"/>
      <url>/2020/09/12/p1860/</url>
      
        <content type="html"><![CDATA[<h1 id="P1860-新魔法药水"><a href="#P1860-新魔法药水" class="headerlink" title="P1860 新魔法药水"></a>P1860 新魔法药水</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给$n$个物品,每个物品都有一个售价和回收价,现在有$v$块钱和$m$个操作,每次操作都可以把若干个物品合成为另一个物品,最多可以使用$k$次操作,求能获得的最大收益</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>比较难想的一道$dp$</p><p>设$f[i][j]$表示共有$i$块钱,$j$次操作时能获得的最大收益</p><p>$m[i][j]$表示第$i$个数用了$j$次操作后$i$的最小进价</p><p>$a[i][0/1]$表示第$i$个物品的进价和回收价</p><p>$m$的值直接求不太好求,考虑对$m$进行$dp$</p><p>对于每一个$m[i][j]$,其值必定由其条件物品的值决定,考虑去求每个物品的条件物品购入值的最小值</p><p>设$k[i][j]$表示第$now$个物品前$i$个条件用品用了$j$次魔法的最小购入值</p><p>$p_i$表示$i$物品中每个条件物品用的操作次数,$sum_i$表示第$i$个物品的条件物品总数,则$\sum_i^{sum_i}p_i = j-1$</p><p>可以看出是个分组背包</p><p>则有较为显然的转移:</p><p>$<del>~</del><del>~</del><del>~</del><del>~</del>~~$$k[i][j] = min(k[i-1][j-t]+f[i][t])$</p><p>$m[now][j]$的转移即为</p><p>$<del>~</del><del>~</del><del>~</del><del>~</del>~~$$m[now][j] = min(k[sum_i][j-1])$</p><p>$m$数组求出来了,$f$的转移也就呼之欲出了</p><p>$<del>~</del><del>~</del><del>~</del><del>~</del>~~$$f[v][t] = max(f[v - m[i][j]][t - j]+a[i][1])$</p><p>答案即为$max(f[i][j] - i)$</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">250</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f</span></span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN*<span class="number">10</span>],a[MAXN][<span class="number">2</span>],mgc[MAXN][MAXN],fia[MAXN],num[MAXN][MAXN],koishi[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> n,m,v,k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>; <span class="type">bool</span> flag=<span class="number">1</span>; <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) flag=<span class="number">0</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;X=(X&lt;&lt;<span class="number">1</span>)+(X&lt;&lt;<span class="number">3</span>)+ch-<span class="string">&#x27;0&#x27;</span>; ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span> X;</span><br><span class="line"><span class="keyword">return</span> ~(X<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(mgc,inf,<span class="built_in">sizeof</span>(mgc));</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),v=<span class="built_in">read</span>(),k=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i][<span class="number">0</span>] = <span class="built_in">read</span>(),mgc[i][<span class="number">0</span>] = a[i][<span class="number">0</span>] , a[i][<span class="number">1</span>] = <span class="built_in">read</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">fia[i] = <span class="built_in">read</span>(),num[i][<span class="number">0</span>] = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=num[i][<span class="number">0</span>];j++)</span><br><span class="line">num[i][j] = <span class="built_in">read</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(koishi,inf,<span class="built_in">sizeof</span>(koishi));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;j;p++) koishi[<span class="number">0</span>][p]  =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> now=<span class="number">1</span>;now&lt;=num[i][<span class="number">0</span>];now++)</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;j;p++)</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> q=<span class="number">0</span>;q&lt;=p;q++)</span><br><span class="line">      koishi[now][p] = <span class="built_in">min</span>(koishi[now<span class="number">-1</span>][p-q]+mgc[num[i][now]][q],koishi[now][p]);</span><br><span class="line">      mgc[fia[i]][j] = <span class="built_in">min</span>(mgc[fia[i]][j] , koishi[num[i][<span class="number">0</span>]][j<span class="number">-1</span>]);</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">0</span>;t&lt;=k;t++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=t;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> mo=mgc[i][j];mo&lt;=v;mo++)&#123;</span><br><span class="line">f[t][mo] = <span class="built_in">max</span>(f[t][mo],f[t-j][mo-mgc[i][j]]+a[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=v;j++)&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans , f[i][j]-j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="坑点-amp-amp-感想"><a href="#坑点-amp-amp-感想" class="headerlink" title="坑点&amp;&amp;感想"></a>坑点&amp;&amp;感想</h2><ul><li>注意枚举时的边界</li></ul>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3174 [HAOI2009]毛毛虫</title>
      <link href="/2020/09/08/p3174/"/>
      <url>/2020/09/08/p3174/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一n个点的树,定义一条路径的权值为该路径上所有的点数和与该路径上的点相连的点数之和,求最大权值</p><p>$1\leq n \le 300000$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="做法一"><a href="#做法一" class="headerlink" title="做法一:"></a>做法一:</h3><p>设$deg(i)$为第$i$个节点的度数,$f(i)$为以$i$为根的最大权值和,$g(i)$为以$i$为根的次大权值和</p><p>不难推出转移方程:</p><center>$f(u) = max(f(v))+deg(u)-1$</center><p>枚举每一个点,然后取最大值就可以了</p><p>注意这里最后的答案要加2,因为中间连接的的两个点没酸上</p><p>时间复杂度$O(n^2)$,能取得10pts的<del>好成绩</del></p><h3 id="做法二"><a href="#做法二" class="headerlink" title="做法二:"></a>做法二:</h3><p>观察可以发现,这里的方法和求树的直径相同,只是把长度换成了权值,因此可以直接套用求树的直径的两次$dfs$方法</p><p>时间复杂度$O(n)$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4180 严格次小生成树</title>
      <link href="/2020/09/06/p4180/"/>
      <url>/2020/09/06/p4180/</url>
      
        <content type="html"><![CDATA[<h1 id="P4180-BJWC2010-严格次小生成树"><a href="#P4180-BJWC2010-严格次小生成树" class="headerlink" title="P4180 [BJWC2010]严格次小生成树"></a>P4180 [BJWC2010]严格次小生成树</h1><h1 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h1><p>给一张带权无向图,求其严格次小生成树大小</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li><h3 id="次小生成树"><a href="#次小生成树" class="headerlink" title="次小生成树"></a>次小生成树</h3></li></ul><p>无向图中,边权和最小的满足边权和 <strong>大于等于</strong> 最小生成树边权和的生成树</p><p>严格次小生成树即为边权和最小的满足边权和 <strong>严格大于</strong> 最小生成树边权和的生成树</p><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><ul><li><p>先求出无向图的最小生成树,设其权值和为$S$</p></li><li><p>枚举每条不在最小生成树中的边$e = (u,v,w)$,将其加入生成树,同时去掉从$u$到$v$的路径上权值最大的一条边$e_{max}$,以确保不存在环且其权值和次小</p></li></ul><p>得到的新生成树权值和即为$S+e.w - e_{max}.w$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>使用树链剖分来维护两个值$:$区间最大值和区间严格次大值</p><p>设$max1<em>{l,r}$表示区间$[l,r]$中的最大值,$max2</em>{l,r}$表示区间$[l,r]$中的严格次大值</p><p>当$max1<em>{l,mid}==max1</em>{mid+1,r}$时:</p><p>$max2_{l,r}$取左右区间中的较大的严格次大值</p><ul><li>$max2<em>{l,r} = max(max2</em>{l,mid},max2_{mid+1,r})$</li></ul><p>反之,当$max1<em>{l,mid} != max1</em>{mid+1,r}$时:</p><p>$max2_{l,r}$取左右区间中的较小的最大值</p><ul><li>$max2<em>{l,r} = min(max1</em>{l,mid},max1_{mid+1,r})$</li></ul><p>若最大值不等于当前所换的边的大小,直接用最大值来替换</p><p>反之,说明不满足严格小于,用次大值来替换</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------other </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson (node&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson (node&lt;&lt;1|1)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span>+<span class="number">5</span>,MAXM = <span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> next,v,w;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n,m,fa[MAXN];</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> vis[MAXM];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">edge[++cnt].v = v;</span><br><span class="line">edge[cnt].w = w;</span><br><span class="line">edge[cnt].next = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">id</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> id &amp;k)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> w&lt;k.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> Tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> f1 = <span class="built_in">find</span>(a[i].u);</span><br><span class="line"><span class="type">int</span> f2 = <span class="built_in">find</span>(a[i].v);</span><br><span class="line"><span class="keyword">if</span>(f1!=f2)&#123;</span><br><span class="line">vis[i] = <span class="number">1</span>;</span><br><span class="line">fa[f1] = f2;</span><br><span class="line"><span class="built_in">add</span>(a[i].u,a[i].v,a[i].w),<span class="built_in">add</span>(a[i].v,a[i].u,a[i].w);</span><br><span class="line">sum+=a[i].w;</span><br><span class="line">Tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Tot == n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------other </span></span><br><span class="line"><span class="type">int</span> dep[MAXN],son[MAXN],faa[MAXN],size[MAXN],w[MAXN];</span><br><span class="line"><span class="type">int</span> id[MAXN],val[MAXN],tot = <span class="number">0</span>,top[MAXN];<span class="comment">//预处理数组 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------线段树 </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> max1,max2,l,r;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].max1 = <span class="built_in">max</span>(tree[lson].max1,tree[rson].max1);</span><br><span class="line"><span class="keyword">if</span>(tree[lson].max1==tree[rson].max1)&#123;</span><br><span class="line">tree[node].max2 = <span class="built_in">max</span>(tree[lson].max2,tree[rson].max2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tree[node].max2 = <span class="built_in">min</span>(tree[lson].max1,tree[rson].max1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">tree[node].l = l,tree[node].r = r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].max1 = val[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">unit</span><span class="params">(pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; l,pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; r)</span></span>&#123;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; f;</span><br><span class="line">f.first = <span class="built_in">max</span>(l.first,r.first);</span><br><span class="line"><span class="keyword">if</span>(l.first==r.first) f.second = <span class="built_in">max</span>(l.second,r.second);</span><br><span class="line"><span class="keyword">else</span> f.second = <span class="built_in">min</span>(l.first,r.first);</span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tree[node].l&amp;&amp;r&gt;=tree[node].r)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(tree[node].max1,tree[node].max2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(lson,l,r);</span><br><span class="line"><span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(rson,l,r);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unit</span>(<span class="built_in">query</span>(lson,l,r),<span class="built_in">query</span>(rson,l,r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------线段树 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------dfs</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f,<span class="type">int</span> deep)</span></span>&#123;</span><br><span class="line">dep[u] = deep;</span><br><span class="line">faa[u] = f;</span><br><span class="line">size[u] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">w[v] = edge[i].w;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u,deep+<span class="number">1</span>);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;maxson)&#123;</span><br><span class="line">son[u] = v;</span><br><span class="line">maxson = size[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">id[u] = ++tot;</span><br><span class="line">val[tot] = w[u];</span><br><span class="line">top[u] = topf;</span><br><span class="line"><span class="keyword">if</span>(!son[u]) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==son[u]||v==faa[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------dfs</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------查询 </span></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">qb</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; res;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">res = <span class="built_in">unit</span>(res , <span class="built_in">query</span>(<span class="number">1</span>,id[top[u]],id[u]));</span><br><span class="line">u = faa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u!=v)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">res = <span class="built_in">unit</span>(res , <span class="built_in">query</span>(<span class="number">1</span>,id[u]+<span class="number">1</span>,id[v]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------查询 </span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i].u&gt;&gt;a[i].v&gt;&gt;a[i].w;</span><br><span class="line"><span class="keyword">if</span>(a[i].u==a[i].v) vis[i] = <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i] = i;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+m);</span><br><span class="line"><span class="built_in">kruskal</span>();</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;<span class="comment">//在树中或为自环 </span></span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; maxn = <span class="built_in">qb</span>(a[i].u,a[i].v);<span class="comment">//最大值,次大值 </span></span><br><span class="line"><span class="keyword">if</span>(maxn.first&lt;a[i].w) ans = <span class="built_in">min</span>(ans , sum+a[i].w-maxn.first);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxn.second&lt;a[i].w&amp;&amp;maxn.second) ans = <span class="built_in">min</span>(ans , sum+a[i].w-maxn.second); <span class="comment">//存在严格次大值</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h2><h5 id="次小生成树-OI-Wiki"><a href="#次小生成树-OI-Wiki" class="headerlink" title="次小生成树_OI Wiki"></a><a href="https://oi-wiki.org/graph/mst/#_9">次小生成树_OI Wiki</a></h5>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4231 三步必杀</title>
      <link href="/2020/09/05/p4231/"/>
      <url>/2020/09/05/p4231/</url>
      
        <content type="html"><![CDATA[<h1 id="P4231-三步必杀"><a href="#P4231-三步必杀" class="headerlink" title="P4231 三步必杀"></a>P4231 三步必杀</h1><h1 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h1><p><img src="https://img2020.cnblogs.com/blog/2092833/202009/2092833-20200905221207707-1412115323.jpg" alt=""></p><p>给一个初值全为$0$的数列,有$m$次修改操作都将一个给定区间$[l,r]$加上首相为$s$末项为$e$的等差数列</p><p>求:所有修改完成后所有数的异或和跟最大值</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><p>通过观察可以发现,对于差分数组$b$,除了$l$和$r+1$位置,其他位置的值都相等</p><p>考虑用线段树记录差分数组,每次修改时,将:</p><ul><li><p>区间$[l+1,r]$加上一个公差$d$</p></li><li><p>$l$位置加上一个首相$s$</p></li><li><p>$r+1$位置减去一个$d×(r-l)+s$</p></li></ul><p>单点修改$+$区间修改$+$区间查询</p><p>可以获得38$pts$</p><h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>区间$[l+1,r]$的值均为$d$,考虑对数组$b$再进行一次差分</p><p>令$c$为$b$的差分数组</p><p>每次修改时将$:$</p><ul><li><p>$c_l$的值加上首相$s$</p></li><li><p>$c_{l+1}$的值加上$d -s$</p></li><li><p>$c_{r+1}$的值减去$d - e$</p></li><li><p>$c_{r+2}$的值加上$e$</p></li></ul><p>即可</p><p>只需要修改四个元素</p><p>对于每个$a<em>x$,其值即为$\sum</em>{i=1}^x\sum_{j=1}^{i}c_j$</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> a[MAXN] , n ,m,ans[MAXN];</span><br><span class="line"><span class="type">int</span> ans1,ansmaxn;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> l,r,s,e;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;s,&amp;e);</span><br><span class="line">a[l] += s;</span><br><span class="line">a[l+<span class="number">1</span>]+=(((e-s)/(r-l)) -s);</span><br><span class="line">a[r+<span class="number">1</span>]+=-(((e-s)/(r-l))+e);</span><br><span class="line">a[r+<span class="number">2</span>]+=e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans[i] = ans[i<span class="number">-1</span>]+a[i];</span><br><span class="line">ans1^=ans[i];</span><br><span class="line">ansmaxn = <span class="built_in">max</span>(ansmaxn , ans[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans1&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ansmaxn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="坑点-amp-amp-感想"><a href="#坑点-amp-amp-感想" class="headerlink" title="坑点&amp;&amp;感想"></a>坑点&amp;&amp;感想</h2><ul><li><p>当原差分数组有特殊性质时,考虑二次差分</p></li><li><p>不开$long long$见祖宗</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF149D Coloring Brackets</title>
      <link href="/2020/09/04/cf149d/"/>
      <url>/2020/09/04/cf149d/</url>
      
        <content type="html"><![CDATA[<h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个合法括号序列,一个括号可以染红色、蓝色或不染色,一对匹配的括号需要且只能将其中一个染色,且相邻两个括号颜色不能相同</p><p>求符合条件的染色方案数</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>代码实现上比较恶心的区间$dp$</p><p>设$f[i][j][0/1/2][0/1/2]$为区间$[i,j]$中,第$i$个字符不染色$/$染红色$/$染蓝色的方案数,$pos[i]$为$i$的对应右括号</p><p>分两种情况讨论:</p><ul><li>$i$和$j$是一对配对的括号</li></ul><p>$dfs$子区间$[i+1,j-1]$</p><p>更新每个$f[i][j][0/1/2][0/1/2]$的值</p><p>$\begin{cases}f[l][r][1][0] += f[l+1][r-1][i][j] (i!=1)\f[l][r][2][0] += f[l+1][r-1][i][j] (i!=2)\f[l][r][0][1] += f[l+1][r-1][i][j] (j!=1)\f[l][r][0][2] += f[l+1][r-1][i][j] (j!=2)\end{cases}$</p><ul><li>$i$和$j$不是一对配对的括号</li></ul><p>将$[i,j]$拆分为两个区间$[l,pos[l]]$和$[pos[l]+1,r]$进行$dfs$,暴力统计贡献</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><p>细节较多</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">710</span>;</span><br><span class="line"><span class="type">int</span> mo = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXN][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">char</span> kh[MAXN];</span><br><span class="line"><span class="type">int</span> pos[MAXN],ans;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">c</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//暴力统计贡献</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">2</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">2</span>;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> g=<span class="number">0</span>;g&lt;=<span class="number">2</span>;g++)&#123;</span><br><span class="line"><span class="keyword">if</span>((j!=k)||(j==<span class="number">0</span>&amp;&amp;k==<span class="number">0</span>)) dp[l][r][i][g]+=dp[l][pos[l]][i][j]*dp[pos[l]+<span class="number">1</span>][r][k][g],dp[l][r][i][g]%=mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l , <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l+<span class="number">1</span> == r)&#123;</span><br><span class="line">dp[l][r][<span class="number">0</span>][<span class="number">1</span>] = dp[l][r][<span class="number">0</span>][<span class="number">2</span>] = dp[l][r][<span class="number">1</span>][<span class="number">0</span>] = dp[l][r][<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pos[l]==r)&#123;<span class="comment">//是配对括号</span></span><br><span class="line"><span class="built_in">dfs</span>(l+<span class="number">1</span>,r<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">2</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">1</span>) dp[l][r][<span class="number">1</span>][<span class="number">0</span>] = (dp[l+<span class="number">1</span>][r<span class="number">-1</span>][i][j]+dp[l][r][<span class="number">1</span>][<span class="number">0</span>])%mo;</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">2</span>) dp[l][r][<span class="number">2</span>][<span class="number">0</span>] = (dp[l+<span class="number">1</span>][r<span class="number">-1</span>][i][j]+dp[l][r][<span class="number">2</span>][<span class="number">0</span>])%mo;</span><br><span class="line"><span class="keyword">if</span>(j!=<span class="number">1</span>) dp[l][r][<span class="number">0</span>][<span class="number">1</span>] = (dp[l+<span class="number">1</span>][r<span class="number">-1</span>][i][j]+dp[l][r][<span class="number">0</span>][<span class="number">1</span>])%mo;</span><br><span class="line"><span class="keyword">if</span>(j!=<span class="number">2</span>) dp[l][r][<span class="number">0</span>][<span class="number">2</span>] = (dp[l+<span class="number">1</span>][r<span class="number">-1</span>][i][j]+dp[l][r][<span class="number">0</span>][<span class="number">2</span>])%mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//拆分</span></span><br><span class="line"><span class="built_in">dfs</span>(l,pos[l]);</span><br><span class="line"><span class="built_in">dfs</span>(pos[l]+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">c</span>(l,r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,kh+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">strlen</span>(kh+<span class="number">1</span>);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(kh[i]==<span class="string">&#x27;(&#x27;</span>) s.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="keyword">else</span> pos[s.<span class="built_in">top</span>()] = i , s.<span class="built_in">pop</span>();<span class="comment">//记录匹配右括号</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="built_in">strlen</span>(kh+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">2</span>;j++)&#123;</span><br><span class="line">ans = (ans + dp[<span class="number">1</span>][<span class="built_in">strlen</span>(kh+<span class="number">1</span>)][i][j])%mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开学考柠檬水了</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 9月做题笔记</title>
      <link href="/2020/09/02/9%E6%9C%88%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/09/02/9%E6%9C%88%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><details><summary><font size=4 font face="comic sans MS">9.30</font></summary>## 9.30#### [P1450 [HAOI2008]硬币购物](https://www.luogu.com.cn/problem/P1450)容斥+dp感觉做法还是挺神的(~~也可能是因为我太菜了~~)#### [详细](https://www.cnblogs.com/xcxc82/p/13756835.html)</details><hr><details><summary><font size=4 font face="comic sans MS">9.29</font></summary>## 9.29#### [[GDOI2014]采集资源](https://www.luogu.com.cn/problem/P3891)$dp$练习题#### [详细](https://www.cnblogs.com/xcxc82/p/13752296.html)</details><hr><details><summary><font size=4 font face="comic sans MS">9.27</font></summary>## 9.27文艺平衡树[Splay学习笔记](https://www.cnblogs.com/xcxc82/p/13736231.html)</details><hr><details><summary><font size=4 font face="comic sans MS">9.26</font></summary>## 9.26[Splay学习笔记](https://www.cnblogs.com/xcxc82/p/13736231.html)下个星期开运动会了/se## 总结学习了Splay</details><hr><details><summary><font size=4 font face="comic sans MS">9.23~9.25</font></summary>## 9.23~9.25学了下splay笔记明天来补</details><hr><details><summary><font size=4 font face="comic sans MS">9.22</font></summary>## 9.22whking这西西弗什么思博审核啊,十多天了还没好</details><hr><details><summary><font size=4 font face="comic sans MS">9.21</font></summary>## 9.21复习初赛ing草为啥10年初赛会有空间向量的题啊</details><hr><details><summary><font size=4 font face="comic sans MS">9.20</font></summary>## 9.20题无## 总结学习了数列分块入门~~以后打月赛再也不瞎复制之前写的代码了==,被坑死了~~</details><hr><details><summary><font size=4 font face="comic sans MS">9.19</font></summary>## 9.19题### [洛谷 ⑨ 月月赛](https://www.cnblogs.com/xcxc82/p/13697113.html)⑨都不如的菜鸡</details><hr><details><summary><font size=4 font face="comic sans MS">9.18</font></summary>## 9.18题### [P4135 作诗](https://www.luogu.com.cn/problem/P4135)数列分块练手题### [详细](https://www.cnblogs.com/xcxc82/p/13701266.html)## other草上政治课的时候班上有个同学公然看本子,tql</details><hr><details><summary><font size=4 font face="comic sans MS">9.17</font></summary>## 9.17题### [P2801 教主的魔法](https://www.luogu.com.cn/problem/P2801)数列分块入门题### [详细](https://www.cnblogs.com/xcxc82/p/13695957.html)</details><hr><details><summary><font size=4 font face="comic sans MS">9.13~9.16</font></summary>## 9.13~9.16whking€€￡的破审核还没过==</details><hr><details><summary><font size=4 font face="comic sans MS">9.12</font></summary>## 9.12题### [P1860 新魔法药水](https://www.luogu.com.cn/problem/P1860)$dp$好题### [详细](https://www.cnblogs.com/xcxc82/p/13659339.html)### [P1850 换教室](https://www.luogu.com.cn/problem/P1850)最短路+期望$dp$### [详细](https://www.cnblogs.com/xcxc82/p/13661002.html)##总结补了之前没学的期望+概率复习了一些数论知识</details><hr><details><summary><font size=4 font face="comic sans MS">9.11</font></summary>## 9.11题### [P3802 小魔女帕琪](https://www.luogu.com.cn/problem/P3802)折寿中...### [CF148D Bag of mice](https://www.luogu.com.cn/problem/CF148D)概率$dp$模板题,分类讨论即可### [详细](https://www.cnblogs.com/xcxc82/p/13663798.html)</details><hr><details><summary><font size=4 font face="comic sans MS">9.7~9.10</font></summary>## 9.7~9.10题复习初赛+whk</details><hr><details><summary><font size=4 font face="comic sans MS">9.6</font></summary>## 9.6题### [P4180 [BJWC2010]严格次小生成树](https://www.luogu.com.cn/problem/P4180)次小生成树板子题### [详细](https://www.cnblogs.com/xcxc82/p/13623917.html)## 总结~~?似乎没啥可总结的~~学了一些杂七杂八的东西</details><hr><details><summary><font size=4 font face="comic sans MS">9.5</font></summary>## 9.5题### [P4231 三步必杀](https://www.luogu.com.cn/problem/P4231)二次差分车万题面好评### [详细](https://www.cnblogs.com/xcxc82/p/13620012.html)### [SP277 CTGAME - City Game](https://www.luogu.com.cn/problem/SP277)&&[P2280 [HNOI2003]激光炸弹](https://www.luogu.com.cn/problem/P2280)两道$dp$水题</details><hr><details><summary><font size=4 font face="comic sans MS">9.1~9.4</font></summary>## 9.1~9.4题whking打了几个模板题,复习了一些初赛知识~~开学考你们输了~~</details><hr><details><summary><font size=4 font face="comic sans MS">8月补充</font></summary>## 8月补充### [P3225 [HNOI2012]矿场搭建](https://www.luogu.com.cn/problem/P3225)待补充### [P3225 CF149D Coloring Brackets](https://www.luogu.com.cn/problem/P3225)细节较多的一道区间$dp$### [详细](https://www.cnblogs.com/xcxc82/p/13616581.html)### [P3174 [HAOI2009]毛毛虫](https://www.luogu.com.cn/problem/P3174)树形$dp$### [详细](https://www.cnblogs.com/xcxc82/p/13636125.html)</details>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1169 [ZJOI2007]棋盘制作</title>
      <link href="/2020/08/30/p1169/"/>
      <url>/2020/08/30/p1169/</url>
      
        <content type="html"><![CDATA[<h1 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h1><p>给一个$8×8$的黑白棋盘,求最大的黑白相间的矩形和正方形的面积</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>悬线法$dp$板子题</p><h1 id="悬线法"><a href="#悬线法" class="headerlink" title="悬线法"></a>悬线法</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>用途:解决给定矩阵中满足某条件的最大子矩阵等一类问题</p><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>定义三个数组:</p><p>$up[i][j]$:表示第$i$行第$j$个点能向上扩展到的最长长度</p><p>$l[i][j]$:表示第$i$行第$j$个点能向左扩展到的最左位置</p><p>$r[i][j]$:表示第$i$行第$j$个点能向右扩展到的最右位置</p><p>先预处理出$l$数组和$r$数组:</p><p>$l[i][j] = l[i]<a href="a[i][j]!=a[i][j-1]">j-1</a>$</p><p>$r[i][j] = r[i]<a href="a[i][j]!=a[i][j+1]">j+1</a>$</p><p>当且仅当$a[i][j]!=a[i-1][j]$时,两行才有可能接上</p><p>其对应的$l[i][j]$和$r[i][j]$则分别取靠右的和靠左的那一个,同时更新高度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a[i][j]!=<span class="number">1</span>)&#123;</span><br><span class="line">up[i][j] = up[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">l[i][j] = <span class="built_in">max</span>(l[i][j],l[i<span class="number">-1</span>][j]);</span><br><span class="line">r[i][j] = <span class="built_in">min</span>(r[i][j],r[i<span class="number">-1</span>][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3010</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> l[MAXN][MAXN],r[MAXN][MAXN],up[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;c);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c;i++)&#123;</span><br><span class="line"><span class="type">int</span> p,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;p,&amp;k);</span><br><span class="line">a[p][k] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]!=<span class="number">1</span>) l[i][j] = l[i][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m<span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]!=<span class="number">1</span>) r[i][j] = r[i][j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans  = <span class="number">-11451419</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]!=<span class="number">1</span>)&#123;</span><br><span class="line">up[i][j] = up[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">l[i][j] = <span class="built_in">max</span>(l[i][j],l[i<span class="number">-1</span>][j]);</span><br><span class="line">r[i][j] = <span class="built_in">min</span>(r[i][j],r[i<span class="number">-1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len = r[i][j] - l[i][j]+<span class="number">1</span>;</span><br><span class="line">ans = <span class="built_in">max</span>(ans , up[i][j]*len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>好水啊</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3622 [APIO2007]动物园</title>
      <link href="/2020/08/30/p3622/"/>
      <url>/2020/08/30/p3622/</url>
      
        <content type="html"><![CDATA[<h1 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h1><p>给一个$n$个数的环,$c$个人,每个人都可以看到环上的五个位置,且都有子集喜欢和不喜欢的数,当这五个位置至少有一个他喜欢的数字或至少有一个他不喜欢的数字被移走时,该人会开心,求让最多能让多少个人开心</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>比较难想的状压$dp$</p><p>每一个数有没有被撤走可以用$0$和$1$来表示,考虑状态压缩</p><p>考虑到每个人可以看到五个格子,不妨设:</p><p>$num[i][j]$为当区间$[i,i+4]$的状态为$j$时的开心人数</p><p>首先将每个人害怕和不害怕的动物压缩一个状态</p><p>枚举状态$j$,当且仅当五个位置至少有一个他喜欢的数字或至少有一个他不喜欢的数字时,该人会开心</p><p>即$((j$ &amp; $dislike)||($~$j$&amp; $like))$时,$num[i][j]++$</p><p>设$f[i][s]$为区间$[i,i+4]$的状态为$s$时的最多开心人数</p><p>考虑到当区间$[i,i+4]$移动到区间$[i+1,i+5]$时,前四位数字是不变的,因此关心的只有最后一位数的情况</p><p>得到转移$:$</p><p>$f[i][s] = max(f[i-1][(s$&amp;$15)&gt;&gt;1]$,$f[i-1][(s$&amp;$15)&gt;&gt;1|1])+num[i][s]$</p><p>解释:</p><p>$15$的二进制为$01111$,&amp;$15$即为取后四位,$&gt;&gt;1$和$&gt;&gt;1|1$分别代表$i-1$位置的不选与选</p><p>需要注意的是这里的数是一个环,因此只有当开头和结尾的状态一致时才是有效状态</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">50010</span>;</span><br><span class="line"><span class="type">int</span> n,c;</span><br><span class="line"><span class="type">int</span> num[MAXN][<span class="number">50</span>],f[MAXN][<span class="number">50</span>],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c;i++)&#123;</span><br><span class="line"><span class="type">int</span> e,f,l;</span><br><span class="line"><span class="type">int</span> like=<span class="number">0</span>,dislike=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;e&gt;&gt;f&gt;&gt;l;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=f;j++)&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line">a = (a-e+n)%n;</span><br><span class="line">like|=<span class="number">1</span>&lt;&lt;a;<span class="comment">//状态压缩</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=l;j++)&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line">a = (a-e+n)%n;</span><br><span class="line">dislike|=<span class="number">1</span>&lt;&lt;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">32</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>((j&amp;dislike)||(~j&amp;like)) num[e][j]++;<span class="comment">//判断是否合法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;<span class="comment">//枚举前5个数的状态</span></span><br><span class="line"><span class="built_in">memset</span>(f[<span class="number">0</span>],<span class="number">-20</span>,<span class="built_in">sizeof</span>(f[<span class="number">0</span>]));</span><br><span class="line"> f[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">32</span>;k++)&#123;</span><br><span class="line">f[j][k] = <span class="built_in">max</span>(f[j<span class="number">-1</span>][(k&amp;<span class="number">15</span>)&lt;&lt;<span class="number">1</span>],f[j<span class="number">-1</span>][(k&amp;<span class="number">15</span>)&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])+num[j][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(ans , f[n][i]);<span class="comment">//由于是一个环,当且仅当末尾和开头状态重合时才是有效答案</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2051 [AHOI2009]中国象棋</title>
      <link href="/2020/08/30/p2051/"/>
      <url>/2020/08/30/p2051/</url>
      
        <content type="html"><![CDATA[<h1 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h1><p>给一个$n×m$的棋盘,在上面放若干个炮,求有多少种放置方法可以使没有一个炮可以攻击到另一个炮</p><p>$1≤n,m≤100$</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>观察可以发现,每行每列最多只能放两个炮,一列能放炮的位置和之前该列放过的炮的个数有关,且<strong>两列棋子数相等的列是等价的</strong>,考虑设$f(i,j,k)$表示前$i$行中,有$j$列放了1个棋子,$k$列放了两个棋子</p><p>分类讨论每种情况,有转移:</p><p>$\begin{cases}f(i+1,j,k) += f(i,j,k)&amp;(一个都不放)\f(i+1,j-1,k+1) +=f(i,j,k)×j&amp;(放一个,放在之前已经放了一个的列上)\f(i+1,j+1,k) +=f(i,j,k)×(m-j-k)&amp;(放一个,放在之前一个都没有的列上)\f(i+1,j+1,k) +=f(i,j,k)×C_{m-j-k}^2&amp;(放两个,都放在之前一个都没有的列上)\f(i+1,j-2,k+2) +=f(i,j,k)×C_j^2&amp;(放两个,都放在之前已经放了一个的列上)\f(i+1,j,k+1) +=f(i,j,k)×(m-j-k)×j&amp;(放两个,一个放在之前已经放了一个的列上,一个放在之前一个都没有的列上)\end{cases}$</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 9999973</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C(x) (((x)*(x-1)/2)%mo)</span></span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k+j&lt;=m;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i][j][k])&#123;</span><br><span class="line">f[i+<span class="number">1</span>][j][k] = (f[i][j][k]+f[i+<span class="number">1</span>][j][k])%mo;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=<span class="number">1</span>) f[i+<span class="number">1</span>][j<span class="number">-1</span>][k+<span class="number">1</span>] = (f[i+<span class="number">1</span>][j<span class="number">-1</span>][k+<span class="number">1</span>]+f[i][j][k]*j)%mo;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=<span class="number">1</span>&amp;&amp;(m-j-k)&gt;<span class="number">0</span>) f[i+<span class="number">1</span>][j][k+<span class="number">1</span>] =(f[i+<span class="number">1</span>][j][k+<span class="number">1</span>]+f[i][j][k]*(m-j-k)*j)%mo;</span><br><span class="line"><span class="keyword">if</span>((m-j-k)&gt;<span class="number">0</span>) f[i+<span class="number">1</span>][j+<span class="number">1</span>][k] = (f[i+<span class="number">1</span>][j+<span class="number">1</span>][k]+f[i][j][k]*(m-j-k))%mo;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=<span class="number">2</span>) f[i+<span class="number">1</span>][j<span class="number">-2</span>][k+<span class="number">2</span>] = (f[i+<span class="number">1</span>][j<span class="number">-2</span>][k+<span class="number">2</span>]+f[i][j][k]*<span class="built_in">C</span>(j))%mo;</span><br><span class="line"><span class="keyword">if</span>((m-j-k)&gt;<span class="number">1</span>) f[i+<span class="number">1</span>][j+<span class="number">2</span>][k] = (f[i+<span class="number">1</span>][j+<span class="number">2</span>][k]+f[i][j][k]*<span class="built_in">C</span>(m-j-k))%mo;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j+i&lt;=m;j++)&#123;</span><br><span class="line">ans = (ans+f[n][i][j])%mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans%mo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构于2021/6/29</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2501 [HAOI2006]数字序列</title>
      <link href="/2020/08/28/p2501/"/>
      <url>/2020/08/28/p2501/</url>
      
        <content type="html"><![CDATA[<h1 id="P2501-HAOI2006-数字序列"><a href="#P2501-HAOI2006-数字序列" class="headerlink" title="P2501 [HAOI2006]数字序列"></a>P2501 [HAOI2006]数字序列</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个长为$n$的序列,求把它改成一个单调递增的序列最少需要改变的数和每个数改变的绝对值之和的最小值</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>神仙$dp$题</p><h2 id="第一问"><a href="#第一问" class="headerlink" title="第一问"></a>第一问</h2><p>直接做不太好做,考虑转化</p><p>最少需要改变的数 $=$ 总数 $-$ 最多不需要改变的数</p><p>若两个数$a_i$,$a_j$$(i&gt;j)$可以保留,则必须满足:</p><p>$a_i - a_j ≥i-j$</p><p>移项,得</p><p>$a_i-i≥a_j-j$</p><p>令$b_i = a_i - i$</p><p>于是原问题就转化为了求$b_i$的最长不下降子序列和在改变最少的数的条件下让$b_i$成为最长不下降序列的最小代价</p><p>最后输出$n -b$的最长不下降子序列长度 即可</p><h2 id="第二问"><a href="#第二问" class="headerlink" title="第二问"></a>第二问</h2><p>首先有个结论$:$</p><p>对于任意区间$[l,r]$,一定存在一个分界点$i$,使得当区间$[l,i]$的值全部修改为$b<em>{l-1}$,区间$[i+1,r]$的值全部修改为$b</em>{r+1}$时总花费最小</p><p>证明$:$</p><p>首先任意的$k∈[l,r]$,其对应的$b<em>k$值一定大于$b</em>{r+1}$或小于$b_{l-1}$</p><p>假设一段中一共有$x$个大于$b<em>{r+1}$的数,$y$个小于$b</em>{l-1}$的数</p><p>如果$x&lt;y$,那么把这一段整体改成$b_{r+1}$时总花费显然会最小</p><p>反之,若$x&gt;y$,那么把这一段整体改为$b_{l-1}$时总花费显然会最小</p><p>因此,最优解一定为将左边一段改为$b<em>{l-1}$,右边一段改为$b</em>{r+1}$</p><p>设$F_i$为以$i$为结尾时的最小代价,$last$为$i$的前驱</p><p>则有转移方程：</p><p>$F<em>i = F_k+\sum</em>{j=last+1}^k|b<em>j-b</em>{last}|+\sum<em>{j=k+1}^{i-1}|b_j-b</em>{i}|$</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">35010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1e12</span></span><br><span class="line"><span class="type">int</span> a[MAXN],b[MAXN],T[MAXN],f[MAXN],n;</span><br><span class="line"><span class="type">int</span> l,r,len;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="type">int</span> sum1[MAXN],sum2[MAXN];<span class="comment">//前后缀和 </span></span><br><span class="line"><span class="type">int</span> F[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">memset</span>(F,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(F));</span><br><span class="line">g[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">b[<span class="number">0</span>] = -inf,b[n+<span class="number">1</span>] = inf;<span class="comment">//边界 </span></span><br><span class="line">F[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">b[i] = a[i] - i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;<span class="comment">//求最长不下降子序列 </span></span><br><span class="line">l=<span class="number">0</span>,r=len;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid = (l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(T[mid]&lt;=b[i]) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l==len) len++;</span><br><span class="line">f[i] = l+<span class="number">1</span>;</span><br><span class="line">T[l+<span class="number">1</span>] = b[i];</span><br><span class="line">g[f[i]].<span class="built_in">push_back</span>(i);<span class="comment">//记录长度为f[i]的最长不下降子序列的结尾i </span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;n-len+<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;g[f[i]<span class="number">-1</span>].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line"><span class="type">int</span> start = g[f[i]<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">if</span>(b[start]&gt;b[i]) <span class="keyword">continue</span>; </span><br><span class="line">sum1[start] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=start+<span class="number">1</span>;k&lt;=i<span class="number">-1</span>;k++)&#123;</span><br><span class="line">sum1[k] = sum1[k<span class="number">-1</span>]+<span class="built_in">abs</span>(b[start]-b[k]);<span class="comment">//前缀和 </span></span><br><span class="line">&#125;</span><br><span class="line">sum2[i<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=i<span class="number">-2</span>;k&gt;=start;k--)&#123;</span><br><span class="line">sum2[k] = sum2[k+<span class="number">1</span>]+<span class="built_in">abs</span>(b[k+<span class="number">1</span>]-b[i]);<span class="comment">//后缀和 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=start;k&lt;=i<span class="number">-1</span>;k++)&#123;<span class="comment">//枚举分界点 </span></span><br><span class="line">F[i] = <span class="built_in">min</span>(F[i] , F[start]+sum1[k]+sum2[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;F[n+<span class="number">1</span>];</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="坑点-amp-amp-感想"><a href="#坑点-amp-amp-感想" class="headerlink" title="坑点&amp;&amp;感想"></a>坑点&amp;&amp;感想</h2><ul><li>注意补集转化</li></ul>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5664 Emiya家今天的饭</title>
      <link href="/2020/08/27/p5664/"/>
      <url>/2020/08/27/p5664/</url>
      
        <content type="html"><![CDATA[<h1 id="P5664-Emiya-家今天的饭"><a href="#P5664-Emiya-家今天的饭" class="headerlink" title="P5664 Emiya 家今天的饭"></a>P5664 Emiya 家今天的饭</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个$n×m$的矩阵,从矩阵中选出$k$个元素</p><p>要求满足:</p><ul><li><p>每行只能选一个元素</p></li><li><p>每列的元素个数$≤\dfrac{k}{2}$</p></li></ul><p>求满足条件的集合的方案数之和</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><p>先来观察一下限制</p><p>由于不可能有两列都超过总数的一半,不合法的列只可能有一列</p><p>直接做可能不太好做,考虑容斥</p><ul><li>合法方案数 $=$ 总方案数 $-$ 不合法方案数 </li></ul><p>对于不合法的方案数:</p><p>若一个集合不合法,说明某一列的选择个数一定大于其他列中选择个数之和,因此考虑去枚举哪一列不合法</p><p>设$sum[i]$为第$i$行的和</p><p>设$f[i][j][k]$为第$p$列,前$i$行,$p$列中选取了$j$个数,其他列中选取了$k$个数</p><p>则有转移:</p><ul><li>$f[i][j][k] = f[i-1][j][k]+(sum[i]-a[i][now])×f[i-1][j][k-1]+a[i][now]×f[i-1][j-1][k]$</li></ul><p>对于总方案数:</p><p>每一行都可以选择一个元素或不选,根据乘法原理,得到:</p><p>$ans = ∏<em>{i=1}^n∑</em>{j=1}^ma[i][j]-1$(-1是减去空集)</p><p>复杂度$O(mn^3)$,可以获得$84pts$</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">110</span>,MAXM =<span class="number">2010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[MAXN][MAXM];</span><br><span class="line"><span class="type">int</span> sum[MAXN];</span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> CUT = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i][j]);</span><br><span class="line">sum[i]+=a[i][j]; </span><br><span class="line">sum[i]%=mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans *=(<span class="number">1</span>+sum[i])%mo;</span><br><span class="line">ans%=mo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = (ans<span class="number">-1</span>+mo)%mo;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> now=<span class="number">1</span>;now&lt;=m;now++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=i-j;k++)&#123;</span><br><span class="line">f[i][j][k] = f[i - <span class="number">1</span>][j][k];</span><br><span class="line">                    f[i][j][k] += (j&gt;<span class="number">0</span>?f[i - <span class="number">1</span>][j - <span class="number">1</span>][k]:<span class="number">0</span>)* a[i][now] % mo;</span><br><span class="line">                    f[i][j][k] %= mo;</span><br><span class="line">                    f[i][j][k] += (sum[i] - a[i][now] + mo) % mo * (k&gt;<span class="number">0</span>?f[i - <span class="number">1</span>][j][k<span class="number">-1</span>]:<span class="number">0</span>) % mo;</span><br><span class="line">                    f[i][j][k] %= mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=n-i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;j) CUT=(CUT+f[n][i][j])%mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;(ans-CUT+mo)%mo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>考虑进一步优化,减去无用状态</p><p>注意到在转移过程中,我们并不关心$k$和$j$的具体数值,而只关心其相对大小关系,考虑直接记录差值</p><p>蛇$f[i][j]$为第$p$列,前$i$行,第$p$列和其他列的差值</p><p>则有转移:</p><p>$f[i][j] = f[i-1][j]+f[i-1][j-1]×a[i][p]+f[i-1][j+1]*(sum[i]-a[i][p])$</p><p>复杂度$O(mn^2)$</p><h2 id="code-1"><a href="#code-1" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">210</span>,MAXM = <span class="number">2010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 998244353</span></span><br><span class="line"><span class="type">int</span> a[MAXN][MAXM];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> f[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> sum[MAXN];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> udk = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i][j]);</span><br><span class="line">sum[i]+=a[i][j];</span><br><span class="line">sum[i]%=mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans*=(sum[i]+<span class="number">1</span>)%mo;</span><br><span class="line">ans%=mo;</span><br><span class="line">&#125;</span><br><span class="line">ans = (ans<span class="number">-1</span>+mo)%mo;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p = <span class="number">1</span>;p&lt;=m;p++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">f[<span class="number">0</span>][n] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=n-i;j&lt;=n+i;j++)&#123;</span><br><span class="line">f[i][j] = ((f[i<span class="number">-1</span>][j]%mo+f[i<span class="number">-1</span>][j+<span class="number">1</span>]*(sum[i]-a[i][p]+mo)%mo)%mo+f[i<span class="number">-1</span>][j<span class="number">-1</span>]*a[i][p]%mo)%mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">udk=(udk+f[n][i+n])%mo;</span><br><span class="line">udk%=mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(ans-udk+mo)%mo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="坑点-amp-amp-感想"><a href="#坑点-amp-amp-感想" class="headerlink" title="坑点&amp;&amp;感想"></a>坑点&amp;&amp;感想</h2><ul><li><p>原问题不太可做时,可以考虑容斥</p></li><li><p>转移时若只关心相对大小关系,可以直接记录差值</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5658 括号树</title>
      <link href="/2020/08/26/p5658/"/>
      <url>/2020/08/26/p5658/</url>
      
        <content type="html"><![CDATA[<p>重构于$2021/1/30$</p><h1 id="P5658-括号树"><a href="#P5658-括号树" class="headerlink" title="P5658 括号树"></a>P5658 括号树</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一颗$n$个节点的树,每个结点上都有一个左括号或右括号</p><p>定义 $s_i$为将根结点到 $i$ 号结点的简单路径上的括号，按结点经过顺序依次排列组成的字符串。$k_i$表示$s_i$中不同的合法括号子串的个数，</p><p>求$i \times k_i$的异或和</p><p>$n≤5×10^5$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>显然只有在当前节点括号为”$)$”且前面有未匹配上的”$($”的时候才会产生新的合法括号</p><p>设$f_i$为从根节点到$i$节点的合法字符字串,$last_i$为$i$节点前上一个没有匹配的”$($”,$g_i$为以$i$为结尾的合法串数量</p><p>$f<em>i = \sum g</em>{last_{i-1}}+1$</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">500010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">1</span>],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">edge[++cnt].to = v;</span><br><span class="line">edge[cnt].next = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> a[MAXN];</span><br><span class="line"><span class="type">int</span> n,sum,F[MAXN],fa[MAXN];</span><br><span class="line"><span class="type">int</span> last[MAXN];</span><br><span class="line"><span class="type">int</span> num[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">last[u] = last[fa[u]];</span><br><span class="line">F[u] = F[fa[u]];</span><br><span class="line"><span class="keyword">if</span>(a[u]==<span class="string">&#x27;(&#x27;</span>) last[u] = u;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[u]==<span class="string">&#x27;)&#x27;</span>&amp;&amp;last[u]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(last[u]==fa[u]) num[u] = num[fa[u]]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> num[u] = num[fa[last[u]]]+<span class="number">1</span>;</span><br><span class="line">last[u] = last[fa[last[u]]];</span><br><span class="line">F[u]+=num[u];</span><br><span class="line">&#125;</span><br><span class="line">ans^=u*F[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(f==v) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;fa[i];</span><br><span class="line"><span class="built_in">add</span>(i,fa[i]);</span><br><span class="line"><span class="built_in">add</span>(fa[i],i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>); </span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1295 [TJOI2011]书架</title>
      <link href="/2020/08/26/p1295/"/>
      <url>/2020/08/26/p1295/</url>
      
        <content type="html"><![CDATA[<h1 id="P1295-TJOI2011-书架"><a href="#P1295-TJOI2011-书架" class="headerlink" title="P1295 [TJOI2011]书架"></a>P1295 [TJOI2011]书架</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给出一个长度为 $n$ 的序列 $h$，请将 $h$ 分成若干段，满足每段数字之和都不超过 $m$，最小化每段的最大值之和。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><p>有个非常直观的想法</p><p>设$f[i]$为前$i$个数的最小值</p><p><del>根据套路</del>易得到转移方程:</p><ul><li>$f[i] = min(f[j]+max(h[j+1]$~$h[i]))(\sum_{j+1}^ih[i]&lt;=m)$</li></ul><p>复杂度$O(n^2)$</p><p>吸氧后可以取得80pts的<del>好成绩</del></p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> f[MAXN] , h[MAXN];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum[MAXN];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;h[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum[i] = sum[i<span class="number">-1</span>]+h[i];</span><br><span class="line">&#125;</span><br><span class="line">f[<span class="number">1</span>] = h[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">f[i] = <span class="number">191981019</span>;</span><br><span class="line"><span class="type">int</span> maxn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[i] - sum[j]&gt;m) <span class="keyword">break</span>;</span><br><span class="line">maxn =<span class="built_in">max</span>(h[j+<span class="number">1</span>],maxn);</span><br><span class="line">f[i] = <span class="built_in">min</span>(f[i],f[j]+maxn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;f[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>线段树优化$dp$</p><p>回到上面那个方程</p><p> $f[i] = min(f[j]+max(h[j+1]$~$h[i]))(\sum_{j+1}^ih[i]&lt;=m)$</p><p> $\sum_{j+1}^ih[i]&lt;=m$这个限制我们可以通过二分得到</p><p> 设$pos_i$为最左端点</p><p> 问题就转化成了:</p><p>  $f[i] = min(f[j]+max(h[j+1]$~$h[i]))(pos_i&lt;=m)$</p><p>首先对于每个$i$,如果有一个位置$pos$满足$[pos,i)$中的$h$均小于$h[i]$,显然其后面的所有$maxh[i]$都为$h[i]$</p><p>开一个单调栈,找出这个位置$l$，并将区间$[l+1,i)$的位置全部改为$h[i]$</p><p>区间修改,考虑使用线段树来维护</p><p>用线段树来维护两个值,$f[i-1]$和$f[j]+max(h[j+1]$~$h[i])$</p><p>每当枚举到一个$i$时</p><ul><li><p>更新$i$节点的$f[i-1]$ $<del>~</del>$(单点修改)</p></li><li><p>将区间$[l+1,i)$的位置全部改为$h[i]$ $<del>~</del>$(区间修改)</p></li><li><p>二分查找$i$最左端点,并查询区间$[l+1,i]$的最小$f[j]+max(h[j+1]$~$h[i])$ $<del>~</del>$(区间查询)</p></li></ul><h2 id="算法三-补充"><a href="#算法三-补充" class="headerlink" title="算法三(补充)"></a>算法三(补充)</h2><p><del>过了半年后重做这道题时yy出来的想法</del></p><p>考虑对算法一的方程进行优化,使用线段树来维护$max(h_i)$和$min(f_j+max(h_i))$,并在每次更新时插入新值</p><p>同时,对于$\sum_{j+1}^ih&lt;=m$的限制条件,因为左端点的更新都是只增不减的,只需要在处理新数据之前先进行一次二分，找到左端点即可</p><p>总复杂度$O(nlogn)$</p><h2 id="code-1"><a href="#code-1" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson (node&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson (node&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1e12+1145</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> ans,tag,val;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[MAXN],n,m;</span><br><span class="line"><span class="type">int</span> sta[MAXN],sum[MAXN],top = <span class="number">0</span>,last[MAXN],f[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;<span class="comment">//上传</span></span><br><span class="line">tree[node].ans = <span class="built_in">min</span>(tree[rson].ans,tree[lson].ans);</span><br><span class="line">tree[node].val = <span class="built_in">min</span>(tree[rson].val,tree[lson].val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">tree[node].l = l,tree[node].r = r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].tag = tree[node].val = tree[node].ans = inf;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].tag==inf) <span class="keyword">return</span>;</span><br><span class="line">tree[lson].ans = tree[lson].val+tree[node].tag;<span class="comment">//更新最小值</span></span><br><span class="line">tree[rson].ans = tree[rson].val+tree[node].tag;</span><br><span class="line">tree[lson].tag = tree[rson].tag = tree[node].tag;</span><br><span class="line">tree[node].tag = inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].l&gt;=l&amp;&amp;tree[node].r&lt;=r)&#123;</span><br><span class="line"><span class="keyword">return</span> tree[node].ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node);</span><br><span class="line"><span class="type">int</span> miD = (tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> Ans = inf;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=miD) Ans = <span class="built_in">min</span>(Ans , <span class="built_in">query</span>(lson,l,r));</span><br><span class="line"><span class="keyword">if</span>(r&gt;miD) Ans = <span class="built_in">min</span>(Ans , <span class="built_in">query</span>(rson,l,r));</span><br><span class="line"><span class="keyword">return</span> Ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update1</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> c)</span></span>&#123;<span class="comment">//区间修改</span></span><br><span class="line"><span class="keyword">if</span>(tree[node].l&gt;=l&amp;&amp;tree[node].r&lt;=r)&#123;</span><br><span class="line">tree[node].tag = c;</span><br><span class="line">tree[node].ans = tree[node].val+c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node);</span><br><span class="line"><span class="type">int</span> miD = (tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=miD) <span class="built_in">update1</span>(lson,l,r,c);</span><br><span class="line"><span class="keyword">if</span>(r&gt;miD) <span class="built_in">update1</span>(rson,l,r,c);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update2</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> x)</span></span>&#123;<span class="comment">//单点修改</span></span><br><span class="line"><span class="keyword">if</span>(tree[node].l==tree[node].r)&#123;</span><br><span class="line">tree[node].val = f[x<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node);</span><br><span class="line"><span class="type">int</span> miD = (tree[node].l+tree[node].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=miD) <span class="built_in">update2</span>(lson,x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update2</span>(rson,x);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;h[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum[i] = sum[i<span class="number">-1</span>]+h[i];</span><br><span class="line">&#125;</span><br><span class="line">sta[++top] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(h[i]&gt;h[sta[top]]&amp;&amp;top) top--;</span><br><span class="line"><span class="keyword">if</span>(top) last[i] = sta[top];</span><br><span class="line">sta[++top] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">update2</span>(<span class="number">1</span>,i);</span><br><span class="line"><span class="keyword">if</span>(last[i]&lt;i) <span class="built_in">update1</span>(<span class="number">1</span>,last[i]+<span class="number">1</span>,i,h[i]);</span><br><span class="line"><span class="type">int</span> begin = <span class="built_in">lower_bound</span>(sum,sum+i+<span class="number">1</span>,sum[i]-m)-sum;</span><br><span class="line"><span class="keyword">if</span>(begin&lt;i) f[i] = <span class="built_in">query</span>(<span class="number">1</span>,begin+<span class="number">1</span>,i);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;f[n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="坑点-amp-amp-感想"><a href="#坑点-amp-amp-感想" class="headerlink" title="坑点&amp;&amp;感想"></a>坑点&amp;&amp;感想</h2><ul><li><p>$inf$的值一定要设大</p></li><li><p>条件允许时,可以考虑使用线段树来优化$dp$</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1944 最长括号匹配</title>
      <link href="/2020/08/25/p1944/"/>
      <url>/2020/08/25/p1944/</url>
      
        <content type="html"><![CDATA[<h1 id="P1944-最长括号匹配"><a href="#P1944-最长括号匹配" class="headerlink" title="P1944 最长括号匹配"></a>P1944 最长括号匹配</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个由(,),[,]括号组成的字符串，求出其中最长的括号匹配子串。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>水题</p><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><p>比较容易想到的一种算法</p><p>直接用栈来维护,用$vis[i]$来记录第$i$位是否匹配成功</p><p>找出最长的一段输出即可</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000010</span>;</span><br><span class="line">string s;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt; S;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; pos;</span><br><span class="line"><span class="type">bool</span> tr[MAXN];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> L =<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">s = <span class="string">&#x27; &#x27;</span>+s;</span><br><span class="line">S.<span class="built_in">push</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">pos.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((s[i]==<span class="string">&#x27;)&#x27;</span>&amp;&amp;S.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span>)||(s[i]==<span class="string">&#x27;]&#x27;</span>&amp;&amp;S.<span class="built_in">top</span>()==<span class="string">&#x27;[&#x27;</span>)) tr[i] = tr[pos.<span class="built_in">top</span>()] = <span class="number">1</span>,S.<span class="built_in">pop</span>(),pos.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">else</span> pos.<span class="built_in">push</span>(i) , S.<span class="built_in">push</span>(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(tr[i])&#123;</span><br><span class="line">now++;</span><br><span class="line"><span class="keyword">if</span>(now&gt;ans[<span class="number">3</span>])&#123;</span><br><span class="line">ans[<span class="number">3</span>] = now,ans[<span class="number">1</span>] = L,ans[<span class="number">2</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">now = <span class="number">0</span>;</span><br><span class="line">L = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=ans[<span class="number">1</span>];i&lt;=ans[<span class="number">2</span>];i++)&#123;</span><br><span class="line">cout&lt;&lt;s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>设$f[i]$为以第$i$位为末尾的匹配括号字串的最长长度</p><p>若$s[i]$为$($或$[$,不可能匹配,直接跳过即可</p><p>如果$s[i]$为$)$或$]$</p><p>设与$s[i]$相匹配的字符为$s[k]$</p><p>$1.$首先$k$肯定不能在区间$[i-f[i-1],i)$,该区间内的每个字符都已经”被匹配了”</p><p>$2.$假设$k$在区间$[1,i-f[i-1]-1)$中,说明区间$[k+1,i-1]$的字符都是匹配的,与$f[i-1]$矛盾</p><p>综上,$k$能在的位置只有$i-f[i-1]-1$</p><p>得到转移方程:</p><ul><li>$f[i] = f[i-1]+f[i-f[i-1]-2]+2$ </li></ul><h2 id="code-1"><a href="#code-1" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> f[MAXN];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">-114514</span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> start,end;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">s = <span class="string">&#x27; &#x27;</span>+s;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;)&#x27;</span>||s[i]==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((s[i]==<span class="string">&#x27;]&#x27;</span>&amp;&amp;s[i-f[i<span class="number">-1</span>]<span class="number">-1</span>]==<span class="string">&#x27;[&#x27;</span>)||(s[i]==<span class="string">&#x27;)&#x27;</span>&amp;&amp;s[i-f[i<span class="number">-1</span>]<span class="number">-1</span>]==<span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">f[i] = f[i<span class="number">-1</span>]+f[i-f[i<span class="number">-1</span>]<span class="number">-2</span>]+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(f[i]&gt;ans)&#123;</span><br><span class="line">ans = f[i],end = i;</span><br><span class="line">start = i-f[i]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=end;i++)&#123;</span><br><span class="line">cout&lt;&lt;s[i];</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5851 [USACO]Greedy Pie Eaters P</title>
      <link href="/2020/08/24/p5851/"/>
      <url>/2020/08/24/p5851/</url>
      
        <content type="html"><![CDATA[<h1 id="P5851-USACO-Greedy-Pie-Eaters-P"><a href="#P5851-USACO-Greedy-Pie-Eaters-P" class="headerlink" title="P5851 [USACO]Greedy Pie Eaters P"></a>P5851 [USACO]Greedy Pie Eaters P</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有$M$头奶牛,$N$个派,每头奶牛都有一个吃派的范围和体重,分别用$l$,$r$,$w$表示</p><p>求出每头奶牛按顺序吃完后,满足每个奶牛都吃到至少一个派的情况下的最大体重值之和</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>设$f[i][j]$为区间$[i,j]$可获得的最大权值</p><p>$w[i][j][k]$为能吃掉$k$的最大的一个$w$$(i\le l\le k\le r\le j)$</p><p>先来考虑如何去搞出$w[i][j][k]$</p><p>可以去用已知的$w[i][j][k]$去一个个向外更新,扩展到整个序列</p><p>得到方程:</p><p>$w[i-1][j][k] = max(w[i][j][k] , w[i-1][j][k])$</p><p>$w[i][j+1][k] = max(w[i][j][k] , w[i][j+1][k])$</p><p>要注意的是这里的枚举顺序</p><p>因为是不断向外扩展更新的,在枚举$i$时要倒序枚举,枚举$j$时要正序枚举</p><p>转移方程的话首先可以联想到</p><p>$f[i][j] = max(f[i][k]+f[k+1][j])(i\le k &lt;j)$</p><p>但由于这样转移不能让新进干员吃到派</p><p>因此转移方程要改为</p><ul><li>$f[i][j] = max(f[i][k-1]+w[i][j][k]+f[k+1][j])$(第$k$个派还未被吃)</li></ul><h2 id="坑点-amp-amp-感想"><a href="#坑点-amp-amp-感想" class="headerlink" title="坑点&amp;&amp;感想"></a>坑点&amp;&amp;感想</h2><ul><li><p>注意元素之前的关系</p></li><li><p>注意更新顺序和枚举顺序</p></li></ul><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXN] , w[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> l,r,val;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;val,&amp;l,&amp;r);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = l;j&lt;=r;j++)&#123;</span><br><span class="line"></span><br><span class="line">w[l][r][j] = <span class="built_in">max</span>(w[l][r][j] , val);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=k;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=k;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">1</span>) w[i<span class="number">-1</span>][j][k] = <span class="built_in">max</span>(w[i][j][k] , w[i<span class="number">-1</span>][j][k]);</span><br><span class="line"><span class="keyword">if</span>(j!=n) w[i][j+<span class="number">1</span>][k] = <span class="built_in">max</span>(w[i][j][k] , w[i][j+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dp[i][i] = w[i][i][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">1</span>;len&lt;n;len++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+len&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> j = i+len;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=j;k++)&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i][j] , dp[i][k<span class="number">-1</span>]+dp[k+<span class="number">1</span>][j]+w[i][j][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[<span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几篇题解似乎都有些奇奇怪怪的错误?</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4158 [SCOI2009]粉刷匠</title>
      <link href="/2020/08/23/p4158/"/>
      <url>/2020/08/23/p4158/</url>
      
        <content type="html"><![CDATA[<h1 id="P4158-SCOI2009-粉刷匠"><a href="#P4158-SCOI2009-粉刷匠" class="headerlink" title="P4158 [SCOI2009]粉刷匠"></a>P4158 [SCOI2009]粉刷匠</h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给$n$行长度为$m$的字符串,每个字符都要被粉刷成黑色或白色,一共有$t$次粉刷机会,每次粉刷,只能选择一行字符串中一段连续的子串,然后涂上一种颜色,每个格子最多只能被粉刷一次。</p><p>求最多刷对格子总数</p><p>$n,m≤50,t≤2500$</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>简单的线性$dp$</p><p><strong>算法1</strong></p><p>设$f(i,j,k,0/1)$表示粉刷前$i$行第$i$行粉刷前$j$行共用了$k$次操作,前一个刷对$/$错时能刷对的最多格子数</p><p>分类讨论每一种情况,转移方程:</p><p>$f(i,j,k,1) = \begin{cases}max(f(i,j-1,k-1,0)+1,f(i,j-1,k,1)+1)&amp;a<em>j=a</em>{j-1}\max(f(i,j-1,k,0)+1,f(i,j-1,k-1,1)+1)&amp;a<em>j≠a</em>{j-1}\end{cases}$</p><p>$f(i,j,k,0) = \begin{cases}max(f(i,j-1,k,0)+1,f(i,j-1,k-1,1)+1)&amp;a<em>j=a</em>{j-1}\f(i,j-1,k,1)&amp;a<em>j≠a</em>{j-1}\end{cases}$</p><p><strong>算法2</strong></p><p>观察发现,不可能在一段连续相同的字符中出现”转折点”,因此我们可以把相同的一段字符合并起来</p><p>设$val(i,j)$表示第$i$行第$j$段连续字符的长度,转移方程:</p><p>$f(i,j,k,0) = max(f(i,j-1,k,1) , f(i,j-1,k-1,0))$<br>$f(i,j,k,1) = max(f(i,j-1,k,0) , f(i,j-1,k-1,1)) + val(i,j)$</p><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*if(j==1)&#123;</span></span><br><span class="line"><span class="comment">f[i][j][k][1] = max(f[i-1][m][k-1][0]+1,f[i-1][m][k-1][1]+1);</span></span><br><span class="line"><span class="comment">f[i][j][k][0] = max(f[i-1][m][k-1][0],f[i-1][m][k-1][1]);</span></span><br><span class="line"><span class="comment">continue;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(s[j]==s[j-1])&#123;</span></span><br><span class="line"><span class="comment">f[i][j][k][1] = max(f[i][j-1][k-1][0]+1,f[i][j-1][k][1]+1);</span></span><br><span class="line"><span class="comment">f[i][j][k][0] = max(f[i][j-1][k][0],f[i][j-1][k-1][1]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else&#123;</span></span><br><span class="line"><span class="comment">f[i][j][k][1] = max(f[i][j-1][k][0]+1,f[i][j-1][k-1][1]+1);</span></span><br><span class="line"><span class="comment">f[i][j][k][0] = f[i][j-1][k][1];</span></span><br><span class="line"><span class="comment">&#125;算法1*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2510</span>,MAXM = <span class="number">60</span>;</span><br><span class="line"><span class="type">int</span> f[MAXM][MAXM][MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="type">int</span> n,m,t;</span><br><span class="line"><span class="type">int</span> tot[MAXM];</span><br><span class="line"><span class="type">int</span> val[MAXM][MAXN]; </span><br><span class="line"><span class="type">int</span> a[MAXM][MAXN];</span><br><span class="line"><span class="type">int</span> dp[MAXM][MAXN];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]!=s[j<span class="number">-1</span>]) ++tot[i];</span><br><span class="line">val[i][tot[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tot[i];j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=t;k++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(j==<span class="number">1</span>)&#123;<span class="comment">//从上一行转移</span></span><br><span class="line">    f[i][j][k][<span class="number">0</span>] = <span class="built_in">max</span>(f[i<span class="number">-1</span>][tot[i<span class="number">-1</span>]][k<span class="number">-1</span>][<span class="number">0</span>],f[i<span class="number">-1</span>][tot[i<span class="number">-1</span>]][k<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">    f[i][j][k][<span class="number">1</span>] = <span class="built_in">max</span>(f[i<span class="number">-1</span>][tot[i<span class="number">-1</span>]][k<span class="number">-1</span>][<span class="number">0</span>],f[i<span class="number">-1</span>][tot[i<span class="number">-1</span>]][k<span class="number">-1</span>][<span class="number">1</span>])+val[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">f[i][j][k][<span class="number">0</span>] = <span class="built_in">max</span>(f[i][j<span class="number">-1</span>][k][<span class="number">1</span>] , f[i][j<span class="number">-1</span>][k<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">f[i][j][k][<span class="number">1</span>] = <span class="built_in">max</span>(f[i][j<span class="number">-1</span>][k][<span class="number">0</span>] , f[i][j<span class="number">-1</span>][k<span class="number">-1</span>][<span class="number">1</span>]) + val[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   ans = <span class="built_in">max</span>(f[n][tot[n]][t][<span class="number">1</span>],f[n][tot[n]][t][<span class="number">0</span>]);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4302 [SCOI2003]字符串折叠</title>
      <link href="/2020/08/23/p4302/"/>
      <url>/2020/08/23/p4302/</url>
      
        <content type="html"><![CDATA[<h1 id="P4302-SCOI2003-字符串折叠"><a href="#P4302-SCOI2003-字符串折叠" class="headerlink" title="P4302 [SCOI2003]字符串折叠"></a>P4302 [SCOI2003]字符串折叠</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>比较简单的区间$DP$</p><p>和<a href="https://www.luogu.com.cn/problem/CF607B"><strong>CF607B Zuma</strong></a>类似的思路</p><p>设$f[i][j]$为$s[i]$~$s[j]$的最短折叠长度</p><p>如果该子串本身可以折叠$,$就先把它预处理成它不进行划分可以产生的最小值</p><p>再去和划分成两个区间所产生的最小值进行比较即可</p><h2 id="坑点-amp-amp-感想"><a href="#坑点-amp-amp-感想" class="headerlink" title="坑点&amp;&amp;感想"></a>坑点&amp;&amp;感想</h2><ul><li><del>水题,没啥感想</del></li></ul><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> dp[MAXN][MAXN] , num[MAXN];</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now = L<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">114514</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">now++;</span><br><span class="line"><span class="keyword">if</span>(now&gt;R||s[now]!=s[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(now==R) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,inf,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">s = <span class="string">&#x27; &#x27;</span>+s; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dp[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) num[i] = num[i/<span class="number">10</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">1</span>;len&lt;n;len++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l =<span class="number">1</span>;l+len&lt;=n;l++)&#123;</span><br><span class="line"><span class="type">int</span> r = l+len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;r;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pd</span>(l,k,k+<span class="number">1</span>,r)) dp[l][r] = <span class="built_in">min</span>(dp[l][r] , dp[l][k]+<span class="number">2</span>+num[(len+<span class="number">1</span>)/(k-l+<span class="number">1</span>)]);</span><br><span class="line">dp[l][r] = <span class="built_in">min</span>(dp[l][r] , dp[l][k]+dp[k+<span class="number">1</span>][r]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[<span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.20~8.30做题笔记</title>
      <link href="/2020/08/22/8-20-8-30%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/22/8-20-8-30%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>dp题目合集</p><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://oi-wiki.org/dp/"><strong>动态规划部分简介_oi Wiki</strong></a></p><p><a href="https://www.cnblogs.com/luckyblock/p/13121167.html"><strong>DP从入土到入门_Luckyblock</strong></a> </p><hr><h1 id="8-30题"><a href="#8-30题" class="headerlink" title="8.30题"></a>8.30题</h1><h3 id="P1436-棋盘分割"><a href="#P1436-棋盘分割" class="headerlink" title="P1436 棋盘分割"></a><a href="https://www.luogu.com.cn/problem/P1436">P1436 棋盘分割</a></h3><p>暴力$dp$水题</p><h3 id="P1169-ZJOI2007-棋盘制作-amp-amp-P4147-玉蟾宫"><a href="#P1169-ZJOI2007-棋盘制作-amp-amp-P4147-玉蟾宫" class="headerlink" title="P1169 [ZJOI2007]棋盘制作&amp;&amp;P4147 玉蟾宫"></a><a href="https://www.luogu.com.cn/problem/P1169">P1169 [ZJOI2007]棋盘制作</a>&amp;&amp;<a href="https://www.luogu.com.cn/problem/P4147">P4147 玉蟾宫</a></h3><p>悬线法$dp$板子题</p><h3 id="详细"><a href="#详细" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13586720.html">详细</a></h3><p><del>明天就开学了,英语作业一个字都还没动过</del></p><p><img src="https://img2020.cnblogs.com/blog/2092833/202008/2092833-20200830221945481-1226699273.png" alt=""></p><hr><h1 id="8-29题"><a href="#8-29题" class="headerlink" title="8.29题"></a>8.29题</h1><h3 id="P3622-APIO2007-动物园"><a href="#P3622-APIO2007-动物园" class="headerlink" title="P3622 [APIO2007]动物园"></a><a href="https://www.luogu.com.cn/problem/P3622">P3622 [APIO2007]动物园</a></h3><p>较难的状压$dp$</p><h3 id="详细-1"><a href="#详细-1" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13586702.html">详细</a></h3><h3 id="P2051-AHOI2009-中国象棋"><a href="#P2051-AHOI2009-中国象棋" class="headerlink" title="P2051 [AHOI2009]中国象棋"></a><a href="https://www.luogu.com.cn/problem/P2051">P2051 [AHOI2009]中国象棋</a></h3><p>状压$dp$练习题</p><h3 id="详细-2"><a href="#详细-2" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13586341.html">详细</a></h3><hr><h1 id="8-28题"><a href="#8-28题" class="headerlink" title="8.28题"></a>8.28题</h1><h3 id="P2501-HAOI2006-数字序列"><a href="#P2501-HAOI2006-数字序列" class="headerlink" title="P2501 [HAOI2006]数字序列"></a><a href="https://www.luogu.com.cn/problem/P2501">P2501 [HAOI2006]数字序列</a></h3><p>神仙$dp$题</p><h3 id="详细-3"><a href="#详细-3" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13579988.html">详细</a></h3><h3 id="P1156-垃圾陷阱"><a href="#P1156-垃圾陷阱" class="headerlink" title="P1156 垃圾陷阱"></a><a href="https://www.luogu.com.cn/problem/P1156">P1156 垃圾陷阱</a></h3><p>背包$dp$水题</p><p>需要注意的是这里的$f$数组可能为0,要先全部赋成负数</p><hr><h1 id="8-27题"><a href="#8-27题" class="headerlink" title="8.27题"></a>8.27题</h1><p>无</p><p><del>看jojo8看上瘾了</del></p><hr><h1 id="8-26题"><a href="#8-26题" class="headerlink" title="8.26题"></a>8.26题</h1><h3 id="P1295-TJOI2011-书架"><a href="#P1295-TJOI2011-书架" class="headerlink" title="P1295 [TJOI2011]书架"></a><a href="https://www.luogu.com.cn/problem/P1295">P1295 [TJOI2011]书架</a></h3><p>线段树优化$dp$</p><h3 id="详细-4"><a href="#详细-4" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13568186.html">详细</a></h3><hr><h1 id="8-25题"><a href="#8-25题" class="headerlink" title="8.25题"></a>8.25题</h1><h3 id="P1944-最长括号匹配"><a href="#P1944-最长括号匹配" class="headerlink" title="P1944 最长括号匹配"></a><a href="https://www.luogu.com.cn/problem/P1944">P1944 最长括号匹配</a></h3><p>水题</p><h3 id="详细-5"><a href="#详细-5" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13558928.html">详细</a></h3><h3 id="P5658-括号树"><a href="#P5658-括号树" class="headerlink" title="P5658 括号树"></a><a href="https://www.luogu.com.cn/problem/P5658">P5658 括号树</a></h3><p>去年的$d1t2$</p><p>感觉比$18$年的$t2$稍微简单一点?</p><h3 id="详细-6"><a href="#详细-6" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13568454.html">详细</a></h3><h3 id="P5664-Emiya-家今天的饭"><a href="#P5664-Emiya-家今天的饭" class="headerlink" title="P5664 Emiya 家今天的饭"></a><a href="https://www.luogu.com.cn/problem/P5664">P5664 Emiya 家今天的饭</a></h3><p>很不错的一道$dp$题,穴道虚脱</p><p>被自己的一个傻逼错误卡2个多小时==</p><h3 id="详细-7"><a href="#详细-7" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13570717.html">详细</a></h3><hr><h1 id="8-24题"><a href="#8-24题" class="headerlink" title="8.24题"></a>8.24题</h1><p>无</p><p><del>打了一天的r6</del></p><hr><h1 id="8-23题"><a href="#8-23题" class="headerlink" title="8.23题"></a>8.23题</h1><h3 id="P2577-ZJOI2004-午餐"><a href="#P2577-ZJOI2004-午餐" class="headerlink" title="P2577 [ZJOI2004]午餐"></a><a href="https://www.luogu.com.cn/problem/P2577">P2577 [ZJOI2004]午餐</a></h3><p>$dp$练手好题</p><p><del>一开始题意读错了卡了半天</del></p><h3 id="详细-8"><a href="#详细-8" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13550425.html">详细</a></h3><h3 id="P4158-SCOI2009-粉刷匠"><a href="#P4158-SCOI2009-粉刷匠" class="headerlink" title="P4158 [SCOI2009]粉刷匠"></a><a href="https://www.luogu.com.cn/problem/P4158">P4158 [SCOI2009]粉刷匠</a></h3><p>通过合并同类元素来提高效率</p><p>不过据说直接做也可以过</p><h3 id="详细-9"><a href="#详细-9" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13551096.html">详细</a></h3><hr><h1 id="8-22题"><a href="#8-22题" class="headerlink" title="8.22题"></a>8.22题</h1><h3 id="P5017-摆渡车"><a href="#P5017-摆渡车" class="headerlink" title="P5017 摆渡车"></a><a href="https://www.luogu.com.cn/problem/P5017">P5017 摆渡车</a></h3><p>斜率优化模板题</p><p>当然也有不需要用斜率优化的做法</p><h3 id="详细-10"><a href="#详细-10" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13547078.html">详细</a></h3><h3 id="P2900-USACO-土地征用"><a href="#P2900-USACO-土地征用" class="headerlink" title=" P2900 [USACO]土地征用"></a><a href="https://www.luogu.com.cn/problem/P2900"> P2900 [USACO]土地征用</a></h3><p>斜率优化好题</p><p>将$x$作为第一关键字,$y$作为第二关键字进行降序排序</p><p>这样下来就保证了$x$全体有序,只需去记录那些比当前的$y<em>{max}$大的土块,把比$y</em>{max}$小的土块都去掉</p><p>从而简化了转移方程</p><h3 id="详细-11"><a href="#详细-11" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13547083.html">详细</a></h3><hr><h1 id="8-21题"><a href="#8-21题" class="headerlink" title="8.21题"></a>8.21题</h1><p>斜率优化</p><h3 id="详细-12"><a href="#详细-12" class="headerlink" title="详细"></a><a href="https://www.luogu.com.cn/blog/xcxc82/xie-shuai-you-hua">详细</a></h3><h1 id="8-20题"><a href="#8-20题" class="headerlink" title="8.20题"></a>8.20题</h1><h3 id="P3554-POI2013-LUK-Triumphal-arch"><a href="#P3554-POI2013-LUK-Triumphal-arch" class="headerlink" title="P3554 [POI2013]LUK-Triumphal arch"></a><a href="https://www.luogu.com.cn/problem/P3554">P3554 [POI2013]LUK-Triumphal arch</a></h3><p>二分答案$+$树形$DP$</p><p>通过树形$DP$来判断当前的$k$是否可行</p><h3 id="详细-13"><a href="#详细-13" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13536223.html">详细</a></h3><h3 id="P4302-SCOI2003-字符串折叠"><a href="#P4302-SCOI2003-字符串折叠" class="headerlink" title="P4302 [SCOI2003]字符串折叠"></a><a href="https://www.luogu.com.cn/problem/P4302">P4302 [SCOI2003]字符串折叠</a></h3><p>区间$dp$水题</p><h3 id="详细-14"><a href="#详细-14" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13550735.html">详细</a></h3><h3 id="P5851-USACO19DEC-Greedy-Pie-Eaters-P"><a href="#P5851-USACO19DEC-Greedy-Pie-Eaters-P" class="headerlink" title="P5851 [USACO19DEC]Greedy Pie Eaters P"></a><a href="https://www.luogu.com.cn/problem/P5851">P5851 [USACO19DEC]Greedy Pie Eaters P</a></h3><p>区间$DP$,转移方程比较独特</p><p>在枚举顺序上也有些要注意的细节</p><h3 id="详细-15"><a href="#详细-15" class="headerlink" title="详细"></a><a href="https://www.cnblogs.com/xcxc82/p/13552907.html">详细</a></h3><hr>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2900 [USACO]土地征用</title>
      <link href="/2020/08/22/p2900/"/>
      <url>/2020/08/22/p2900/</url>
      
        <content type="html"><![CDATA[<h1 id="P2900-USACO-土地征用"><a href="#P2900-USACO-土地征用" class="headerlink" title=" P2900 [USACO]土地征用"></a><a href="https://www.luogu.com.cn/problem/P2900"> P2900 [USACO]土地征用</a></h1><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给$n$块 宽$x_i$ 长$y_i$ 的土地,可以将这$n$块土地分成几个组来购买,每组所需要的购买价值为该组中的最大长度$×$最大宽度</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>斜率优化$dp$好题。</p><p>首先通过观察可以看出,当一块土地的长度和宽度都大于另一块土地且两个土地在同一组时</p><p>小的那块土地相当于”毫无用处”</p><p>不妨设法消去这些无用的土块</p><p>具体做法:</p><p>将$x$作为第一关键字,$y$作为第二关键字进行降序排序</p><p>这样下来就已经保证了$x$全体有序,只需去记录那些比当前的$y$大的土块即可</p><p>两轮下来相当于满足了$x[i]$单调递减，$y[i]$单调递增</p><p>设$f[i]为购买前$i$个”有用的”土块所需的最小花费$</p><p>易得状态转移方程:</p><ul><li>$f[i] = min(f[j]+x[j+1]*y[i])$</li></ul><p>再根据斜优套路,得到不等式:</p><ul><li>$\dfrac{f[j]-f[k]}{x[k+1]-x[j+1]}&gt;y[i]$</li></ul><p>利用单调队列去维护即可,时间复杂度$O(tot)$</p><h2 id="坑点-amp-amp-感想"><a href="#坑点-amp-amp-感想" class="headerlink" title="坑点&amp;&amp;感想"></a>坑点&amp;&amp;感想</h2><ul><li><del>十年OI一场空,不开long long见祖宗</del></li></ul><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">record</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> record k)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==k.x)&#123;</span><br><span class="line"><span class="keyword">return</span> y&gt;k.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x&gt;k.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;d[MAXN];</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> maxn = <span class="number">-114514</span>;</span><br><span class="line"><span class="type">int</span> n,f[MAXN];</span><br><span class="line"><span class="type">int</span> q[MAXN];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">slope</span><span class="params">(<span class="type">int</span> j,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>*((f[j] - f[k]) / (d[k+<span class="number">1</span>].x - d[j+<span class="number">1</span>].x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;d[i].x,&amp;d[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(maxn&gt;=d[i].y) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> maxn = d[i].y,d[++tot] = d[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span> ,r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r&amp;&amp;<span class="built_in">slope</span>(q[l],q[l+<span class="number">1</span>])&lt;=d[i].y) l++;</span><br><span class="line">f[i] = f[q[l]]+d[q[l]+<span class="number">1</span>].x*d[i].y;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r&amp;&amp;<span class="built_in">slope</span>(q[r<span class="number">-1</span>],q[r])&gt;=<span class="built_in">slope</span>(q[r],i)) r--;</span><br><span class="line">q[++r] = i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;f[tot];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5071 摆渡车</title>
      <link href="/2020/08/22/p5071/"/>
      <url>/2020/08/22/p5071/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://www.luogu.com.cn/problem/P5017">题目链接</a></strong></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>有$n$个人,每个人都在一个时间点去等车,求当车何时出发时才能让所有人的等待时间之和最小</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>斜率优化<del>模板题</del></p><p>(似乎大佬们都是用更简单的方法来做的?)</p><p>设$person[i]$为前$i$分钟到达的人数之和</p><p>$sum[i]$为前$i$分钟为前$i$分钟内到达时间之和,$f[i]$为从$i$时刻发车所需要的最小等待时间</p><p><del>根据套路</del>易得状态转移方程$:$</p><p>$f[i] = min(f[j]+(person[i] - person[j])*i  -  (sum[i] - sum[j]))$</p><p>根据斜率优化套路:</p><p>$f[i] = min(f[j]-person[j]<em>i+sum[j])-sum[i]+person[i]</em>i$</p><p>当从$k$转移比从$j$转移更优且$k&gt;j$时,有:</p><p>$f[j]-person[j]<em>i+sum[j]&lt;f[k]-person[k]</em>i+sum[k]$ </p><p>移项得:</p><p>$\dfrac{f[j]-f[k]+sum[j]-sum[k]}{f[k]-f[j]}&gt;i$</p><p>用单调队列来维护即可,总复杂度$O(t)$</p><p>设$tmax$为最后一个人的到来时间,为了让所有人都上车,最后一次发车一定要在区间$[tmax,tmax+m)$中</p><p>最终答案即为在区间$[tmax,tmax+m)$中最小的$f[x]$</p><h2 id="坑点-amp-amp-感想"><a href="#坑点-amp-amp-感想" class="headerlink" title="坑点&amp;&amp;感想"></a>坑点&amp;&amp;感想</h2><ul><li><p>$f[k] - f[j]$可能为$0$,需要特判</p></li><li><p>转移时,$i$要从时间$0$开始</p></li><li><p>在$i&lt;m$时,其本身一定是第一个发车点,无需转移</p></li></ul><h2 id="code"><a href="#code" class="headerlink" title="$code:$"></a>$code:$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">4000010</span>;</span><br><span class="line"><span class="type">int</span> f[MAXN],sum[MAXN];</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"><span class="type">int</span> maxn;</span><br><span class="line"><span class="type">int</span> person[MAXN];</span><br><span class="line"><span class="type">int</span> q[MAXN];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">slope</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(person[j] - person[k]==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>*((f[j]+sum[j]-f[k]-sum[k])*MAXN);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>*((f[j]-f[k]+sum[j]-sum[k])/(person[j] - person[k]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">person[k]++;</span><br><span class="line">maxn = <span class="built_in">max</span>(k,maxn);</span><br><span class="line">sum[k]+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m+maxn;i++)&#123;</span><br><span class="line">sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">person[i]+=person[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>,r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;maxn+m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=m)&#123;</span><br><span class="line"><span class="type">int</span> now = i-m;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r&amp;&amp;<span class="built_in">slope</span>(q[r<span class="number">-1</span>],q[r])&gt;=<span class="built_in">slope</span>(q[r],now)) r--;</span><br><span class="line">q[++r] = now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r&amp;&amp;<span class="built_in">slope</span>(q[l],q[l+<span class="number">1</span>])&lt;=i) l++;</span><br><span class="line">f[i] = person[i]*i - sum[i];</span><br><span class="line"><span class="keyword">if</span>(l&lt;=r) f[i] = <span class="built_in">min</span>(f[i],(f[q[l]] + (person[i] - person[q[l]])*i-(sum[i]-sum[q[l]])));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=maxn;i&lt;maxn+m;i++)&#123;</span><br><span class="line">ans = <span class="built_in">min</span>(f[i] , ans);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3554 [POI2013]LUK-Triumphal arch</title>
      <link href="/2020/08/20/p3554/"/>
      <url>/2020/08/20/p3554/</url>
      
        <content type="html"><![CDATA[<h1 id="P3554-POI2013-LUK-Triumphal-arch-题解"><a href="#P3554-POI2013-LUK-Triumphal-arch-题解" class="headerlink" title="P3554 [POI2013]LUK-Triumphal arch 题解"></a>P3554 [POI2013]LUK-Triumphal arch 题解</h1><h2 id="间隙"><a href="#间隙" class="headerlink" title="间隙"></a><a href="https://www.luogu.com.cn/problem/P3554">间隙</a></h2><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li><h2 id="树形-DP-二分答案"><a href="#树形-DP-二分答案" class="headerlink" title="树形$DP$ , 二分答案"></a>树形$DP$ , 二分答案</h2></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题意翻译里已经写的很清楚了,这里就不重复一遍了</p><p>首先这里的答案$k$具有可二分性,考虑二分答案</p><p>当$B$走到一个节点$u$时,第一步要做的肯定是把$u$的儿子全部都涂色</p><p>如果一个节点的儿子数大于当前的$k$,则无论怎么涂都会输</p><p>反之,说明除了涂自己的儿子外还可以”<strong>提前</strong>“涂其他的节点</p><p>设$f[i]$为以$i$根节点的子树需要<strong>其祖先”提前”染色多少个点才能覆盖整个子树</strong></p><p>易得状态转移方程:$f[u] = max(0  , \sum f[v]+1-k)$</p><p>具体解释$:$</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/i6tgjcmc.png" alt=""></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>直接二分答案$k$,对于每一个$k$进行$dp$</p><p>如果$f[1]$为$0$,则说明可行</p><p>反之说明不可行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">1</span>],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> f[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;<span class="comment">//前向星</span></span><br><span class="line">edge[++cnt].to = v;</span><br><span class="line">edge[cnt].next = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v,u,k);</span><br><span class="line">sum=sum+f[v]+<span class="number">1</span>;<span class="comment">//记录</span></span><br><span class="line">&#125;</span><br><span class="line">f[u] = <span class="built_in">max</span>(<span class="number">0</span>,sum-k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="built_in">add</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>,r = <span class="number">10e10</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;<span class="comment">//二分答案</span></span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,mid);<span class="comment">//dp</span></span><br><span class="line"><span class="keyword">if</span>(f[<span class="number">1</span>]==<span class="number">0</span>)&#123;<span class="comment">//如果f[1]为0 说明可行</span></span><br><span class="line">ans = mid;</span><br><span class="line">r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;反之,不可行</span><br><span class="line"><span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树上启发式合并</title>
      <link href="/2020/08/16/%E6%A0%91%E4%B8%8A%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
      <url>/2020/08/16/%E6%A0%91%E4%B8%8A%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="模板题-CF600E-Lomsat-gelral"><a href="#模板题-CF600E-Lomsat-gelral" class="headerlink" title="模板题: CF600E Lomsat gelral"></a>模板题: <a href="https://www.luogu.com.cn/problem/CF600E">CF600E Lomsat gelral</a></h1><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一棵树有n个结点，每个结点都是一种颜色，每个颜色有一个编号，求树中每个子树的最多的颜色编号的和。</p><h1 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h1><ul><li>启发式算法:启发式算法是指基于经验和直观感觉，从而对一些算法的优化。</li></ul><p>举例:并查集的按秩合并</p><p>在并查集的按秩合并中,我们将小的集合往大的集合上合并,这样明显有利于加快并查集的祖先查找</p><h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><ul><li>首先是一次$bfs$,求出每个节点的重儿子</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">size[u] = <span class="number">1</span> ;<span class="comment">//子树大小</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]]) son[u] = v;<span class="comment">//找重儿子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来定义两个数组$cnt[]$和$c[]$,分别代表存放的某颜色在“<strong>当前</strong>”子树中的数量和存放某节点的颜色</p><p>这里的”当前”指的就是目前正在处理的节点(如果给每个节点都开一个$cnt$的话则会$MLE$)</p><ul><li><p>如果目前正在处理的节点是轻儿子,就把它的答案计入并删除其贡献</p></li><li><p>反之,如果是重儿子,也把它的答案计入,但不删除其贡献</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cunt</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">c[color[u]]+=val;<span class="comment">//val为1代表计入贡献,为-1代表删除贡献</span></span><br><span class="line"><span class="keyword">if</span>(c[color[u]] &gt; maxn)&#123;<span class="comment">//最多的颜色</span></span><br><span class="line">maxn = c[color[u]];</span><br><span class="line">sum = color[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[color[u]] == maxn)&#123;</span><br><span class="line">sum+=color[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==maxson||v==fa) <span class="keyword">continue</span>;<span class="comment">//如果是u的重儿子,直接跳过</span></span><br><span class="line"><span class="built_in">cunt</span>(v,u,val);<span class="comment">//dfs暴力计贡献</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> keep)</span></span>&#123;<span class="comment">//keep代表是否保留该贡献</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==son[u]||v==fa) <span class="keyword">continue</span>;<span class="comment">//是重儿子直接跳过</span></span><br><span class="line"><span class="built_in">dfs2</span>(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(son[u])&#123;<span class="comment">//如果有重儿子</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs2</span>(son[u],u,<span class="number">1</span>);<span class="comment">//keep为1,保留其贡献</span></span><br><span class="line">maxson = son[u];<span class="comment">//记u节点的重儿子</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cunt</span>(u,fa,<span class="number">1</span>);<span class="comment">//暴力统计其非子树贡献</span></span><br><span class="line">maxson = <span class="number">0</span>;</span><br><span class="line">ans[u] = sum;<span class="comment">//记录答案</span></span><br><span class="line"><span class="keyword">if</span>(!keep)&#123;<span class="comment">//如果不是重儿子,则将其贡献删除</span></span><br><span class="line"><span class="built_in">cunt</span>(u,fa,<span class="number">-1</span>); </span><br><span class="line">sum = maxn = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个$dfs$大致可以分为下面四个流程:</p><ul><li><p>记录轻儿子及其子树的答案且删除其贡献</p></li><li><p>记录重儿子及其子树的答案且不删除其贡献</p></li><li><p>暴力统计$u$及其所有轻儿子的贡献合并到刚算出的重儿子信息里</p></li><li><p>删除该删除的贡献</p></li></ul><p><img src="https://img2020.cnblogs.com/blog/2092833/202008/2092833-20200816183326748-1026754225.png" alt=""></p><p>这样一轮下来相当于是遍历了两遍轻儿子,一遍重儿子,显然效率是较高的</p><p>时间复杂度为$O(nlogn)$,<del>具体怎么证还不太清楚</del></p><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> next,to;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> size[MAXN],son[MAXN];</span><br><span class="line"><span class="type">int</span> color[MAXN],c[MAXN];</span><br><span class="line"><span class="type">int</span> maxn , sum;</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">1</span>],n,cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ans[MAXN] , maxson;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">      cnt++;</span><br><span class="line">      edge[cnt].to = v;</span><br><span class="line">      edge[cnt].next=head[u];</span><br><span class="line">      head[u]=cnt;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">size[u] = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]]) son[u] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cunt</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">c[color[u]]+=val;</span><br><span class="line"><span class="keyword">if</span>(c[color[u]] &gt; maxn)&#123;</span><br><span class="line">maxn = c[color[u]];</span><br><span class="line">sum = color[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[color[u]] == maxn)&#123;</span><br><span class="line">sum+=color[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==maxson||v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">cunt</span>(v,u,val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> keep)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==son[u]||v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(son[u])&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs2</span>(son[u],u,<span class="number">1</span>);</span><br><span class="line">maxson = son[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cunt</span>(u,fa,<span class="number">1</span>);</span><br><span class="line">maxson = <span class="number">0</span>;</span><br><span class="line">ans[u] = sum;</span><br><span class="line"><span class="keyword">if</span>(!keep)&#123;</span><br><span class="line"><span class="built_in">cunt</span>(u,fa,<span class="number">-1</span>); </span><br><span class="line">sum = maxn = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;color[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="built_in">add</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><del>最近沉迷stg无法自拔了</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tarjan算法学习笔记</title>
      <link href="/2020/08/12/tarjan%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/12/tarjan%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h1 id="缩点"><a href="#缩点" class="headerlink" title="缩点"></a><a href="https://www.luogu.com.cn/problem/P3387">缩点</a></h1><h2 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h2><ul><li><p>强连通：如果两个顶点可以相互通达，则称两个顶点强连通。</p></li><li><p>如果有向图$G$的每两个顶点都 强连通，称$G$是一个强连通图。</p></li><li><p>非强连通图有向图的极大强连通子图，称为强连通分量。</p></li></ul><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>定义两个数组,$dfn[ ]$和$low[]$</p><p>$dfn[u]$表示$u$节点第一次被$bfs$到的时间戳</p><p>$low[u]$表示$u$节点能”回溯”到的最早时间 </p><p>如果一个节点$u$的儿子$v$的$low[]$小于自己的$low[]$,说明该节点可以”回溯”到$u$之前,会产生一个强连通分量,记录这些点,将其合并成一个新点即可</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><ul><li><p>每$dfs$一个点$u$时,先把该点的$low[u]$和$dfn[u]$初始化成该点的时间戳,同时把这个点压入一个栈中</p></li><li><p>遍历其所有儿子,如果一个儿子没有被访问过,继续向下$dfs$,同时更新节点$u$的$low[u]$</p></li><li><p>反之,说明该儿子出现在$u$之前,无需再次$dfs$,直接更新节点$u$的$low[u]$即可</p></li></ul><ul><li>最后,如果一个节点的$dfn[]$跟$low$相等,说明该点是一个强连通分量中的起点,将栈中的所有该节点前的值全部取出,合并成一个新的节点</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;<span class="comment">//初始化</span></span><br><span class="line">s[++top] = u;<span class="comment">//压入栈</span></span><br><span class="line">vis[u] = <span class="number">1</span>;<span class="comment">//被访问过</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;<span class="comment">//遍历所有儿子</span></span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);<span class="comment">//向下遍历</span></span><br><span class="line">low[u] = <span class="built_in">min</span>(low[v] , low[u]);<span class="comment">//更新low</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;<span class="comment">//节点被访问过,直接更新</span></span><br><span class="line">low[u] = <span class="built_in">min</span>(low[v] , low[u]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[u]==dfn[u])&#123;<span class="comment">//如果是一个强连通分量的起点</span></span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(v = s[top--])&#123;</span><br><span class="line">vis[v] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(v==u) <span class="keyword">break</span>;<span class="comment">//将u前面的值全部取出</span></span><br><span class="line">w[u]+=w[v];<span class="comment">//合并点权</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="割点"><a href="#割点" class="headerlink" title="割点"></a><a href="https://www.luogu.com.cn/problem/P3388">割点</a></h1><h2 id="一些定义-1"><a href="#一些定义-1" class="headerlink" title="一些定义"></a>一些定义</h2><ul><li>割点:将一个无向图中的一个节点及与其相连的所有的边都删去后,整个图不再联通,则成该点为该图的一个割点</li></ul><h2 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h2><p>跟缩点大同小异的思路。</p><p>既然去除该点可以让整个图不再联通,说明其儿子与其上面的节点都无连接,也就是无法”回溯”到该点之前的点</p><p>直接用跟缩点一样的思路去写即可。</p><p>要注意的是 $:$ 这里的$low[u]$不再是直接更新成$low[v]$,而是更新为$dfn[v]$,在无向图中,每个点都有一条”返祖”边,这时把子节点的$low[]$值赋为父节点的$low[]$，就可能导致其$low[]==$其父节点$low[]&lt;$其父节点$dfn[]$</p><h2 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程"></a>算法流程</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;<span class="comment">//初始化</span></span><br><span class="line"><span class="type">int</span> child = <span class="number">0</span>;<span class="comment">//根节点的儿子数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v,fa);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u] , low[v]);<span class="comment">//更新</span></span><br><span class="line"><span class="keyword">if</span>(low[v]&gt;=dfn[u]&amp;&amp;u!=fa)&#123;<span class="comment">//有一个子节点满足条件即可</span></span><br><span class="line">cut[u]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==fa) child++;<span class="comment">//如果是根节点,增加儿子数</span></span><br><span class="line">&#125;</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],dfn[v]);<span class="comment">//更新</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==fa&amp;&amp;child&gt;=<span class="number">2</span>) cut[u]=<span class="number">1</span>;<span class="comment">//如果根节点数量大于2,说明根节点可以成为割点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="缩点练习"><a href="#缩点练习" class="headerlink" title="缩点练习"></a>缩点练习</h1><p><a href="https://www.luogu.com.cn/problem/P2341">P2341 [USACO03FALL][HAOI2006]受欢迎的牛 G</a></p><p><a href="https://www.luogu.com.cn/problem/P2863">P2863 [USACO06JAN]The Cow Prom S</a></p><p><a href="https://www.luogu.com.cn/problem/P2746">P2746 [USACO5.3]校园网Network of Schools</a></p><p><a href="https://www.luogu.com.cn/problem/P1726">P1726 上白泽慧音</a></p><p><a href="https://www.luogu.com.cn/problem/P1262">P1262 间谍网络</a></p><p><a href="https://www.luogu.com.cn/problem/P5676">P5676 [GZOI2017]小z玩游戏</a></p><h2 id="P2341-USACO03FALL-受欢迎的牛-G"><a href="#P2341-USACO03FALL-受欢迎的牛-G" class="headerlink" title="P2341 [USACO03FALL]受欢迎的牛 G"></a>P2341 [USACO03FALL]受欢迎的牛 G</h2><p>$tarjan$经典题。</p><p>首先是缩点,将每个强联通分量都分成一个组,并记录这个组的出度和大小,如果只有一个组的出度为$0$,则说明该组中的所有奶牛都可以成为神犇(如果有两个组的出度均为零的话则说明%无法完全传递)</p><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;</span><br><span class="line">vis[u] = <span class="number">1</span>,s[++top] = u;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line">scc[u] = ++k;<span class="comment">//记录分组</span></span><br><span class="line"><span class="keyword">while</span>(v=s[top--])&#123;</span><br><span class="line">vis[v] = <span class="number">0</span>;</span><br><span class="line">scc[v] = k;<span class="comment">//记录分组</span></span><br><span class="line">size[k]++;<span class="comment">//记录大小</span></span><br><span class="line"><span class="keyword">if</span>(v==u) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P2863-USACO06JAN-The-Cow-Prom-S"><a href="#P2863-USACO06JAN-The-Cow-Prom-S" class="headerlink" title="[P2863 [USACO06JAN]The Cow Prom S]"></a>[P2863 [USACO06JAN]The Cow Prom S]</h2><p>简单的$tarjan$模板题。</p><p><del>实际上比模板题还要简单</del></p><p>判断栈头是否为$u$,若不为$u$,则说明有两个及以上的节点,若是,说明只有$u$一个节点</p><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;</span><br><span class="line">vis[u] = <span class="number">1</span>,s[++top] = u;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(s[top]!=u) ans++;<span class="comment">//特判</span></span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(v=s[top--])&#123;</span><br><span class="line">vis[v] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(v==u) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="P2746-USACO5-3-校园网Network-of-Schools"><a href="#P2746-USACO5-3-校园网Network-of-Schools" class="headerlink" title="[P2746 [USACO5.3]校园网Network of Schools]"></a>[P2746 [USACO5.3]校园网Network of Schools]</h2><p> 给一张图,求:</p><ul><li><p>图中入度为零的点的个数</p></li><li><p>把整张图变成强连通图的最少添边值</p><p>第一问很简单,直接统计一下即可,对于第二问,由于强连通图中每个点的入度和出度都不为零,感性理解一下,可以先将那些出度为0的点和入度为0的点互补,由于出度为0的点的数量和入度为0的点数量可能不一致,因此最后还要将那些剩余的点和其他任意一个点相连</p><p>最后的答案即为出度为零的点的数量和入读为零的点的数量中的最大值。</p><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=head[i];j;j=e[j].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[j].to;</span><br><span class="line"><span class="keyword">if</span>(scc[i]!=scc[v])&#123;</span><br><span class="line">in[scc[v]]++;<span class="comment">//记录入度</span></span><br><span class="line">out[scc[i]]++;<span class="comment">//记录出度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ansin = <span class="number">0</span>,ansout = <span class="number">0</span>;<span class="comment">//出度数和入度数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i]==<span class="number">0</span>)&#123;<span class="comment">//记录入度</span></span><br><span class="line">ansin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(out[i]==<span class="number">0</span>)&#123;<span class="comment">//记录出度</span></span><br><span class="line">ansout++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;<span class="comment">//特判,如果该图已经是一个强连通图了,直接输出1和0即可</span></span><br><span class="line">    cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;ansin&lt;&lt;endl&lt;&lt;<span class="built_in">max</span>(ansin,ansout);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="P1726-上白泽慧音"><a href="#P1726-上白泽慧音" class="headerlink" title="P1726 上白泽慧音"></a>P1726 上白泽慧音</h2><p>车万题面好评</p><p>也是一道挺模板的题。</p><p>大致题意就是说求最大且字典序最小的那个强联通分量。</p><p>直接跑一遍$tarjan$记录每个点所在的强连通分量和该强联通分量的大小,然后一遍$for$循环求出最大的那个组,再将在那个组中的节点输出即可</p><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;</span><br><span class="line">vis[u] = <span class="number">1</span>,s[++top] = u;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">scc[u] = ++k;<span class="comment">//新分组</span></span><br><span class="line"><span class="keyword">while</span>(v=s[top--])&#123;</span><br><span class="line">vis[v] = <span class="number">0</span>;</span><br><span class="line">scc[v] = k;<span class="comment">//记录每个点所在的组</span></span><br><span class="line">size[k]++;<span class="comment">//记录该组的大小</span></span><br><span class="line"><span class="keyword">if</span>(v==u) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1262-间谍网络"><a href="#P1262-间谍网络" class="headerlink" title="P1262 间谍网络"></a>P1262 间谍网络</h2><p>直接跑一遍缩点，由于强连通分量中的每个点都是互相联通的,一个强联通分量中的最少花费资金也就是那个环里罪犯所需资金最小的</p><p>最后检查一下有无未访问的点,若有,直接输出$NO$,$return$,若无,那就接着记录每个点的入度,将入度为0的组的权值全部加起来即可</p><p>$code:$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;</span><br><span class="line">s[++top] = u;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[v] , low[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[v] , low[u]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line">tot++;</span><br><span class="line"><span class="keyword">while</span>(v = s[top--])&#123;</span><br><span class="line">vis[v] = <span class="number">0</span>;</span><br><span class="line">c[v] = tot;</span><br><span class="line">sum[tot] = <span class="built_in">min</span>(sum[tot],w[v]);<span class="comment">//取min</span></span><br><span class="line"><span class="keyword">if</span>(v==u) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="P5676-GZOI2017-小z玩游戏"><a href="#P5676-GZOI2017-小z玩游戏" class="headerlink" title="P5676 [GZOI2017]小z玩游戏"></a>P5676 [GZOI2017]小z玩游戏</h2><p>对于这道题,首先想到的肯定是直接$n^2$建边</p><p>但会发现数据太大,复杂度接受不了</p><p>所以要考虑更优秀的建边方法</p><ul><li><p>建一个由有趣程度到游戏的边</p></li><li><p>建一个由游戏到兴趣程度的边</p></li><li><p>建立一个兴趣程度整数倍的边</p></li></ul><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//从有趣程度到该游戏</span></span><br><span class="line"><span class="type">int</span> u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;u);</span><br><span class="line"><span class="built_in">add</span>(n+u,i);</span><br><span class="line">maxn = <span class="built_in">max</span>(maxn , u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//从该游戏到兴趣程度</span></span><br><span class="line"><span class="type">int</span> u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;u);</span><br><span class="line"><span class="built_in">add</span>(i,n+u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxn;i++)&#123;<span class="comment">//兴趣程度的整数倍</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j*i&lt;=maxn;j++)&#123;</span><br><span class="line"><span class="built_in">add</span>(n+i,n+j*i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于那些存在兴趣程度整数倍的游戏,相当于是连上了两个游戏</p><p>而对于那些不存在的游戏,相当于是连了一个虚点,$rt$</p><p><img src="https://img2020.cnblogs.com/blog/2092833/202008/2092833-20200812155727508-655328923.png" alt=""></p><h1 id="割点练习"><a href="#割点练习" class="headerlink" title="割点练习"></a>割点练习</h1><p><a href="https://www.luogu.com.cn/problem/P5058">P5058 [ZJOI2004]嗅探器</a></p><p><a href="https://www.luogu.com.cn/problem/P3225">P3225 [HNOI2012]矿场搭建</a></p><h2 id="P5058-ZJOI2004-嗅探器"><a href="#P5058-ZJOI2004-嗅探器" class="headerlink" title="P5058 [ZJOI2004]嗅探器"></a><a href="https://www.luogu.com.cn/problem/P5058">P5058 [ZJOI2004]嗅探器</a></h2><p>要满足同时能收到$A$和$B$的信息的话要满足两个条件:</p><ul><li><p>$u$是割点</p></li><li><p>$A$或$B$在$v$子树内（包括$v$)且$B$或$A$不在$v$子树内(这样才能把$A$,$B$两个点的信号都收集到)</p></li></ul><p>因此,如果要成为满足条件的点,必须要满足:</p><ul><li>$dfn[v]&lt;=dfn[a]$&amp;&amp;$dfn[v]&gt;dfn[b]$ ($A$在子树内,$B$不在)</li></ul><p>或</p><ul><li>$dfn[v]&lt;=dfn[b]$&amp;&amp;dfn$[v]&gt;dfn[a]$($B$在子树内,$A$不在)</li></ul><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v,u);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[v] , low[u]);</span><br><span class="line"><span class="keyword">if</span>(low[v]&gt;=dfn[u]&amp;&amp;u!=a&amp;&amp;u!=b&amp;&amp;dfn[v]&lt;=dfn[a]&amp;&amp;dfn[v]&gt;dfn[b])&#123;<span class="comment">//第一种情况</span></span><br><span class="line">ans = <span class="built_in">min</span>(ans , u);<span class="comment">//取最小的点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[v]&gt;=dfn[u]&amp;&amp;u!=a&amp;&amp;u!=b&amp;&amp;dfn[v]&lt;=dfn[b]&amp;&amp;dfn[v]&gt;dfn[a])&#123;<span class="comment">//第二种情况</span></span><br><span class="line">ans = <span class="built_in">min</span>(ans , u);<span class="comment">//取最小的点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(v!=fa) low[u] = <span class="built_in">min</span>(low[u] , dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分学习笔记</title>
      <link href="/2020/08/07/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/07/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p> 树链剖分，就是将一颗树分成若干个编号连续的链,将树上问题转换为线性问题,降低问题的处理难度。</p><h2 id="模板题-P3384-【模板】轻重链剖分"><a href="#模板题-P3384-【模板】轻重链剖分" class="headerlink" title="模板题:P3384 【模板】轻重链剖分"></a>模板题:<a href="https://www.luogu.com.cn/problem/P3384">P3384 【模板】轻重链剖分</a></h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给一颗节点数为$n$的带点权树,有以下几种操作:</p><ul><li><p>将树从 $x$ 到 $y$ 结点最短路径上所有节点的值都加上 $z$</p></li><li><p>求从 $x$ 到 $y$ 节点最短路径上的所有 节点值之和</p></li><li><p>以 $x$ 为根节点的子树内所有节点值都加上 $z$。</p></li><li><p>求以 $x$ 为根节点的子树内所有节点值之和</p></li></ul><p>数据范围:$1\le N\le10^5$</p><h2 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h2><ul><li><p>重儿子：以一个非叶子节点中的一个儿子为根的子树最大的那一个儿子称为重儿子</p></li><li><p>轻儿子：一个非叶子节点中除了重儿子以外的儿子</p></li><li><p>重边：结点与其重儿子的边称为重边</p></li><li><p>轻边：结点与其轻儿子的边称为轻边</p></li><li><p>重链：由重边组成的路径</p></li><li><p>轻链：由轻边组成的路径</p></li></ul><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>首先是两次$DFS$</p><p>第一次求出子树大小,父节点,深度,重儿子这些之后要用的东西</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f,<span class="type">int</span> deep)</span></span>&#123;</span><br><span class="line">dep[u] = deep;<span class="comment">//深度</span></span><br><span class="line">fa[u] = f;<span class="comment">//父亲节点</span></span><br><span class="line">size[u] = <span class="number">1</span>;<span class="comment">//初始化子树大小</span></span><br><span class="line"><span class="type">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i = e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u,deep+<span class="number">1</span>);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line">    <span class="keyword">if</span>(size[v]&gt;maxson) son[u] = v,maxson = size[v];<span class="comment">//重儿子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次$dfs$则是将树上的节点重新编号,划分成若干条链</p><p><strong>每次都去选取自己的重儿子进行连接</strong>,这样可以尽可能的让一条链够长</p><p>其余的轻儿子则作为另一条链的开头</p><p>画成图的话大概是这样:</p><p>(ps:图中的红色节点均为重儿子)</p><p><img src="https://img2020.cnblogs.com/blog/2092833/202008/2092833-20200807180043859-1789457354.png" alt=""></p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;<span class="comment">//topf为一条链的头</span></span><br><span class="line">id[u] = ++tot;<span class="comment">//重新编号,赋值</span></span><br><span class="line">val[tot] = w[u];</span><br><span class="line">top[u] = topf;<span class="comment">//记录链头,之后有用</span></span><br><span class="line"><span class="keyword">if</span>(!son[u]) <span class="keyword">return</span>;<span class="comment">//为叶子节点</span></span><br><span class="line"><span class="built_in">dfs2</span>(son[u],topf);<span class="comment">//以重儿子向下继续连接</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;<span class="comment">//</span></span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);其余的边则作为新一条链的开头</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用线段树维护这些链</p><p>对于操作1跟操作2</p><p>每次查询和修改从u到v的路径时</p><p>只需将低的那个点跳到上条链的结尾,也就是自己所在的链的头的父节点,同时查询/修改跳过的这段链的值即可</p><p><img src="https://img-blog.csdnimg.cn/20200807175445981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTc0NTMw,size_16,color_FFFFFF,t_70" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qb</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;<span class="comment">//操作1~5</span></span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])&#123;<span class="comment">//如果不在同一条链上</span></span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);<span class="comment">//跳高度低的那个</span></span><br><span class="line">ans+=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[u]],id[u]);<span class="comment">//查询该端的值,修改也同理</span></span><br><span class="line">ans%=mo;</span><br><span class="line">u = fa[top[u]];<span class="comment">//跳到链头的父节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">ans+=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[u],id[v]);<span class="comment">//操作6</span></span><br><span class="line">ans%=mo;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>对于操作$3,4$,由于是$dfs$,其子树的编号也一定是连续的</p><p>直接查询/修改区间$[id[u],id[u]+size[u]-1]$即可</p><p>($id[u]$为该节点重组后的编号,$size[u]$为子树大小)</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson (node&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson (node&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> len (r-l+1)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,next;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> w[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m,mo;</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">2</span>],cnt = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> dep[MAXN],fa[MAXN],son[MAXN],size[MAXN];</span><br><span class="line"><span class="type">int</span> id[MAXN],val[MAXN],top[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">edge[cnt].u=u;</span><br><span class="line">    edge[cnt].v=v;</span><br><span class="line">    edge[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> f,<span class="type">int</span> deep)</span></span>&#123;</span><br><span class="line">dep[x] = deep;</span><br><span class="line">fa[x] = f;</span><br><span class="line">size[x] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v= edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x,deep+<span class="number">1</span>);</span><br><span class="line">size[x]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;maxson) son[x] = v,maxson = size[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">id[x] = ++tot;</span><br><span class="line">val[tot] = w[x];</span><br><span class="line">top[x] = topf;</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[x],topf);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa[x]||v==son[x]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"><span class="type">int</span> tag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].sum = (tree[lson].sum + tree[rson].sum)%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].sum = val[l];</span><br><span class="line"><span class="keyword">if</span>(tree[node].sum&gt;mo) tree[node].sum%=mo;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].tag==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    tree[lson].tag+=tree[node].tag;</span><br><span class="line">    tree[rson].tag+=tree[node].tag;</span><br><span class="line">    tree[lson].sum+=tree[node].tag*(len-(len&gt;&gt;<span class="number">1</span>));</span><br><span class="line">    tree[rson].sum+=tree[node].tag*(len&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    tree[lson].tag%=mo;</span><br><span class="line">    tree[rson].tag%=mo;</span><br><span class="line">tree[lson].sum%=mo;</span><br><span class="line">tree[rson].sum%=mo;</span><br><span class="line">tree[node].tag = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;</span><br><span class="line">tree[node].tag+=k;</span><br><span class="line">tree[node].sum+=k*(r-l+<span class="number">1</span>);</span><br><span class="line">tree[node].tag%=mo;</span><br><span class="line">tree[node].sum%=mo;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node,l,r);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(lson,l,mid,x,y,k);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) <span class="built_in">change</span>(rson,mid+<span class="number">1</span>,r,x,y,k);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;</span><br><span class="line"><span class="keyword">return</span> tree[node].sum%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node,l,r);</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) res+=<span class="built_in">query</span>(lson,l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) res+=<span class="built_in">query</span>(rson,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">res%=mo;</span><br><span class="line"><span class="keyword">return</span> res%mo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;tree[node].sum&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;tree[node].tag&lt;&lt;endl;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">test</span>(lson,l,mid);</span><br><span class="line">    <span class="built_in">test</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qb</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">ans+=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[u]],id[u]);</span><br><span class="line">ans%=mo;</span><br><span class="line">u = fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">ans+=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[u],id[v]);</span><br><span class="line">ans%=mo;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ub</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[u]],id[u],k);</span><br><span class="line">u = fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[u],id[v],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> root;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;root,&amp;mo);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">    <span class="built_in">add</span>(u,v);</span><br><span class="line">    <span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(root,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(root,root);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout&lt;&lt;dep[i]&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;val[i]&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;size[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="type">int</span> k,x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line"><span class="built_in">ub</span>(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">qb</span>(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[x]+size[x]<span class="number">-1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[x]+size[x]<span class="number">-1</span>)%mo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><del>话说树剖的好多题都好裸啊</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础线段树</title>
      <link href="/2020/08/06/%E5%9F%BA%E7%A1%80%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2020/08/06/%E5%9F%BA%E7%A1%80%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="P3373-【模板】线段树-2"><a href="#P3373-【模板】线段树-2" class="headerlink" title="P3373 【模板】线段树 2"></a><a href="https://www.luogu.com.cn/problem/P3373">P3373 【模板】线段树 2</a></h2><p>设$mtag$为乘法标记,$atag$为加法标记</p><p>对于下放后的每一个区间来说,$x=x<em>mtag+atag</em>len$(式$1$)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/tbtb4rli.png" alt=""></p><p>$x=x\cdot mtag_2+len\cdot atag_2=(x\cdot mtag_2+len\cdot atag_2)\cdot mtag_1+atag_1\cdot len$</p><p>$=x\cdot mtag_2\cdot mtag_1+len*atag_2\cdot mtag_1+atag_1\cdot len$</p><p>$=x\cdot (mtag_2\cdot mtag_1)+len\cdot (atag_2\cdot mtag_1+atag_1)$</p><p>再根据前面的式$1$,易得</p><p>$mtag_2 = mtag_1\cdot mtag_2$</p><p>$atag_2=atag_2\cdot mtag_1+atag_2$</p><p>核心(下放)代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(tree2 *tree,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree-&gt;lazym==<span class="number">1</span>&amp;&amp;tree-&gt;lazyp==<span class="number">0</span>||tree-&gt;lson==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tree-&gt;lson-&gt;x = (tree-&gt;lson-&gt;x*tree-&gt;lazym+(<span class="type">long</span> <span class="type">long</span>)tree-&gt;lazyp*(mid-l+<span class="number">1</span>))%mo;</span><br><span class="line">tree-&gt;rson-&gt;x = (tree-&gt;rson-&gt;x*tree-&gt;lazym+(<span class="type">long</span> <span class="type">long</span>)tree-&gt;lazyp*(r-mid))%mo;</span><br><span class="line">tree-&gt;lson-&gt;lazym = (tree-&gt;lazym*tree-&gt;lson-&gt;lazym)%mo;</span><br><span class="line">tree-&gt;rson-&gt;lazym = (tree-&gt;lazym*tree-&gt;rson-&gt;lazym)%mo;</span><br><span class="line">tree-&gt;lson-&gt;lazyp = (tree-&gt;lazym*tree-&gt;lson-&gt;lazyp+tree-&gt;lazyp)%mo;</span><br><span class="line">tree-&gt;rson-&gt;lazyp = (tree-&gt;lazym*tree-&gt;rson-&gt;lazyp+tree-&gt;lazyp)%mo;</span><br><span class="line">tree-&gt;lazym  = <span class="number">1</span>;</span><br><span class="line">tree-&gt;lazyp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基础练习题"><a href="#基础练习题" class="headerlink" title="基础练习题"></a>基础练习题</h1><p><strong><a href="https://www.luogu.com.cn/problem/P4145">P4145 上帝造题的七分钟2 / 花神游历各国</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P6327">P6327 区间加区间sin和</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P1438">P1438 无聊的数列</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P4513">P4513 小白逛公园</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P4588">P4588 [TJOI2018]数学计算</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P2894">P2894 [USACO08FEB]Hotel G</a></strong></p><h2 id="P4145-上帝造题的七分钟2-花神游历各国"><a href="#P4145-上帝造题的七分钟2-花神游历各国" class="headerlink" title="P4145 上帝造题的七分钟2 / 花神游历各国"></a>P4145 上帝造题的七分钟2 / 花神游历各国</h2><p>照题里的这个数据范围来看,直接暴力开方肯定会T飞</p><p>通过观察,不难发现数据范围内最大的数也只需要$6$次开方就可以变为$1$</p><p>考虑剪枝优化：</p><p>当一个区间的最大值为$1$时,其整个区间的其他值肯定也为$1$</p><p>因此当区间内最大值等于$1$时,直接$return$掉</p><p>核心代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> L = tree[node].l,R = tree[node].r;</span><br><span class="line"><span class="keyword">if</span>(L==R)&#123;</span><br><span class="line">tree[node].sum = <span class="built_in">sqrt</span>(tree[node].sum);</span><br><span class="line">tree[node].maxn = <span class="built_in">sqrt</span>(tree[node].maxn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid&amp;&amp;tree[lson].maxn&gt;<span class="number">1</span>)&#123;<span class="comment">//最大值大于1时在进行修改操作</span></span><br><span class="line"><span class="built_in">change</span>(lson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid&amp;&amp;tree[rson].maxn&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">change</span>(rson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="P6327-区间加区间sin和"><a href="#P6327-区间加区间sin和" class="headerlink" title="P6327 区间加区间sin和"></a>P6327 区间加区间sin和</h2><p>挺好的一道题目,很适合线段树初学者练手</p><p>学过和差角公式的应该都能很快想出解法</p><p>$sin(a+x) = sinacosx+cosasinx$</p><p>$cos(a+x) = cosacosx-sinxsina$</p><p>只需要在线段树里维护一个$sinx$和一个$cosx$即可</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update2</span><span class="params">(<span class="type">int</span> node,<span class="type">double</span> sinv,<span class="type">double</span> cosv)</span></span>&#123;<span class="comment">//和差角公式</span></span><br><span class="line"><span class="type">double</span> cosa = tree[node].cosx;</span><br><span class="line">        <span class="type">double</span> sina = tree[node].sinx;</span><br><span class="line">tree[node].cosx = cosa*cosv-sina*sinv;</span><br><span class="line">tree[node].sinx = sina*cosv+cosa*sinv;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;<span class="comment">//下放</span></span><br><span class="line"><span class="keyword">if</span>(tree[node].tag)&#123;</span><br><span class="line"><span class="type">double</span> cosa = <span class="built_in">cos</span>(tree[node].tag),sina = <span class="built_in">sin</span>(tree[node].tag);</span><br><span class="line"><span class="built_in">update2</span>(lson,sina,cosa);<span class="comment">//更新儿子的值</span></span><br><span class="line"><span class="built_in">update2</span>(rson,sina,cosa);</span><br><span class="line">tree[lson].tag+=tree[node].tag;<span class="comment">//更新儿子的tag</span></span><br><span class="line">tree[rson].tag+=tree[node].tag;</span><br><span class="line">tree[node].tag = <span class="number">0</span>;b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;<span class="comment">//更新操作</span></span><br><span class="line"><span class="type">int</span> L = tree[node].l,R = tree[node].r;</span><br><span class="line"><span class="keyword">if</span>(R&lt;=r&amp;&amp;L&gt;=l)&#123;<span class="comment">//包围在区间内,直接修改</span></span><br><span class="line">tree[node].tag+=x;</span><br><span class="line"><span class="built_in">update2</span>(node,<span class="built_in">sin</span>(x),<span class="built_in">cos</span>(x));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node);<span class="comment">//下放</span></span><br><span class="line"><span class="type">int</span> mid = (L + R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">change</span>(lson,l,r,x);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">change</span>(rson,l,r,x);</span><br><span class="line"><span class="built_in">update</span>(node);<span class="comment">//上传更新</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1438-无聊的数列"><a href="#P1438-无聊的数列" class="headerlink" title="P1438 无聊的数列"></a>P1438 无聊的数列</h2><p>利用线段树来维护差分数组。</p><p>每当进行一个操作$1$时</p><p>将点$l$加上首相$k$</p><p>如果区间不是一个点的话,则将区间$[l+1,r]$上的点都加上公差$d$</p><p>如果$r&lt;n$,则在$r+1$的位置上加上$-(k+(r-l)\cdot d))$,便于差分</p><p>查询时,将区间$[1,k]$的值都加上即可,相当于查询操作</p><p>区间查询,区间修改,直接上线段树模板即可</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> mode,l,r,k,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;mode);</span><br><span class="line"><span class="keyword">if</span>(mode==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;k,&amp;d);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,l,k);<span class="comment">//修改左端点</span></span><br><span class="line"><span class="keyword">if</span>(l!=r) <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,l+<span class="number">1</span>,r,d);<span class="comment">//修改区间</span></span><br><span class="line"><span class="keyword">if</span>(r+<span class="number">1</span>&lt;=n) <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,r+<span class="number">1</span>,r+<span class="number">1</span>,-(k+(r-l)*d));<span class="comment">//修改右端点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,d)+a[d]);<span class="comment">//差分数组的值+原值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P4513-小白逛公园"><a href="#P4513-小白逛公园" class="headerlink" title="P4513 小白逛公园"></a>P4513 小白逛公园</h2><p>线段树经典题</p><p>维护一个从区间左端点开始的区间最大子段$maxl$,从右端点开始的区间最大子段$maxr$,总区间最大子段$maxx$,和一个区间和$sum$</p><p>对于$maxl$来说,其右端点的位置有两种可能:</p><ul><li><p>在左儿子中</p></li><li><p>在右儿子中</p></li></ul><p>得到方程:$tree.maxl = max(lson.maxl,lson.sum+rson.maxl)$</p><p>$maxr$也同理</p><p>方程:$tree.maxr = max(rson.maxr,rson.sum+lson.maxr)$</p><p>对于$maxx$来说，其区间范围有三种可能</p><ul><li><p>只在左儿子中</p></li><li><p>只在右儿子中</p></li><li><p>既在左儿子中也在右儿子中</p></li></ul><p>得到方程:$tree.maxx = max(lson.maxx,rson.maxx,lson.maxr+rson.maxl))$</p><p>查询时只需输出区间$[l,r]$中的$maxx$即可</p><p>核心代码:</p><p>更新操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(tree2 *tree,tree2 *lson,tree2 *rson)</span></span>&#123;</span><br><span class="line">tree-&gt;sum = lson-&gt;sum+rson-&gt;sum;</span><br><span class="line">tree-&gt;maxl = <span class="built_in">max</span>(lson-&gt;maxl,lson-&gt;sum+rson-&gt;maxl);</span><br><span class="line">tree-&gt;maxr = <span class="built_in">max</span>(rson-&gt;maxr,rson-&gt;sum+lson-&gt;maxr);</span><br><span class="line">tree-&gt;maxX = <span class="built_in">max</span>(lson-&gt;maxX,<span class="built_in">max</span>(rson-&gt;maxX,lson-&gt;maxr+rson-&gt;maxl));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tree2 *<span class="title">query</span><span class="params">(tree2 *tree,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line"><span class="keyword">return</span> tree;</span><br><span class="line"><span class="type">int</span> mid = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tree2 *t1 = <span class="literal">NULL</span>,*t2 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) t1 = <span class="built_in">query</span>(tree-&gt;lson,l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) t2 = <span class="built_in">query</span>(tree-&gt;rson,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">if</span>(t1==<span class="literal">NULL</span>) <span class="keyword">return</span> t2;</span><br><span class="line"><span class="keyword">if</span>(t2==<span class="literal">NULL</span>) <span class="keyword">return</span> t1;</span><br><span class="line">tree2 *ret = &amp;dizhi[++t];</span><br><span class="line"><span class="built_in">update</span>(ret,t1,t2);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P4588-TJOI2018-数学计算"><a href="#P4588-TJOI2018-数学计算" class="headerlink" title="P4588 [TJOI2018]数学计算"></a>P4588 [TJOI2018]数学计算</h2><p>比较简单的一道题目。</p><p>仔细观察不难发现</p><p>所谓的操作$1$跟操作$2$其实就是在进行普通的单点修改操作而已</p><p>用一个线段树在记录一段区间内的总乘积</p><p>操作$1$是把点$i$的值从$1$修改为$i$</p><p>操作$2$则是把点$pos$的值修改为$1$</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].val = (tree[lson].val*tree[rson].val)%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mid = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].val = y;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(lson,l,mid,x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(rson,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h2 id="P2894-USACO08FEB-Hotel-G"><a href="#P2894-USACO08FEB-Hotel-G" class="headerlink" title="P2894 [USACO08FEB]Hotel G"></a>P2894 [USACO08FEB]Hotel G</h2><p>跟<a href="https://www.luogu.com.cn/problem/P4513"><strong>P4513 小白逛公园</strong></a>大同小异的思路</p><p>只是把单点修改操作换成了区间修改罢了</p><p>要注意的是这里不存在负值的情况</p><p>因此在上传操作时转移没那么复杂,只用判断$maxl$是否等于$sum$</p><p>若等于,说明左儿子中房间全为空,直接全部加上,再加上右儿子的$maxl$</p><p>若不等于,则为左儿子的$maxl$</p><p>$maxr$也同理</p><p>同时也要注意这里的查询查的是满足长度为$x$的最左的端点</p><p>因此在查询时要满足”能左则左”</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;<span class="comment">//上传</span></span><br><span class="line"><span class="keyword">if</span>(tree[lson].maxx==tree[lson].sum)&#123;<span class="comment">//如果左区间全为空房</span></span><br><span class="line">tree[node].lmax = tree[lson].sum+tree[rson].lmax;<span class="comment">//全部加上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tree[node].lmax = tree[lson].lmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[rson].maxx==tree[rson].sum)&#123;</span><br><span class="line">tree[node].rmax = tree[rson].sum+tree[lson].rmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tree[node].rmax = tree[rson].rmax;</span><br><span class="line">&#125;</span><br><span class="line">tree[node].maxx = <span class="built_in">max</span>(tree[lson].rmax+tree[rson].lmax,<span class="built_in">max</span>(tree[lson].maxx,tree[rson].maxx));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">tree[node].sum = tree[node].lmax = tree[node].rmax = tree[node].maxx =r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;<span class="comment">//下放</span></span><br><span class="line"><span class="keyword">if</span>(tree[node].lazy==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[node].lazy==<span class="number">1</span>)&#123;<span class="comment">//退房</span></span><br><span class="line">tree[lson].maxx = tree[lson].rmax = tree[lson].lmax = <span class="number">0</span>;</span><br><span class="line">tree[rson].maxx = tree[rson].rmax = tree[rson].lmax = <span class="number">0</span>;</span><br><span class="line">tree[lson].lazy = tree[rson].lazy = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[node].lazy==<span class="number">2</span>)&#123;<span class="comment">//开房</span></span><br><span class="line">tree[lson].maxx = tree[lson].rmax = tree[lson].lmax = tree[lson].sum;</span><br><span class="line">tree[rson].maxx = tree[rson].rmax = tree[rson].lmax = tree[rson].sum;</span><br><span class="line">tree[lson].lazy = tree[rson].lazy = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">tree[node].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> opt)</span></span>&#123;<span class="comment">//opt为1代表退房,为2代表开房</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) tree[node].maxx = tree[node].lmax = tree[node].rmax = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> tree[node].maxx = tree[node].lmax = tree[node].rmax = tree[node].sum;</span><br><span class="line"></span><br><span class="line">tree[node].lazy = opt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(lson,l,mid,x,y,opt);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) <span class="built_in">change</span>(rson,mid+<span class="number">1</span>,r,x,y,opt);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;<span class="comment">//查询</span></span><br><span class="line"><span class="built_in">pushdown</span>(node);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">if</span>(tree[lson].maxx&gt;=x)&#123;<span class="comment">//如果左区间的最大值大于x,直接查左边</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(lson,l,mid,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tree[lson].rmax+tree[rson].lmax&gt;=x)&#123;<span class="comment">//如果中间大于x</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+mid-tree[lson].rmax;左儿子的右最大值,也就是最靠近左边的端点</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(rson,mid+<span class="number">1</span>,r,x);<span class="comment">//否则查右边</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态开点"><a href="#动态开点" class="headerlink" title="动态开点"></a>动态开点</h2><p><strong><a href="https://www.luogu.com.cn/problem/P5459">P5459 [BJOI2016]回转寿司</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/CF915E">CF915E Physical Education Lessons</a></strong></p><p>$now ~ loading…$</p><h2 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h2><p><strong><a href="https://www.luogu.com.cn/problem/P5490">P5490 【模板】扫描线</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P1502">P1502 窗口的星星</a></strong></p><p>$now ~ loading…$</p><p>``</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5459 [BJOI2016]回转寿司</title>
      <link href="/2020/08/05/p5459/"/>
      <url>/2020/08/05/p5459/</url>
      
        <content type="html"><![CDATA[<h1 id="P5459-BJOI2016-回转寿司-题解"><a href="#P5459-BJOI2016-回转寿司-题解" class="headerlink" title="P5459 [BJOI2016]回转寿司 题解"></a>P5459 [BJOI2016]回转寿司 题解</h1><h2 id="间隙"><a href="#间隙" class="headerlink" title="间隙"></a><a href="https://www.luogu.com.cn/problem/P5459">间隙</a></h2><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><h2 id="前缀和-权值线段树-动态开点"><a href="#前缀和-权值线段树-动态开点" class="headerlink" title="前缀和,权值线段树,动态开点"></a>前缀和,权值线段树,动态开点</h2></li></ul><p>如果您还不会权值线段树跟动态开点的话,推荐去看一下<a href="https://www.bilibili.com/video/BV1Zg4y1q7aY?t=1726"><strong>这个教程</strong></a></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个序列,现从中取出一段连续子序列,使其子序列内数值总和$a$满足$L\le a\le R$</p><p>求总方案数。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>区间求和,很容易先联想到前缀和</p><p>不妨先设$sum[i]$为前$i$个数的前缀和</p><p>易得式子:</p><p>$L \le sum[r] - sum[l-1] \le R$</p><p>移项一下</p><p>$sum[r]-L \le sum[l-1]  \le sum[r]-R $</p><p>这样原问题就转化为了<strong>在区间$[sum[r]-L,sum[r]-R]$中有多少个$sum[l-1]$($l \in[1,r]$ )</strong></p><p><strong>每一个$r$也就相当于是查询区间$[sum[r]-L,sum[r]-R]$中$sum[l-1]$的总和</strong>($l \in[1,r]$ )</p><p>可以使用权值线段树$+$动态开点来维护。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>从$1$~$n$枚举$r$的值,把每一个$r$当作一次”查询”</p><p>同时不要忘记在进行下一次”查询” 前把 $l$ 的值 “更新”(指插入新的值)</p><p>具体的注释里有讲<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> MAXN = <span class="number">1e10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum[N];<span class="comment">//前缀和 </span></span><br><span class="line"><span class="type">int</span> n,l,r;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,sum;<span class="comment">//左儿子,右儿子,总方案数 </span></span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;<span class="comment">//上传操作 </span></span><br><span class="line">tree[node].sum = tree[tree[node].l].sum+tree[tree[node].r].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;node,<span class="type">long</span> <span class="type">long</span> x,<span class="type">long</span> <span class="type">long</span> l = -MAXN , <span class="type">long</span> <span class="type">long</span> r = MAXN)</span></span>&#123;<span class="comment">//更新 注意,l的初始值要设成负数,一开始在这里卡了好久\kk </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!node) node = ++tot;<span class="comment">//动态开点 </span></span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;<span class="comment">//如果为根节点 </span></span><br><span class="line">tree[node].sum++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mid = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">update</span>(tree[node].l,x,l,mid);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(tree[node].r,x,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);<span class="comment">//更新父节点的值 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> &amp;node,<span class="type">long</span> <span class="type">long</span> x,<span class="type">long</span> <span class="type">long</span> y,<span class="type">long</span> <span class="type">long</span> l =-MAXN,<span class="type">long</span> <span class="type">long</span> r = MAXN)</span></span>&#123;<span class="comment">//查询操作 </span></span><br><span class="line"><span class="keyword">if</span>(!node) node = ++tot;<span class="comment">//动态开点 </span></span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;<span class="comment">//包含在查询范围内 </span></span><br><span class="line"><span class="keyword">return</span> tree[node].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) res+=<span class="built_in">query</span>(tree[node].l,x,y,l,mid); </span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) res+=<span class="built_in">query</span>(tree[node].r,x,y,mid+<span class="number">1</span>,r); </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;l,&amp;r);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">sum[i] = sum[i<span class="number">-1</span>] + a;<span class="comment">//前缀和 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">insert</span>(root,<span class="number">0</span>);<span class="comment">//不要忘记插入0,也就是说一个都不吃的情况 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans+=<span class="built_in">query</span>(root,sum[i] - r,sum[i] - l);<span class="comment">//加方案数 </span></span><br><span class="line"><span class="built_in">insert</span>(root,sum[i]);<span class="comment">//&quot;更新&quot;l的值 </span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3478 [POI2008]STA-Station</title>
      <link href="/2020/08/03/p3478/"/>
      <url>/2020/08/03/p3478/</url>
      
        <content type="html"><![CDATA[<h1 id="P3478-POI2008-STA-Station题解"><a href="#P3478-POI2008-STA-Station题解" class="headerlink" title="P3478 [POI2008]STA-Station题解"></a>P3478 [POI2008]STA-Station题解</h1><h2 id="原题面"><a href="#原题面" class="headerlink" title="原题面"></a><a href="https://www.luogu.com.cn/problem/P3478">原题面</a></h2><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>换根DP</li></ul><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给出一个 N 个点的树,找出一个点来,以这个点为根的树时,所有点的深度之和最大</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>换根DP的模板题。</p><p>如果您还不会换根DP的话,可以先去看看UltiMadow巨佬的文章:</p><p><a href="https://www.luogu.com.cn/discuss/show/47327">【日报#278】[学习笔记]换根dp</a>,我一开始也是从那里学的qwq</p><p>这里我们设</p><ul><li><p><strong>$size[i]$为以$1$为根节点时节点$i$的子树大小</strong></p></li><li><p><strong>$dep[i]$为以$1$为根节点时节点$i$的深度大小</strong></p></li><li><p><strong>$dp[i]$为以$i$为根节点时深度之和的大小</strong></p></li></ul><p>很明显,我们可以通过一遍DFS求出以$1$为根节点时的深度之和</p><p>如果一个个的去算的话</p><p>照这个数据范围,显然会T飞</p><p>这个时候就要用到换根DP了</p><h2 id="换根-DP-优化"><a href="#换根-DP-优化" class="headerlink" title="换根$DP$优化"></a>换根$DP$优化</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/o5nj1c7o.png" alt=""></p><p>可以看出,当我们把根节点从1换到3时</p><p>对子节点3的贡献由两部分组成</p><p>1.<strong>自己子树的贡献(图中的k)</strong></p><p>2.<strong>父亲节点$1$的贡献</strong></p><hr><h2 id="如何转移"><a href="#如何转移" class="headerlink" title="如何转移"></a>如何转移</h2><ul><li><p>首先是$k$,作为自己子树所产生的贡献肯定要加上</p></li><li><p>$dp[u]$为以$u$为根节点时的深度总值,在计算时,要减去$v$的子树所产生的贡献,不然就重复计算了,同时</p></li></ul><p><strong>在以 $u$为根时,v节点及其子树内的所有节点的深度都增加了$1$</strong>,需要减去</p><p><strong>(图中红色的节点)</strong></p><p>合起来就是$dp[u]-(size[v]+k)$</p><ul><li>除v子树外的其他节点也一样</li></ul><p><strong>在以$v$为根时，除$v$节点及其子树外的其他节点的深度都增加了$1$</strong></p><p><strong>(图中蓝色的节点)</strong></p><p>合起来就是$(size[1]-size[v])$</p><p>得到转移方程</p><ul><li>$dp[v] = k+(dp[u]-(k+size[v]))+(size[1]-size[v])$</li></ul><p>化简一下</p><ul><li>$dp[v] = dp[u]-2size[v]+size[1]$</li></ul><p>转移方程推出来了,代码部分就不难实现了,两遍dfs,一次dfs统计子树内的节点对当前节点的贡献<br>一次dfs换根</p><p>贴个代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN  = <span class="number">100010</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[MAXN],dep[MAXN],size[MAXN];</span><br><span class="line"><span class="type">int</span> vis[MAXN];</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; son[MAXN];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">size[x] = <span class="number">1</span>;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">dep[v] = dep[x] +<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v);</span><br><span class="line">size[x]+=size[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">dp[v] = dp[x] +size[<span class="number">1</span>] - <span class="number">2</span>*size[v];</span><br><span class="line"><span class="built_in">dfs2</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">son[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">son[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dp[<span class="number">1</span>]+=dep[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">-0x3f</span>;</span><br><span class="line"><span class="type">int</span> jd =<span class="number">999</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans &lt; dp[i]) ans = dp[i], jd = i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;jd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1453 城市环路</title>
      <link href="/2020/08/03/p1453/"/>
      <url>/2020/08/03/p1453/</url>
      
        <content type="html"><![CDATA[<h1 id="P1453-城市环路-题解"><a href="#P1453-城市环路-题解" class="headerlink" title="P1453 城市环路 题解"></a>P1453 城市环路 题解</h1><h2 id="间隙"><a href="#间隙" class="headerlink" title="间隙"></a><a href="https://www.luogu.com.cn/problem/P1453">间隙</a></h2><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><h3 id="树形dp-基环树"><a href="#树形dp-基环树" class="headerlink" title="树形dp,基环树"></a>树形dp,基环树</h3></li></ul><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一颗含有点权的基环外向树</p><p>假如两个点之间有一条边连接,如果选择了其中一端的节点,那另一段的节点则不可选择</p><p>求:最大贡献</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先讲一下什么是基环树。</p><p>基环树,简单来说就是多了一条边的树,产生了一个环形结构,环上的每个节点都是一颗树的根</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/g8bnch8r.png" alt=""></p><p>画成图的话大概是这个样子(基环外向树)</p><p>一般来说,这种题目的做法都是先找到环,断开环中的一条边,<br>把它当成一般的树形$DP$来做。</p><h3 id="如何找环"><a href="#如何找环" class="headerlink" title="如何找环?"></a>如何找环?</h3><p>一般有$dfs$跟并查集两种方法 , 这里我采用的是并查集的做法</p><p>一开始每个节点都是一个独立的集合</p><p>每连接一条边,就把这两个点合并到一个集合中</p><p>如果在连接一条边之前,两个节点就已经在一个集合中了,说明这<strong>两个节点已经联通了,再连接这条边必然会产生环的情况</strong></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/53vb8z0u.png" alt=""></p><h3 id="如何转移"><a href="#如何转移" class="headerlink" title="如何转移?"></a>如何转移?</h3><p>找到了环之后,只需要将环上的这条边断开即可</p><p>这样的话就可以当作普通的树形$DP$来做了</p><p>设$f[i][0]$为选第$i$个节点产生的最大贡献</p><p>$f[i][1]$为不选第$i$个节点产生的最大贡献</p><p>如果选了第$i$个节点,那它的儿子肯定都不能选</p><p>反之,儿子可以选择选,也可以选择不选</p><p>得到转移方程:</p><p>$f[u][0] = \sum f[v][0]$</p><p>$f[u][1] = \sum max(f[v][1],f[v][0])$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>思路明白了代码实现应该就不难了</p><p>要注意的是环上的两个点都可以作为树的根节点,因此在$DP$的时候要把两个点都跑一遍</p><p>具体的细节注释有写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;<span class="comment">//存图 </span></span><br><span class="line"><span class="type">int</span> v,next;</span><br><span class="line">&#125;e[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> f[MAXN][<span class="number">2</span>],w[MAXN];<span class="comment">//dp数组,点权 </span></span><br><span class="line"><span class="type">double</span> k; </span><br><span class="line"><span class="type">int</span> fa[MAXN];</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">1</span>],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> root1,root2;<span class="comment">//环上的两个点 </span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;<span class="comment">//前向星 </span></span><br><span class="line">e[++cnt].v = v;</span><br><span class="line">e[cnt].next = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//查找集合 </span></span><br><span class="line"><span class="keyword">if</span>(fa[x]==x)&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">circle</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;<span class="comment">//树形dp </span></span><br><span class="line">f[u][<span class="number">1</span>] = w[u],f[u][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//初始化 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa)&#123; </span><br><span class="line"><span class="built_in">circle</span>(v,u);</span><br><span class="line">f[u][<span class="number">0</span>]+=<span class="built_in">max</span>(f[v][<span class="number">1</span>],f[v][<span class="number">0</span>]);<span class="comment">//转移 </span></span><br><span class="line">f[u][<span class="number">1</span>]+=f[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">fa[i] = i;<span class="comment">//初始化集合 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">u++,v++;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(u)==<span class="built_in">find</span>(v))&#123;<span class="comment">//如果在加边前就在一个集合中了,说明找到了环 </span></span><br><span class="line">        root1 = u,root2 = v;<span class="comment">//记录环上的两个点 </span></span><br><span class="line">        <span class="keyword">continue</span>;<span class="comment">//直接跳过加边操作,相当于断开这条边 </span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="built_in">add</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(v,u);</span><br><span class="line">fa[<span class="built_in">find</span>(v)] = <span class="built_in">find</span>(u);<span class="comment">//合并集合 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;k);</span><br><span class="line"><span class="built_in">circle</span>(root1,<span class="number">0</span>);</span><br><span class="line"><span class="type">double</span> r1 = f[root1][<span class="number">0</span>];<span class="comment">//选root1 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">circle</span>(root2,<span class="number">0</span>);</span><br><span class="line"><span class="type">double</span> r2 = f[root2][<span class="number">0</span>];<span class="comment">//选root2 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1lf&quot;</span>,<span class="built_in">max</span>(r1,r2)*k);<span class="comment">//取最大 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础树形dp</title>
      <link href="/2020/08/02/%E6%A0%91%E5%BD%A2dp/"/>
      <url>/2020/08/02/%E6%A0%91%E5%BD%A2dp/</url>
      
        <content type="html"><![CDATA[<p>曾经的黑历史(</p><p>有空了重构一下</p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="P1352-没有上司的舞会"><a href="#P1352-没有上司的舞会" class="headerlink" title="P1352 没有上司的舞会"></a>P1352 没有上司的舞会</h2><p>树状$dp$模板题。</p><p>设$f[i][0]$为第$i$个人来了的方案数</p><p>$f[i][1]$为第$i$和人没来的方案数</p><p>若第$i$个人来了,那么其下属均不回来</p><p>若不来,其下属则有来和不来两种选择</p><p>因此状态转移方程为:</p><ul><li><p>$f[i][0]+=f[son][1]$</p></li><li><p>$f[i][1]+=max(f[son][0],f[son][1])$</p></li></ul><h2 id="P2015-二叉苹果树"><a href="#P2015-二叉苹果树" class="headerlink" title="P2015 二叉苹果树"></a>P2015 二叉苹果树</h2><p>树上背包模板题</p><p>每一个枝条都有”剪”和”不剪”两种可能</p><p>把每一个儿子都看成一个”分组背包”</p><p>设$dp[i][j]$表示第$i$个子树保留$j$条边</p><p>每加入一个”儿子”后,枚举该”儿子”保留的边数,如图<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/bl7hi1vj.png" alt=""></p><h5 id="ps-这里i-k后面还要减1是因为还要多保留从u-gt-v这条边"><a href="#ps-这里i-k后面还要减1是因为还要多保留从u-gt-v这条边" class="headerlink" title="(ps:这里i-k后面还要减1是因为还要多保留从u-&gt;v这条边)"></a>(ps:这里i-k后面还要减1是因为还要多保留从u-&gt;v这条边)</h5><p>故状态转移方程为:</p><ul><li>$f[u][i]=max(f[v][i-k-1]+f[u][k]+w[u][v])(i\in[1,m+1)]$</li></ul><hr><h1 id="树上背包"><a href="#树上背包" class="headerlink" title="树上背包"></a>树上背包</h1><p><strong><a href="https://www.luogu.com.cn/problem/P2014">P2014 [CTSC1997]选课</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P1273">P1273 有线电视网</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P1270">P1270 “访问”美术馆</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P1272">P1272 重建道路</a></strong></p><hr><h2 id="P2014-CTSC1997-选课"><a href="#P2014-CTSC1997-选课" class="headerlink" title="P2014 [CTSC1997]选课"></a>P2014 [CTSC1997]选课</h2><p>和二叉苹果树一样的套路。</p><p>把每一个子课程都看作是一个”分组背包”,倒序枚举即可</p><p>由于题目中可能有多棵树</p><p>因此多开一个节点把所有”树根”连在一起</p><p>同时,在倒序枚举时也要把这个新节点算进去</p><p>转移方程:</p><ul><li>$f[u][i]=max(f[v][i-k-1]+f[u][k]+w[v])(i\in[1,m+1])$</li></ul><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">vis[k]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[k].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[son[k][i]]!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">dp</span>(son[k][i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=m+<span class="number">1</span>;v&gt;=<span class="number">1</span>;v--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> K=<span class="number">0</span>;K&lt;v;K++)&#123;</span><br><span class="line"> f[k][v]=<span class="built_in">max</span>(f[k][v],w[son[k][i]]+f[son[k][i]][K]+f[k][v-K<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1273-有线电视网"><a href="#P1273-有线电视网" class="headerlink" title="P1273 有线电视网"></a>P1273 有线电视网</h2><p>也是比较经典的一个树上背包问题</p><p>题目中要求的是在不亏本的情况下最多的观看用户个数</p><p>设$f[i][j]$表示第$i$个站传输给$j$个用户观看最终剩余的钱数</p><p>若最终剩余钱数大于等于0,则说明未亏本</p><p>反之,则说明亏本</p><p>转移方程则为:</p><ul><li>$f[u][i]=max(f[v][k]+f[u][i-k]-w[u][v])$</li></ul><p>$dp$完后从总人数开始倒序判断是否亏本即可</p><p>贴个核心代码:</p><p>$dp部分$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">dp[x][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(val[x])&#123;<span class="comment">//如果是根节点</span></span><br><span class="line">size[x]=<span class="number">1</span>;<span class="comment">//人数加一</span></span><br><span class="line">dp[x][<span class="number">1</span>]=val[x];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(son[x][i]);</span><br><span class="line">size[x]+=size[son[x][i]];<span class="comment">//计算x节点下的人数总和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=size[x];j&gt;=<span class="number">0</span>;j--)&#123;<span class="comment">//滚动数组,倒序枚举</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=size[son[x][i]];k++)&#123;<span class="comment">//枚举子树传输的观众数量</span></span><br><span class="line">dp[x][j]=<span class="built_in">max</span>(dp[x][j],dp[x][j-k]+dp[son[x][i]][k]-W[x][son[x][i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$判断部分$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=m;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[<span class="number">1</span>][i]&gt;=<span class="number">0</span>)&#123;<span class="comment">//如果不亏本</span></span><br><span class="line">cout&lt;&lt;i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1270-“访问”美术馆"><a href="#P1270-“访问”美术馆" class="headerlink" title="P1270 “访问”美术馆"></a>P1270 “访问”美术馆</h2><p>跟P1273 有线电视网一样的套路</p><p>设$f[i][j]$为在第$i$个节点下偷$j$幅画所需要的最小总时间</p><p>状态转移方程也就呼之欲出了</p><ul><li>$f[u][i]=min(f[v][k]+f[u][i-k]-2w[u][v])$</li></ul><p>这里$w[u][v]$要乘2是因为要进出各一趟</p><p>核心代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(paint[x]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> paint[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">dfs</span>(v);</span><br><span class="line">s+=t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j =s;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=t;k++)&#123;</span><br><span class="line">dp[x][j] = <span class="built_in">min</span>(dp[x][j] , dp[v][k] + dp[x][j-k]+w[x][v]*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="P1272-重建道路"><a href="#P1272-重建道路" class="headerlink" title="P1272 重建道路"></a>P1272 重建道路</h2><p>同样也是一道比较经典的树上背包问题</p><p>设$f[i][j]$为第$i$个节点断出一个大小为$j$的子树所需要的断开总数</p><p>状态转移方程:</p><ul><li>$f[u][i]=min(f[v][k]+f[u][i-k]-1)$</li></ul><p>($v$为根的子树提供$k$个节点,$u$和其他儿子提供$j-k$个节点)</p><p>同时,由于一开始时一个子树都没有加进来</p><p>即把$u$的所有”儿子”都切断了<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/rawfxbhz.png" alt=""></p><p>因此当把$v$儿子加进来的时候要把之前那段减去的边加回来</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">size[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!is_son[x])&#123;</span><br><span class="line">dp[x][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">size[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">size[x]+=size[v];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = size[x];j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k&lt;=size[v];k++)&#123;<span class="comment">//这里题解里很多人都写成了&lt;j,问题是子树可能本身就没有这么多子节点,感觉有些问题</span></span><br><span class="line">dp[x][j] = <span class="built_in">min</span>(dp[x][j],dp[x][j-k]+dp[v][k]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="普通树形-DP"><a href="#普通树形-DP" class="headerlink" title="普通树形$DP$"></a>普通树形$DP$</h1><p><strong><a href="https://www.luogu.com.cn/problem/P2016">P2016 战略游戏</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P2458">P2458 [SDOI2006]保安站岗 题解</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P4084">P4084 [USACO17DEC]Barn Painting G</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P2585">P2585 [ZJOI] 三色二叉树</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P2279">P2279 消防局的设立</a></strong></p><hr><h2 id="P2016-战略游戏"><a href="#P2016-战略游戏" class="headerlink" title="P2016 战略游戏"></a>P2016 战略游戏</h2><p>带了点贪心思想的树形$DP$</p><p>如果父节点放了一个守卫</p><p>那其子节点就都不用放守卫了</p><p>反之,子节点都要放一个守卫</p><p>转移方程:</p><ul><li>$f[u][0]+=f[v][1]$</li><li>$f[u][1]+=min(f[v][1],f[v][0])$</li></ul><p>为什么不用儿子的儿子(“孙子”)节点来看守儿子节点?</p><p><strong>如果一个节点不是叶子节点,那他的子节点数必定大于或等于$1$</strong>,因此如果<strong>用儿子节点来看守其父节点,花费的数量肯定会更多</strong>(或不变)。</p><h6 id="遗憾的是题解里似乎没人说正确性的证明-还是说太简单了都懒得证了"><a href="#遗憾的是题解里似乎没人说正确性的证明-还是说太简单了都懒得证了" class="headerlink" title="遗憾的是题解里似乎没人说正确性的证明?,还是说太简单了都懒得证了"></a>遗憾的是题解里似乎没人说正确性的证明?,<del>还是说太简单了都懒得证了</del></h6><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(x!=<span class="number">1509</span>)</span><br><span class="line">dp[x][<span class="number">1</span>]=<span class="number">1</span>,dp[x][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(son[x][i]);</span><br><span class="line">dp[x][<span class="number">0</span>]+=dp[son[x][i]][<span class="number">1</span>];</span><br><span class="line">dp[x][<span class="number">1</span>]+=<span class="built_in">min</span>(dp[son[x][i]][<span class="number">1</span>],dp[son[x][i]][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这道题目的带点权版:</p><h2 id="P2458-SDOI2006-保安站岗"><a href="#P2458-SDOI2006-保安站岗" class="headerlink" title="P2458 [SDOI2006]保安站岗"></a>P2458 [SDOI2006]保安站岗</h2><h2 id="题解链接"><a href="#题解链接" class="headerlink" title="题解链接"></a><a href="https://www.luogu.com.cn/blog/xcxc82/p2458-sdoi2006-bao-an-zhan-gang-ti-xie-yes">题解链接</a></h2><h2 id="P4084-USACO17DEC-Barn-Painting-G"><a href="#P4084-USACO17DEC-Barn-Painting-G" class="headerlink" title="P4084 [USACO17DEC]Barn Painting G"></a>P4084 [USACO17DEC]Barn Painting G</h2><p>树上$DP$求方案数。</p><p>还算是比较简单的题目吧…</p><p>设:</p><p>$f[i][0]$为第$i$个节点涂红色的方案数</p><p>$f[i][1]$为第$i$个节点涂绿色的方案数</p><p>$f[i][2]$为第$i$个节点涂蓝色的方案数</p><p>假设第$i$号节点涂了红色,那么它的上一个节点就只能涂绿色和蓝色</p><p>其他情况也同理</p><p>用乘法定理乘一下即可。</p><p>转移方程:</p><ul><li>$\begin{cases}f[u][1]=f[u][1]<em>((f[v][2]+f[v][3]))\f[u][2]=f[u][2]</em>((f[v][1]+f[v][3]))\f[u][3]=f[u][3]*((f[v][1]+f[v][2]))\end{cases}$ </li></ul><hr><h1 id="换根-DP"><a href="#换根-DP" class="headerlink" title="换根$DP$"></a>换根$DP$</h1><p>一种形式十分优美的树形$DP$</p><p><strong><a href="https://www.luogu.com.cn/problem/P3478">P3478 [POI2008]STA-Station</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P2986">P2986 [USACO10MAR]Great Cow Gathering G</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P3047">P3047 [Nearby Cows G]Great Cow Gathering G</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/CF708C">CF708C Centroids</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/CF1187E">CF1187E Tree Painting</a></strong></p><hr><h2 id="P3478-POI2008-STA-Station"><a href="#P3478-POI2008-STA-Station" class="headerlink" title="P3478 [POI2008]STA-Station"></a>P3478 [POI2008]STA-Station</h2><p>换根DP的模板题。</p><p>这里我们设</p><ul><li><p><strong>$size[i]$为以$1$为根节点时节点$i$的子树大小</strong></p></li><li><p><strong>$dep[i]$为以$1$为根节点时节点$i$的深度大小</strong></p></li><li><p><strong>$dp[i]$为以$i$为根节点时深度之和的大小</strong></p></li></ul><p>很明显,我们可以通过一遍DFS求出以$1$为根节点时的深度之和</p><p>如果一个个的去算的话</p><p>照这个数据范围,显然会T飞</p><p>这个时候就要用到换根DP了</p><h2 id="换根-DP-优化"><a href="#换根-DP-优化" class="headerlink" title="换根$DP$优化"></a>换根$DP$优化</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/o5nj1c7o.png" alt=""></p><p>可以看出,当我们把根节点从1换到3时</p><p>对子节点3的贡献由两部分组成</p><p>1.<strong>自己子树的贡献(图中的k)</strong></p><p>2.<strong>父亲节点$1$的贡献</strong></p><hr><h2 id="如何转移"><a href="#如何转移" class="headerlink" title="如何转移"></a>如何转移</h2><ul><li><p>首先是$k$,作为自己子树所产生的贡献肯定要加上</p></li><li><p>$dp[u]$为以$u$为根节点时的深度总值,在计算时,要减去$v$的子树所产生的贡献,不然就重复计算了,同时</p></li></ul><p><strong>在以 $u$为根时,v节点及其子树内的所有节点的深度都增加了$1$</strong>,需要减去</p><p><strong>(图中红色的节点)</strong></p><p>合起来就是$dp[u]-(size[v]+k)$</p><ul><li>除v子树外的其他节点也一样</li></ul><p><strong>在以$v$为根时，除$v$节点及其子树外的其他节点的深度都增加了$1$</strong></p><p><strong>(图中蓝色的节点)</strong></p><p>合起来就是$(size[1]-size[v])$</p><p>得到转移方程</p><ul><li>$dp[v] = k+(dp[u]-(k+size[v]))+(size[1]-size[v])$</li></ul><p>化简一下</p><ul><li>$dp[v] = dp[u]-2size[v]+size[1]$</li></ul><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">size[x] = <span class="number">1</span>;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">dep[v] = dep[x] +<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v);</span><br><span class="line">size[x]+=size[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">dp[v] = dp[x] +size[<span class="number">1</span>] - <span class="number">2</span>*size[v];</span><br><span class="line"><span class="built_in">dfs2</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P2986-USACO10MAR-Great-Cow-Gathering-G"><a href="#P2986-USACO10MAR-Great-Cow-Gathering-G" class="headerlink" title="P2986 [USACO10MAR]Great Cow Gathering G"></a>P2986 [USACO10MAR]Great Cow Gathering G</h2><p>前面那道题目的带权值版</p><p>一模一样的思路,只需要把状态转移方程转换一下即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line">    <span class="type">int</span> v =edge[i].v;</span><br><span class="line">    <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(v,u);</span><br><span class="line">    size[u] += size[v];</span><br><span class="line">    sum[u]+=(sum[v]+edge[i].w*size[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line">       <span class="type">int</span> v =edge[i].v;</span><br><span class="line">   <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">f[v] = <span class="number">1LL</span>*f[u] + AN*edge[i].w - <span class="number">2</span>*size[v]*edge[i].w;</span><br><span class="line">ans = <span class="built_in">min</span>(ans,f[v]);</span><br><span class="line"><span class="built_in">dp</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P3047-Nearby-Cows-G"><a href="#P3047-Nearby-Cows-G" class="headerlink" title="P3047 [Nearby Cows G]"></a>P3047 [Nearby Cows G]</h2><h3 id="1-状态表示"><a href="#1-状态表示" class="headerlink" title="1.$状态表示$"></a>1.$状态表示$</h3><p>设$size[i][j]$为第i个节点向下$j$层所包含的点权和</p><p>$f[i][j]$为第$i$个点距离它不超过 $j$的所有节点权值和</p><h3 id="2-状态转移"><a href="#2-状态转移" class="headerlink" title="2.状态转移"></a>2.状态转移</h3><p>对于$size[i][j]:$</p><p>$size[u][j] =\sum\ size[v][j-1]$ 自己向下$j$层即为儿子向下$j-1$</p><p>对于$f[i][j]:$</p><p>儿子对它的贡献:</p><p>$size[v][j]$</p><p>自己向下$j$层,儿子节点肯定也要向下$j$层</p><p>父亲对它的贡献:</p><p>$f[u][j-1]-size[v][j-2]$</p><p>父亲节点扩展$j-1$层的值减去和儿子节点的值所重复包含的$j-2$层值</p><p>转移方程:</p><p>$f[v][j] = f[u][j-1]+size[v][j]-size[v][j-2]$</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v =edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v,u);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">size[u][i]+=size[v][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i<span class="number">-2</span>&gt;=<span class="number">0</span>)</span><br><span class="line">f[v][i] = size[v][i]+f[u][i<span class="number">-1</span>] - size[v][i<span class="number">-2</span>];</span><br><span class="line"><span class="keyword">else</span> f[v][i] = size[v][i]+f[u][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dp</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="CF708C-Centroids"><a href="#CF708C-Centroids" class="headerlink" title="CF708C Centroids"></a>CF708C Centroids</h2><p>一道做起来比较麻烦的换根$DP$</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先对于一个节点来说,大小大于$n/2$的节点肯定只有一个，这个显而易见</p><p>再来看如何改造</p><p>如果说该节点本身的重儿子就小于$n/2$,那肯定可以成为树的重心</p><p>反之,肯定要在重儿子里找出一个重量最大的且小于等于$n/2$的子树,并将其断开,连接到根节点上(相当于删去这颗子树)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/c18i92y5.png" alt=""></p><p>如果重儿子的大小减去被删去儿子的大小小于等于$n/2$,则说明可以改造</p><p>反之,无法改造</p><h3 id="如何转移-1"><a href="#如何转移-1" class="headerlink" title="如何转移"></a>如何转移</h3><p>分两种情况来讨论</p><p>$1$.该节点不是其父亲节点重儿子</p><p>其父节点的重儿子不会被改变,只需要判断该节点的重儿子是否改成其父节点即可</p><p>$2$.该节点是其父亲节点的重儿子</p><p>其父亲节点的重儿子会变为其”次大”儿子,其儿子节点的重儿子不会改变</p><p>核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line">size[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[u][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v] &gt; size[maxson[u]])</span><br><span class="line">maxson[u] = v;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span>(maxson[u]!=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(size[maxson[u]]&lt;=n/<span class="number">2</span>) dp[u] = size[maxson[u]]; </span><br><span class="line"><span class="keyword">else</span> dp[u] = dp[maxson[u]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exchange</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">        size[u] = size[u] - size[v];</span><br><span class="line">size[v] = size[v] + size[u];</span><br><span class="line"><span class="keyword">if</span>(v==maxson[u])&#123;</span><br><span class="line">maxson[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> V = son[u][i];</span><br><span class="line"><span class="keyword">if</span>(V!=v&amp;&amp;size[V] &gt; size[maxson[u]])&#123;</span><br><span class="line">maxson[u] = V;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxson[u]!=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(size[maxson[u]]&lt;=n/<span class="number">2</span>) dp[u] = size[maxson[u]];</span><br><span class="line"><span class="keyword">else</span> dp[u] = dp[maxson[u]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(size[maxson[v]]&lt;size[u])&#123;</span><br><span class="line">maxson[v] = u;</span><br><span class="line"><span class="keyword">if</span>(maxson[v]!=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(size[maxson[v]]&lt;=n/<span class="number">2</span>) dp[v] = size[maxson[v]];</span><br><span class="line"><span class="keyword">else</span> dp[v] = dp[maxson[v]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u]  = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">if</span>(size[maxson[u]]&lt;=n/<span class="number">2</span>||size[maxson[u]] - dp[maxson[u]]&lt;=n/<span class="number">2</span>) ans[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[u][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line"><span class="built_in">exchange</span>(u,v);</span><br><span class="line"><span class="built_in">dfs2</span>(v);</span><br><span class="line"><span class="built_in">exchange</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end.</p><p>基环树部分还是先缓缓吧,暂时还未完全掌握</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP2713 GSS4</title>
      <link href="/2020/08/01/sp2713/"/>
      <url>/2020/08/01/sp2713/</url>
      
        <content type="html"><![CDATA[<h1 id="SP2713-GSS4-题解"><a href="#SP2713-GSS4-题解" class="headerlink" title="SP2713 GSS4  题解"></a>SP2713 GSS4  题解</h1><h2 id="间隙"><a href="#间隙" class="headerlink" title="间隙"></a><a href="https://www.luogu.com.cn/problem/SP2713">间隙</a></h2><h2 id="双倍经验"><a href="#双倍经验" class="headerlink" title="双倍经验"></a><a href="https://www.luogu.com.cn/problem/P4145">双倍经验</a></h2><h2 id="前置知识-线段树"><a href="#前置知识-线段树" class="headerlink" title="前置知识:线段树"></a>前置知识:线段树</h2><p>如果您还不会线段树的话,推荐去看一下<a href="https://www.cnblogs.com/jason2003/p/9676729.html"><strong>这篇文章</strong></a>,我一开始也是在那里学的</p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一堆数,有以下两个操作:</p><ul><li><p>给出一个区间$[L,R]$,把该区间内的每个数都开平方</p></li><li><p>给出一个区间$[L,R]$,查询这个区间的每个数的和</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先看一下这个数据范围,$1e18$,直接暴力的话肯定会T飞</p><p>求和操作很简单,相信学过线段树的人应该都会</p><p>难点在于这个开方操作,我们没法像线段树模板那样打个懒标记来进行下传操作</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/72ur96tc.png" alt=""></p><p>通过观察$\sqrt x$函数图像缓慢的增长率或者其他性质不难发现,很多开方操作是不必要的,考虑减枝优化:</p><ul><li>不难发现,<strong>当一个区间内的所有数都是$1$时,再对该区间进行开方操作对该区间内的总值造成不了任何改变</strong>($\sqrt{1} = 1$)</li></ul><p>因此代码实现方面只要在区间内总值均为1的情况下加一个小剪枝即可</p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>思路理解了代码实现难度就不高了,但还是有几个坑点…具体的注释里有写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson (node&lt;&lt;1)<span class="comment">//左儿子</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson (node&lt;&lt;1|1)<span class="comment">//右儿子</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long <span class="comment">//记得开long long</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;<span class="comment">//左右端点</span></span><br><span class="line">ll sum;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">ll a[MAXN];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].sum = tree[lson].sum + tree[rson].sum;<span class="comment">//合并操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//建树</span></span><br><span class="line">tree[node].l = l;</span><br><span class="line">tree[node].r = r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].sum = a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> L = tree[node].l,R = tree[node].r;</span><br><span class="line"><span class="keyword">if</span>(tree[node].sum==R-L+<span class="number">1</span>) <span class="keyword">return</span>;<span class="comment">//如果总和为区间长度,也就是所有值均为1时,直接剪枝掉</span></span><br><span class="line"><span class="keyword">if</span>(L==R)&#123;</span><br><span class="line">tree[node].sum = <span class="built_in">sqrt</span>(tree[node].sum);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)&#123;</span><br><span class="line"><span class="built_in">change</span>(lson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)&#123;</span><br><span class="line"><span class="built_in">change</span>(rson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//查询</span></span><br><span class="line"><span class="type">int</span> L = tree[node].l,R = tree[node].r;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R)&#123;<span class="comment">//包含在查询区间内,直接返回sum值</span></span><br><span class="line"><span class="keyword">return</span> tree[node].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)&#123;</span><br><span class="line">ans+=<span class="built_in">query</span>(lson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)&#123;</span><br><span class="line">ans+=<span class="built_in">query</span>(rson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);<span class="comment">//不加貌似会TLE?</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> Case=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>,++Case);<span class="comment">//注意,样例里那个case是要输出的,一开始被这里卡了好久...</span></span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));<span class="comment">//记得要先memset</span></span><br><span class="line"><span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="built_in">sizeof</span>(tree));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="type">int</span> mode,left,right;</span><br><span class="line">cin&gt;&gt;mode&gt;&gt;left&gt;&gt;right;</span><br><span class="line"><span class="keyword">if</span>(left &gt; right)&#123;</span><br><span class="line"><span class="built_in">swap</span>(left,right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mode==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,left,right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,left,right));</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//记得换行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1187E Tree Painting</title>
      <link href="/2020/07/26/cf1187e/"/>
      <url>/2020/07/26/cf1187e/</url>
      
        <content type="html"><![CDATA[<h1 id="CF1187E-Tree-Painting-题解"><a href="#CF1187E-Tree-Painting-题解" class="headerlink" title="CF1187E Tree Painting 题解"></a>CF1187E Tree Painting 题解</h1><h2 id="原题面"><a href="#原题面" class="headerlink" title="原题面"></a><a href="https://www.luogu.com.cn/problem/CF1187E">原题面</a></h2><h2 id="前置知识-换根-DP"><a href="#前置知识-换根-DP" class="headerlink" title="前置知识: 换根$DP$"></a>前置知识: 换根$DP$</h2><p>换根$DP$模板题</p><p>如果您还不会换根$DP$的话,可以先去看看UM巨佬的日报:</p><p><a href="https://sflsrick.blog.luogu.org/note-how-to-change-root">#278[UltiMadow] [学习笔记]换根dp</a></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给定一棵n个点的树 初始全是白点</p><p>要求你做n步操作，每一次选定一个与一个黑点相隔一条边的白点，将它染成黑点，然后获得该白点被染色前所在的白色联通块大小的权值。</p><p>求可获得的最大权值</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>几乎是一道裸的模板题了…</p><p>和P3478几乎一摸一样,只是需要一个微小的结论</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/h4z3mf0i.png" alt=""></p><h5 id="PS-图中节点的编号有一点微小的错误-不过并不影响阅读"><a href="#PS-图中节点的编号有一点微小的错误-不过并不影响阅读" class="headerlink" title="PS:图中节点的编号有一点微小的错误,不过并不影响阅读"></a>PS:图中节点的编号有一点微小的错误,不过并不影响阅读</h5><p>假如说我们选了图中的1号节点作为第一个涂色的点（图中蓝色的点)</p><p>那下一个涂色的节点肯定就能选择它的几个儿子了(图中深红色的点)</p><p>同时,<strong>由于父亲节点已经被涂色了,其子节点不可能再和上面的”祖先”辈节点有联通了</strong><br><strong>能对其产生贡献的只有自己的子树</strong></p><p>因此当一个父亲节点被涂色后,其所有子树都是<strong>相对”独立”的</strong>，涂色顺序的变化对总贡献值无任何影响</p><p>故当<strong>第一个节点被涂色后,剩下节点的涂色顺序均无法对总贡献值产生影响</strong></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>单纯的暴力枚举每个根的位置的话照这个数据范围肯定会T飞</p><p>考虑换根DP</p><p>应该很容易状态转移方程推出:</p><ul><li>$dp[v] = dp[u]-2size[v]+size[1]$</li></ul><p>具体这个方程怎么来的,我之前写的P3478的<a href="https://www.luogu.com.cn/blog/xcxc82/p3478-poi2008sta-station-ti-xie">题解</a>跟前面UM巨佬的日报里也有讲</p><p>套上换根$DP$的板子即可</p><p>贴上丑陋的代码:（其实只要把P3478的代码改一行就可以了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">200010</span>;</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; son[MAXN];</span><br><span class="line"><span class="type">int</span> vis[MAXN],n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> size[MAXN];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">size[u] = <span class="number">1</span>;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[u][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[u][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">f[v] = f[u] + size[<span class="number">1</span>] - <span class="number">2</span>*size[v];</span><br><span class="line"><span class="built_in">dp</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">son[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">son[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">f[<span class="number">1</span>]+=size[i];</span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">   <span class="built_in">dp</span>(<span class="number">1</span>);</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> ans = <span class="number">-0x3f</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans , f[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2458 [SDOI2006]保安站岗</title>
      <link href="/2020/07/20/p2458/"/>
      <url>/2020/07/20/p2458/</url>
      
        <content type="html"><![CDATA[<h1 id="P2458-SDOI2006-保安站岗-题解"><a href="#P2458-SDOI2006-保安站岗-题解" class="headerlink" title="P2458 [SDOI2006]保安站岗 题解"></a><strong>P2458 [SDOI2006]保安站岗 题解</strong></h1><h2 id="间隙-原题面"><a href="#间隙-原题面" class="headerlink" title="间隙(原题面)"></a><a href="https://www.luogu.com.cn/problem/P2458">间隙(原题面)</a></h2><ul><li>前排声明:蒟蒻刚学OI没多久,讲的可能比较啰嗦,望见谅</li></ul><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一颗树,每个点都可以花费一定的价格来放置一名”保安”</p><p>每个保安都可以看管他本身所在的点和所有与他所站的点相邻的点</p><p>求:看管所有点所需要的最小花费</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>树形dp。</p><p>先来说一种错误的做法,也是我一开始想到的做法</p><p>每个点都有”放置”和”不放置”两种选择</p><p><strong>设$dp[i][0]$为第$i$个点”不放置”保安所需要的最小花费</strong></p><p><strong>$dp[i][1]$为第$i$个点“放置”保安所需要的最小花费</strong></p><p>如果第$i$个点”放置”了保安</p><p>那它的下一个节点则可以选择”放或不放”两种决策</p><p>反之,下一个节点必须都”放置”一名保安</p><p><del>很明显是错的</del></p><p>放张图应该就明白了<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/c3ommepj.png" alt=""></p><p>(下一个节点不一定要由父亲或自己来看管,也可以由自己的”儿子”来看管)</p><p>也就是说,每个点的看管对象都有:</p><ul><li><strong>自己</strong></li><li><strong>父亲</strong></li><li><strong>儿子</strong></li></ul><p><strong>三种可能</strong></p><h2 id="如何转移"><a href="#如何转移" class="headerlink" title="如何转移"></a>如何转移</h2><p>设$dp[i][0]$为该点<strong>由自己看管</strong>所产生的最有解</p><p>$dp[i][1]$为该点<strong>由父亲看管</strong>所产生的最优解</p><p>$dp[i][2]$为该点<strong>由儿子看管</strong>所产生的最优解</p><ul><li><strong>1.由“自己”看管</strong></li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ywr3v3nc.png" alt=""></p><p>自己的位置上已经”放置了”一个点</p><p>那么它的所有儿子就都会被自己所”看管”住</p><p>显然儿子可以选择任意一种决策</p><ul><li>得到转移方程:$dp[i][0]=\sum min(dp[son][0],dp[son][1],dp[son][2])+w[i]$</li></ul><p>($w[i]$为父亲节点”放置”守卫所需要的价值)</p><ul><li><strong>2.由“父亲”看管</strong></li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/75jddbxl.png" alt=""></p><p>自己由父亲看管,说明自己所在的点上<strong>未”放置”门卫</strong>,那儿子肯定<strong>只能由自己的儿子看管或由自己看管</strong></p><ul><li><p>得到方程:$dp[i][1]=\sum min(dp[son][0],dp[son][2])$</p></li><li><p>3.<strong>由“儿子”看管</strong></p></li></ul><p>（图中红蓝分别为两种可能情况）</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/b7rw1758.png" alt=""></p><p>既然是由自己的儿子看管</p><p>儿子的决策也有两种可能</p><p>1.由儿子的”儿子”看管</p><p>2.由自己看管</p><ul><li>得到方程:$dp[i][2]=\sum min(dp[son][2],dp[son][0])$</li></ul><p>有一种极端情况,如果全部都选了$dp[son][2]$</p><p>“自己”就会产生无人看管的情况</p><p>因此要在这里加一个小特判,具体代码里有解释</p><p>这里做了个简陋的gif,不懂的可以结合代码看一下</p><p><img src="https://img-blog.csdnimg.cn/20200720102214607.gif" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1510</span>;</span><br><span class="line"><span class="type">int</span> n,dp[MAXN][<span class="number">4</span>],w[MAXN];</span><br><span class="line"><span class="type">int</span> is_head[MAXN];</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; son[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">bool</span> is_cs = <span class="literal">false</span>;<span class="comment">//用来判断有无极端情况</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> minn = <span class="number">0x3ffffff</span>;<span class="comment">//用来求极端情况的最小值 </span></span><br><span class="line">dp[x][<span class="number">0</span>] = w[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">dp[x][<span class="number">0</span>]+=<span class="built_in">min</span>(<span class="built_in">min</span>(dp[v][<span class="number">0</span>],dp[v][<span class="number">1</span>]),dp[v][<span class="number">2</span>]);<span class="comment">//由自己看守 </span></span><br><span class="line">dp[x][<span class="number">1</span>]+=<span class="built_in">min</span>(dp[v][<span class="number">2</span>],dp[v][<span class="number">0</span>]);<span class="comment">//由父亲看守 </span></span><br><span class="line"><span class="comment">//由儿子看守 ↓ </span></span><br><span class="line"><span class="keyword">if</span>(dp[v][<span class="number">0</span>]&lt;dp[v][<span class="number">2</span>])&#123; </span><br><span class="line">dp[x][<span class="number">2</span>]+=dp[v][<span class="number">0</span>];<span class="comment">//如果儿子放置守卫花费的钱更少,那就直接在儿子的点上放置一个守卫 </span></span><br><span class="line">is_cs=<span class="literal">true</span>;<span class="comment">//既然儿子的位置上已经放置守卫了,无极端情况存在 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//否则在儿子的儿子上放置守卫 </span></span><br><span class="line">minn = <span class="built_in">min</span>( minn , dp[v][<span class="number">0</span>]-dp[v][<span class="number">2</span>]);<span class="comment">//计算最小所需值 </span></span><br><span class="line">dp[x][<span class="number">2</span>]+=dp[v][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!is_cs) dp[x][<span class="number">2</span>]+=minn;<span class="comment">//如果存在极端情况,则加上差值,相当于是消掉dp[-][2],加上dp[-][0] </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;m);</span><br><span class="line">w[u]=m;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">is_head[v]++;</span><br><span class="line">son[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!is_head[i])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">cout&lt;&lt;<span class="built_in">min</span>(dp[i][<span class="number">0</span>],dp[i][<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF607B Zuma</title>
      <link href="/2020/07/09/cf607b/"/>
      <url>/2020/07/09/cf607b/</url>
      
        <content type="html"><![CDATA[<h1 id="CF607B-Zuma-题解"><a href="#CF607B-Zuma-题解" class="headerlink" title="CF607B Zuma 题解"></a>CF607B Zuma 题解</h1><h2 id="间隙-原题面"><a href="#间隙-原题面" class="headerlink" title="间隙(原题面)"></a><a href="https://www.luogu.com.cn/problem/CF607B">间隙(原题面)</a></h2><ul><li>前排声明:蒟蒻刚学oi没多久,而且是自学的,写的可能会比较累赘,望见谅。</li></ul><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>基础区间dp</li></ul><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个长度为n的串,每次都可以挑选一个回文的连续字串进行消除,删除后，剩余的串将连接在一起，形成一个新的串,求把串全部删除完需要的最小次数</p><hr><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/k3ezz757.png" alt=""></p><p>可以看出每一个区间的的求解都可以分为更小的两个区间的求解</p><p>联想到区间dp</p><p>设$dp[l][r]$为左端点为l,右端点为r时的最优解</p><p>不难推出<del>比较套路的</del>状态转移方程</p><ul><li>$dp[l][r]=min(dp[l][r],dp[l][k]+dp[k+1][r]).(l&lt;=k&lt;r)$</li></ul><p>同时,这里还有一个区间的回文判断</p><p>假设我们把总区间划分为两个区间</p><p>$[1,4,5,3,4,1,3,2]$和$[3,2]$</p><p>其中$[1,4,5,3,4,1,3,2]$包含一个回文部分</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/teqq2yqh.png" alt=""></p><p>此时我们只要直接将回文部分删去即可</p><p>即$dp[l][r]=dp[l+1][r-1]$</p><p>这其实是一个类似于预处理的东西(个人看法,可能有误)</p><p>如果一个区间包含回文部分</p><p>则先把$dp[l][r]$给预处理成它不进行划分可以产生的最小值</p><p>再去和划分成两个区间所产生的最小值进行比较</p><ul><li>即$if(a[l]==a[r])$<br>$dp[l[[r]=dp[l+1][r-1]$</li></ul><p>贴上丑陋的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n,a[MAXN],dp[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//预处理长度为1的区间</span></span><br><span class="line">dp[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">1</span>;len&lt;n;len++)&#123;<span class="comment">//枚举长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=n&amp;&amp;l+len&lt;=n;l++)&#123;<span class="comment">//枚举左右断点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> r=l+len;</span><br><span class="line">dp[l][r]=inf;</span><br><span class="line"><span class="keyword">if</span>(a[l]==a[r])&#123;<span class="comment">//如果包含回文部分</span></span><br><span class="line"><span class="keyword">if</span>(r==l+<span class="number">1</span>)&#123;<span class="comment">//注意,这里是区间长度为2的特判</span></span><br><span class="line">dp[l][r]=dp[l+<span class="number">1</span>][r<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> dp[l][r]=dp[l+<span class="number">1</span>][r<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;r;k++)&#123;<span class="comment">//枚举断点</span></span><br><span class="line">dp[l][r]=<span class="built_in">min</span>(dp[l][r],dp[l][k]+dp[k+<span class="number">1</span>][r]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[<span class="number">1</span>][n];</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>如有错误欢迎大佬们指出QwQ</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3800 power收集</title>
      <link href="/2020/07/07/p3800/"/>
      <url>/2020/07/07/p3800/</url>
      
        <content type="html"><![CDATA[<h1 id="P3800-Power收集-题解"><a href="#P3800-Power收集-题解" class="headerlink" title="P3800 Power收集 题解"></a>P3800 Power收集 题解</h1><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a><a href="https://www.luogu.com.cn/problem/P3800">传送门</a></h2><p>前排声明:蒟蒻刚学oi没多久,写的可能比较粗糙,望谅解</p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个$N×M$大小的矩阵</p><p>其中有k个点包含一个带有价值的P点</p><p>每一行中的一个格子i都可以从上一行中的第$[i-t,i+t]$个格子中转移过来</p><p>求可以获得的最大价值</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>大致思路和<a href="https://www.luogu.com.cn/problem/P1725">P1725 琪露诺</a>很像,只是换了一种形式而已</p><p>既然每一个格子$i$都可以从上一行中的第$ [i-t,i+t] $个格子中转移过来</p><p>我们<strong>设$a[i][j]$为第$i$行第$j$个点的价值大小</strong></p><p>容易得到状态转移方程:</p><ul><li><p>$dp[i][j]=max(dp[i-1][k])+a[i][j] (j-T&lt;=k&lt;=j+T)$</p></li><li><p>因此,对于每一个$dp[i][j]$来说</p></li></ul><p>他的值均是由上一行中$[j-t,j+t]$区间中的最大值转移过来的</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/f400j4mf.png" alt=""></p><h6 id="懒得找城管的图了-只好拿之前cirno的图改了一下"><a href="#懒得找城管的图了-只好拿之前cirno的图改了一下" class="headerlink" title="(懒得找城管的图了,只好拿之前cirno的图改了一下)"></a>(<del>懒得找城管的图了,只好拿之前cirno的图改了一下</del>)</h6><p>可以看出这是一个滑动区间求最值的问题</p><p>可以考虑用单调队列来优化</p><p>在进行第$i$行第$j$列的转移前</p><p>利用滑动窗口将第$i-1$行中$[j-t,j+t]$的最大值来求出来</p><p>这里<del>闲着无聊</del>做了个$gif$</p><p><img src="https://img-blog.csdnimg.cn/20200707134646322.gif" alt=""></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>开一个数组 $q$ 模拟队列,用来滑动求最值</p><p>首先初始化第一行的$dp[i][j]$</p><p>第2~n行则利用$q$来求上一行的最大值进行转移</p><ul><li><strong>swp函数</strong></li></ul><p>实现队列初始化功能</p><p>将前 $t$ 个数加入队列</p><ul><li><strong>swi函数</strong></li></ul><p>当插入新元素时</p><p>先判断队列是否在$[1,m]$的区间内(不判会RE)</p><p>如果在区间内:</p><p>$1$.调整队列单调性</p><p>$2$.入队</p><p>反之,超出范围,不入队</p><p>$3$.去掉”超时”元素</p><p>贴上丑陋的代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 4010</span></span><br><span class="line"><span class="type">int</span> tail=<span class="number">0</span>,head=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,t,ans; </span><br><span class="line"><span class="type">int</span> q[MAXN],a[MAXN][MAXN],dp[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">queue_empty</span><span class="params">()</span></span>&#123;<span class="comment">//清空窗口 </span></span><br><span class="line">tail=<span class="number">0</span>,head=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swi</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span>&#123;<span class="comment">//插入元素</span></span><br><span class="line">   <span class="keyword">if</span>(x+t&lt;=m)&#123;<span class="comment">//判断是否超过边界,不加会RE </span></span><br><span class="line">   <span class="keyword">while</span>(dp[last][x+t]&gt;dp[last][q[tail]]&amp;&amp;tail&gt;=head)&#123;<span class="comment">//单调队列 </span></span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">q[++tail]=x+t;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q[head]+t&lt;x) head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swp</span><span class="params">(<span class="type">int</span> last)</span></span>&#123;<span class="comment">//初始化窗口 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(dp[last][i]&gt;dp[last][q[tail]]&amp;&amp;tail&gt;=head)&#123;</span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">q[++tail] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k,&amp;t);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">a[x][y] = z;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//第一行初始化</span></span><br><span class="line">   dp[<span class="number">1</span>][i]=a[<span class="number">1</span>][i];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">   <span class="built_in">swp</span>(i<span class="number">-1</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">swi</span>(j,i<span class="number">-1</span>);</span><br><span class="line">   </span><br><span class="line">  dp[i][j]=dp[i<span class="number">-1</span>][q[head]]+a[i][j]; </span><br><span class="line">  </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">queue_empty</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(dp[n][i],ans);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如有错误欢迎dalao们指出qwq</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5239 回忆京都</title>
      <link href="/2020/07/05/p5239/"/>
      <url>/2020/07/05/p5239/</url>
      
        <content type="html"><![CDATA[<h1 id="P5239-回忆京都题解"><a href="#P5239-回忆京都题解" class="headerlink" title="P5239 回忆京都题解"></a>P5239 回忆京都题解</h1><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a><a href="https://www.luogu.com.cn/problem/P5239">传送门</a></h2><p>前排声明:题解写的比较累赘…把一些基本的恒等式都讲了一遍…(部分证明借鉴了《具体数学》一书)</p><p>如果您已经掌握了这些基础的话建议还是去看其他dalao们的题解吧qwq…</p><h2 id="1-基本恒等式"><a href="#1-基本恒等式" class="headerlink" title="1.基本恒等式"></a>1.基本恒等式</h2><p>我们把$\dbinom{n}{k}$符号读作”<strong>n选取k</strong>“</p><p>即<strong>从n个元素的集合中选取k个元素</strong>作为子集的方案总数</p><p>对于该集合的第一个元素的可能,有n种选择</p><p>对第二个元素,有n-1种选择,3,4,5…..也同理</p><p>同时,<strong>对于每k个元素组成的子集都恰好有$k!$种不同的排序</strong></p><p>根据乘法原理</p><p>得到公式</p><p>$\dbinom{n}{k}={\dfrac{n<em>(n-1)…</em>(n-k+1)}{k!}}$ </p><p>(<strong>基本恒等式</strong>)</p><hr><h2 id="2-对称恒等式"><a href="#2-对称恒等式" class="headerlink" title="2.对称恒等式"></a>2.对称恒等式</h2><p>先来看个图</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/a9xmsi5c.png" alt=""></p><p>观察一下不难发现规律</p><p>$\dbinom{n}{k}=\dbinom{n}{n-k}$</p><p>(<strong>对称恒等式</strong>)</p><p>至于正确性也显而易见</p><p><strong>从n个物品中选k个物品就相当于指定的n-k种物品不被选取</strong></p><hr><h2 id="3-吸收恒等式"><a href="#3-吸收恒等式" class="headerlink" title="3.吸收恒等式"></a>3.吸收恒等式</h2><p>我们知道,二项式系数的基本恒等式为</p><p>$\dbinom{n}{k}={\dfrac{n<em>(n-1)…</em>(n-k+1)}{k!}}$ </p><p>可以将式子转化为</p><p>$\dbinom{n}{k}={\dfrac{n}{k}<em>\dfrac{(n-1)…</em>(n-k+1)}{(k-1)!}}$ </p><p>得到式子$\dbinom{n}{k}=\dfrac{n}{k}\dbinom{n-1}{k-1}$</p><p>两边同乘k,得$k\dbinom{n}{k}=n\dbinom{n-1}{k-1}$<strong>恒等式1</strong></p><p>根据这个式子,再利用之前的恒等式1</p><p>还可以得到式子</p><p>$(n-k)\dbinom{n}{k}=(n-k)\dbinom{n}{n-k}$(根据对称性)</p><p>$=n\dbinom{n-1}{n-1-k}$(根据恒等式1)</p><p>$=n\dbinom{n-1}{k}$—-(根据对称性)<strong>恒等式2</strong> </p><hr><h2 id="4-加法公式"><a href="#4-加法公式" class="headerlink" title="4.加法公式"></a>4.加法公式</h2><p>观察一下前面的那张表,不难发现一个规律:</p><p>$\dbinom{n}{k}=\dbinom{n-1}{k-1}+\dbinom{n-1}{k}$</p><p>推导的话也很简单</p><p>根据之前吸收恒等式里的恒等式1和恒等式2</p><p>得出</p><p>$\dbinom{n}{k}=(n-k)\dbinom{n}{k}+k\dbinom{n}{k}=n\dbinom{n-1}{k}+n\dbinom{n-1}{k-1}$</p><hr><h2 id="5-题目"><a href="#5-题目" class="headerlink" title="5.题目"></a>5.题目</h2><h3 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意:"></a>大致题意:</h3><p>q次询问,每次都给一个m跟n,求</p><p>$\sum\limits<em>{i=1}^n\sum\limits</em>{j=1}^mC^i_j$</p><hr><p>根据前面的加法公式,很容易可以解出这题</p><p>一共有n次询问，如果一次一次的去加的话肯定会超时</p><p>可以考虑使用二维前缀和来优化</p><p>至于二维前缀和怎么用,前面的dalao们已经写的很清楚了,为了<del>让题解看起来不是那么的水</del>,彩笔这里就再粗糙的写一遍吧</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ez5vvkji.png" alt=""></p><p>从图中不难看出,对于每一个sum[i][j],都有</p><p>sum[i][j]=sum[i][j-1]+sum[i-1][j]+a[i][j]-sum[i-1][j-1]</p><p>因为这里面有一个对$1926081719260817$取模操作</p><p>相减可能会产生负数</p><p>比如说我们取模后$sum[i][j-1]+sum[i-1][j]+a[i][j]=1$</p><p>而$sum[i-1][j-1]=1926081719260816$</p><p>很明显,相减为负</p><p>至于如何避免其实也很简单,只要再加上一个模数就可以了,相当于是加上之前那个被模掉的部分</p><hr><p>贴上丑陋的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mo=<span class="number">19260817</span>;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">      a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1002</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">1002</span>;j++)&#123;</span><br><span class="line">a[i][<span class="number">0</span>]=a[i][i]=<span class="number">1</span>;</span><br><span class="line">a[i][j]=(a[i<span class="number">-1</span>][j]+a[i<span class="number">-1</span>][j<span class="number">-1</span>])%mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1002</span>;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">1002</span>;j++)&#123;</span><br><span class="line">sum[i][j]=(sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]+a[i][j]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>]+mo)%mo;</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">cout&lt;&lt;sum[r][l]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有错误还请大佬们指出</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>p4838 P哥破解密码</title>
      <link href="/2020/06/26/p4838/"/>
      <url>/2020/06/26/p4838/</url>
      
        <content type="html"><![CDATA[<h1 id="P4838-P哥破解密码题解"><a href="#P4838-P哥破解密码题解" class="headerlink" title="P4838 P哥破解密码题解"></a>P4838 P哥破解密码题解</h1><ul><li><h2 id="原题面"><a href="#原题面" class="headerlink" title="原题面"></a><a href="https://www.luogu.com.cn/problem/P4838">原题面</a></h2></li></ul><p><strong>思路貌似跟dalao们的有点不一样</strong></p><ul><li><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2></li></ul><hr><p>给一串长度为n的字符串,<strong>当且仅当串只由A和B构成</strong>，且没有连续的3个A时,该串合法,求方案总数</p><hr><p>感觉跟P4910帕秋莉的手环那道题目差不多吧….都是线性递推,貌似dalao们都是用动态规划来做的,<del>蒟蒻不太会,所以只好用比较sb的递推来做qwq</del></p><ul><li><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2>既然每个字符只有A和B两种可能,,如果字符串没有任何限制的话,很容易看出方 案总数为 : $2^n$</li></ul><p>但这里加了一个<strong>不能有没有连续的3个A</strong>出现的限制条件</p><p>不妨先来画个图来看一下,更加直观一点<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/en3d9md2.png" alt=""><br>图中为n=6的时候的情况</p><p>我们用$f_i$来表示长度为i的字符串的<strong>不合法方案总数</strong>(<strong>注意,是不合法方案总数</strong>)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/axtxuhus.png" alt=""></p><p>先来看第一个字符选A情况</p><p>这里我们可以把每一个B看作是一个”<strong>断点</strong>“</p><p>不难看出,每出现一个断点后</p><p>该断点下面的情况就可以从之前的$f_i$递推过来</p><p>而当出现连续3个A时,相当于是把下面的所有情况都”<strong>截断</strong>“了</p><p>也就是$2^{n-3}$种情况</p><p>第一个字符选”B”也同理</p><p>相当于是在第一个点的时候就把该串给”<strong>截断</strong>“了</p><p>容易推出当N=6时,合法方案总数为</p><p>$2^6-(f<em>{5}+f</em>{4}+f_{3}+2^3)$</p><p>其他n&gt;3的情况也同理</p><p>得到式子</p><p>方案总数=$2^n-(f<em>{n-1}+f</em>{n-2}+f_{n-3}+2^{n-3})$</p><p>=$7*2^{n-3}-(f<em>{n-1}+f</em>{n-2}+f_{n-3})$</p><p>=$(2^{n-1}+2^{n-2}+2^{n-3})-(f<em>{n-1}+f</em>{n-2}+f_{n-3})$</p><p>设$s_i$为方案总数</p><p>则$s<em>i=s</em>{i-1}+s<em>{i-2}+s</em>{i-3}$</p><p>得到最终式子<br>$\begin{cases}2(n=1)\4 (n=2)\7 (n=3)\s<em>i=s</em>{i-1}+s<em>{i-2}+s</em>{i-3}(n&gt;3)\end{cases}$ </p><p>贴个丑陋的代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> mo=<span class="number">19260817</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">&#125;ans,a;</span><br><span class="line">matrix <span class="keyword">operator</span> *(<span class="type">const</span> matrix &amp;x,<span class="type">const</span> matrix &amp;y)&#123;</span><br><span class="line">matrix z;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">z.a[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">z.a[i][j]=(z.a[i][j]+(x.a[i][k]*y.a[k][j])%mo)%mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">4</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">7</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">a.a[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i==j) ans.a[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ans.a[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a.a[<span class="number">1</span>][<span class="number">1</span>]=a.a[<span class="number">1</span>][<span class="number">2</span>]=a.a[<span class="number">1</span>][<span class="number">3</span>]=a.a[<span class="number">2</span>][<span class="number">1</span>]=a.a[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans=ans*a;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">a=a*a;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;((ans.a[<span class="number">1</span>][<span class="number">1</span>]+ans.a[<span class="number">2</span>][<span class="number">1</span>])%mo+ans.a[<span class="number">3</span>][<span class="number">1</span>])%mo&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><del>貌似是蒟蒻的第一次不看题解做出(比较水的)紫题?</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>p1725 琪露诺</title>
      <link href="/2020/06/25/p1725/"/>
      <url>/2020/06/25/p1725/</url>
      
        <content type="html"><![CDATA[<h1 id="P1725-琪露诺"><a href="#P1725-琪露诺" class="headerlink" title="P1725 琪露诺"></a><a href="https://www.luogu.com.cn/problem/P1725"></a>P1725 琪露诺</h1><p><a href="https://www.luogu.com.cn/problem/P1725">原题面</a></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给编号为0~N的N+1个数,每个格子都有一个冰冻指数ice[i]</p><p>每一个格子都可以转移到区间[i+l,i+r]上,求ice[i]总和的最大值</p><hr><p>很明显可以看出这是一道dp的题</p><p>我们不妨先把转移方程写出来</p><p>题目中说<strong>每一个格子都可以转移到区间[i+l,i+r]上</strong></p><p>不难推出转移方程:</p><ul><li><h3 id="dpi-max-dp-i-r-dp-i-r-1-…dp-i-l-1-dp-i-l-ice-i"><a href="#dpi-max-dp-i-r-dp-i-r-1-…dp-i-l-1-dp-i-l-ice-i" class="headerlink" title="$~~~~dpi=max(dp{i-r},dp{i-r+1},…dp{i-l-1},dp_{i-l})+ice[i]$"></a>$<del>~</del><del>~</del><del>~</del>~dp<em>i=max(dp</em>{i-r},dp<em>{i-r+1},…dp</em>{i-l-1},dp_{i-l})+ice[i]$</h3></li></ul><p>(放张图 样例是自造的,此图为i=4的情况)<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/ai7jcjuq.png" alt=""><br>因此,对于每一个$dp_i$来说</p><p>他的值均是由[$dp<em>{i-l}$~$dp</em>{i-r}$]区间中的最大值转移过来的(前面方程也说了)</p><p>而且这个区间是不断滑动的</p><p>滑动区间求最值,很容易联想到<strong>单调队列</strong></p><p>照题目里的数据范围普通的dp肯定会超时</p><p>因此我们可以用单调队列来优化它</p><p>做了一个比较粗糙的过程动态图qwq<br><img src="https://img-blog.csdnimg.cn/2020062520104327.gif" alt=""><br>补几张gif跳的比较快的图</p><p>$dp_1$</p><ul><li><img src="https://cdn.luogu.com.cn/upload/image_hosting/3h0hzail.png" alt=""><br>$dp_2$</li><li><img src="https://cdn.luogu.com.cn/upload/image_hosting/9osayz2u.png" alt=""><br>以此类推,均由[$dp<em>{i-l}$~$dp</em>{i-r}$]区间中的最大值转移过来</li><li><img src="https://cdn.luogu.com.cn/upload/image_hosting/pq2le485.png" alt=""></li></ul><hr><p>写的貌似有点累赘…</p><p>如有错误还请dalao们指出qwq,<del>话说没人会来看这么辣鸡的题解吧</del></p><p>贴个丑陋的代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> ice[<span class="number">300010</span>],dp[<span class="number">300010</span>],q[<span class="number">300010</span>];</span><br><span class="line"><span class="type">int</span> l,n,r,ans=<span class="number">-1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findmax</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=n;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(head&lt;=tail&amp;&amp;dp[q[tail]]&lt;dp[i-l]) tail--;<span class="comment">//单调队列 </span></span><br><span class="line"><span class="keyword">while</span>(head&lt;=tail&amp;&amp;q[head]&lt;i-r) head++;<span class="comment">//滑动区间 </span></span><br><span class="line">q[++tail]=i-l;</span><br><span class="line">dp[i]=dp[q[head]]+ice[i];<span class="comment">//转移 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i&gt;=n-r+<span class="number">1</span>) ans=<span class="built_in">max</span>(ans,dp[i]);<span class="comment">//在开始移动的时候求最大值 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ice[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));dp[<span class="number">0</span>]=<span class="number">0</span>;<span class="comment">//注意,ice的值可能为负,所以要把dp跟ans的值赋为无穷小,一开始在这里卡了好久... </span></span><br><span class="line"><span class="built_in">findmax</span>();</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>​            </p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P6524 「Wdoi-1」托卡马克</title>
      <link href="/2020/06/20/p6524/"/>
      <url>/2020/06/20/p6524/</url>
      
        <content type="html"><![CDATA[<h1 id="P6524-「Wdoi-1」托卡马克-题解"><a href="#P6524-「Wdoi-1」托卡马克-题解" class="headerlink" title="P6524 「Wdoi-1」托卡马克 题解"></a>P6524 「Wdoi-1」托卡马克 题解</h1><p>大致思路和上面那位dalao的差不多,有个错误也是看了上面那位dalao的题解才发现的qwq</p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a><strong>大致题意</strong></h2><p>在<strong>n</strong>个点中选<strong>m</strong>个点进行<strong>两两相连</strong>,两个点相连所产生的费用为两点距离之差的绝对值<br>求<strong>严格第k大费用值(即不存在并列情况的第 k 大方案）</strong></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先来看一下这个数据范围,<strong>k&lt;=2</strong></p><p>也就是说只有<strong>第一大</strong>和<strong>第二大</strong>两种可能</p><p>先来看一下k=1的时候的情况:</p><h1 id="k-1"><a href="#k-1" class="headerlink" title="k=1"></a>k=1</h1><p>我们假设a1~a8是递增的,且n=8,m=6,k=1</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/8kfaz7oq.png" alt=""></p><p>先假设我们选取了$a<em>1$,$a_2$,$a</em>{3}$,$a<em>{6}$,$a</em>{7}$,$a_{8}$这几个数</p><p>总费用值=$\sum\limits_{i=1,j=i+1}^{n-1,n}a_j-a_i$ </p><p>通过观察可以发现有些值是可以进行拼接的</p><p>如$a_1$~$a_8$=$a_1$~$a_3$+$a_3$~$a_8$=$a_1$~$a_6$+$a_6$~$a_8$=…</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/d2lcgwxn.png" alt=""></p><p>我们可以把这个拼接看成是在这一段的<strong>哪个位置断开</strong></p><p>这样一轮下来就相当于把开头为1和结尾为8的所有段数全部加完了 这样我们就不用再考虑1和8了<br>可以将图简化成下面这个样子</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7xhv1f3q.png" alt=""></p><p>(如图)</p><p>同样<br>$a_2$~$a_7$这段也一样,以此类推,直到缩小到不能再缩的时候停下就可以了</p><p>(大致过程)<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/chk50fh5.png" alt=""></p><p>根据断点数量的规律</p><p>不难推出费用值=$\sum\limits<em>{i=1}^\frac{m}{2}(m-2(i-1)-1)*(a</em>{n-i+1}*a_i)$</p><p>把$(m-2(i-1)-1)<em>(a_{n-i+1}</em>a_i)$看成一个<strong>组</strong></p><p>根据贪心原则</p><p>当k=1时</p><p>每次只需要分别取原数列排序后<strong>最大和最小的两个值形成的组</strong>,即可</p><p>如图(n=8,m=6)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ycwc66og.png" alt=""></p><p>这样k=1的情况就做完了</p><p>下面来看k=2的情况</p><h1 id="k-2"><a href="#k-2" class="headerlink" title="k=2"></a>k=2</h1><p>也就是次大的费用值</p><p>根据前面那个式子</p><p>很明显可以看出,如果要得到次小费用值,就要取改变最靠近中间的那个点</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/i0frh7yc.png" alt=""><br>(左右两种方向)</p><p>但从图中的数据明显可以看出,当中间的所有值和最靠近中间的那个值相等时,是无法改变总数值的</p><p>因此在最靠中间的那个值无法对总数值进行改变时</p><p>就只能去考虑改变第二靠近中间的值了,以此类推</p><p>如果不管怎么移动都无法改变总数值</p><p>即各项均相等或n==m时</p><p>输出-1</p><p>贴上丑陋不堪的代码和大致流程图<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/7h357q80.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,m,k,a[<span class="number">300010</span>],ans,ansL,ansR;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m/<span class="number">2</span>;i++)&#123;</span><br><span class="line">ans+=(m<span class="number">-2</span>(i<span class="number">-1</span>)<span class="number">-1</span>)*(a[n-i+<span class="number">1</span>]-a[i]);<span class="comment">//求第1大和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>) cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==m||a[<span class="number">1</span>]==a[n])&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=m/<span class="number">2</span>+<span class="number">1</span>;i&lt;=n-m/<span class="number">2</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i]!=a[m/<span class="number">2</span>])&#123;</span><br><span class="line">ansL=a[i]-a[m/<span class="number">2</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i==n-m/<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=m/<span class="number">2</span><span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[j]!=a[m/<span class="number">2</span>])&#123;</span><br><span class="line">                    ansL=(m<span class="number">-2</span>*j+<span class="number">1</span>)*(a[m/<span class="number">2</span>]-a[j]);<span class="comment">//算差值</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n-m/<span class="number">2</span>;i&gt;=m/<span class="number">2</span>+<span class="number">1</span>;i--)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i]!=a[n-m/<span class="number">2</span>+<span class="number">1</span>])&#123;</span><br><span class="line">ansR=a[n-m/<span class="number">2</span>+<span class="number">1</span>]-a[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==m/<span class="number">2</span>+<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m/<span class="number">2</span>+<span class="number">2</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j]!=a[n-m/<span class="number">2</span>+<span class="number">1</span>])&#123;</span><br><span class="line"></span><br><span class="line">                    ansR=(<span class="number">2</span>*(j-n)+m<span class="number">-1</span>)*(a[j]-a[n-m/<span class="number">2</span>+<span class="number">1</span>]);<span class="comment">//化简了一下 </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">max</span>(ans-ansL,ans-ansR);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4910 帕秋莉的手环</title>
      <link href="/2020/06/11/p4910/"/>
      <url>/2020/06/11/p4910/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d3ad362b6bcf1a34a30db5399c1ad1ba69578dc4487ee722f07bd824c574d79c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
