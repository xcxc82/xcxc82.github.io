<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树上启发式合并</title>
      <link href="/2020/08/16/%E6%A0%91%E4%B8%8A%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
      <url>/2020/08/16/%E6%A0%91%E4%B8%8A%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="模板题-CF600E-Lomsat-gelral"><a href="#模板题-CF600E-Lomsat-gelral" class="headerlink" title="模板题: CF600E Lomsat gelral"></a>模板题: <a href="https://www.luogu.com.cn/problem/CF600E">CF600E Lomsat gelral</a></h1><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一棵树有n个结点，每个结点都是一种颜色，每个颜色有一个编号，求树中每个子树的最多的颜色编号的和。</p><h1 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h1><ul><li>启发式算法:启发式算法是指基于经验和直观感觉，从而对一些算法的优化。</li></ul><p>举例:并查集的按秩合并</p><p>在并查集的按秩合并中,我们将小的集合往大的集合上合并,这样明显有利于加快并查集的祖先查找</p><h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><ul><li>首先是一次$bfs$,求出每个节点的重儿子</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">size[u] = <span class="number">1</span> ;<span class="comment">//子树大小</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]]) son[u] = v;<span class="comment">//找重儿子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来定义两个数组$cnt[]$和$c[]$,分别代表存放的某颜色在“<strong>当前</strong>”子树中的数量和存放某节点的颜色</p><p>这里的”当前”指的就是目前正在处理的节点(如果给每个节点都开一个$cnt$的话则会$MLE$)</p><ul><li><p>如果目前正在处理的节点是轻儿子,就把它的答案计入并删除其贡献</p></li><li><p>反之,如果是重儿子,也把它的答案计入,但不删除其贡献</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cunt</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">c[color[u]]+=val;<span class="comment">//val为1代表计入贡献,为-1代表删除贡献</span></span><br><span class="line"><span class="keyword">if</span>(c[color[u]] &gt; maxn)&#123;<span class="comment">//最多的颜色</span></span><br><span class="line">maxn = c[color[u]];</span><br><span class="line">sum = color[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[color[u]] == maxn)&#123;</span><br><span class="line">sum+=color[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==maxson||v==fa) <span class="keyword">continue</span>;<span class="comment">//如果是u的重儿子,直接跳过</span></span><br><span class="line"><span class="built_in">cunt</span>(v,u,val);<span class="comment">//dfs暴力计贡献</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> keep)</span></span>&#123;<span class="comment">//keep代表是否保留该贡献</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==son[u]||v==fa) <span class="keyword">continue</span>;<span class="comment">//是重儿子直接跳过</span></span><br><span class="line"><span class="built_in">dfs2</span>(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(son[u])&#123;<span class="comment">//如果有重儿子</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs2</span>(son[u],u,<span class="number">1</span>);<span class="comment">//keep为1,保留其贡献</span></span><br><span class="line">maxson = son[u];<span class="comment">//记u节点的重儿子</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cunt</span>(u,fa,<span class="number">1</span>);<span class="comment">//暴力统计其非子树贡献</span></span><br><span class="line">maxson = <span class="number">0</span>;</span><br><span class="line">ans[u] = sum;<span class="comment">//记录答案</span></span><br><span class="line"><span class="keyword">if</span>(!keep)&#123;<span class="comment">//如果不是重儿子,则将其贡献删除</span></span><br><span class="line"><span class="built_in">cunt</span>(u,fa,<span class="number">-1</span>); </span><br><span class="line">sum = maxn = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个$dfs$大致可以分为下面四个流程:</p><ul><li><p>记录轻儿子及其子树的答案且删除其贡献</p></li><li><p>记录重儿子及其子树的答案且不删除其贡献</p></li><li><p>暴力统计$u$及其所有轻儿子的贡献合并到刚算出的重儿子信息里</p></li><li><p>删除该删除的贡献</p></li></ul><p><img src="https://img2020.cnblogs.com/blog/2092833/202008/2092833-20200816183326748-1026754225.png"></p><p>这样一轮下来相当于是遍历了两遍轻儿子,一遍重儿子,显然效率是较高的</p><p>时间复杂度为$O(nlogn)$,<del>具体怎么证还不太清楚</del></p><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> next,to;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> size[MAXN],son[MAXN];</span><br><span class="line"><span class="type">int</span> color[MAXN],c[MAXN];</span><br><span class="line"><span class="type">int</span> maxn , sum;</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">1</span>],n,cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ans[MAXN] , maxson;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">      cnt++;</span><br><span class="line">      edge[cnt].to = v;</span><br><span class="line">      edge[cnt].next=head[u];</span><br><span class="line">      head[u]=cnt;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">size[u] = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]]) son[u] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cunt</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">c[color[u]]+=val;</span><br><span class="line"><span class="keyword">if</span>(c[color[u]] &gt; maxn)&#123;</span><br><span class="line">maxn = c[color[u]];</span><br><span class="line">sum = color[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[color[u]] == maxn)&#123;</span><br><span class="line">sum+=color[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==maxson||v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">cunt</span>(v,u,val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> keep)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(v==son[u]||v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(son[u])&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs2</span>(son[u],u,<span class="number">1</span>);</span><br><span class="line">maxson = son[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cunt</span>(u,fa,<span class="number">1</span>);</span><br><span class="line">maxson = <span class="number">0</span>;</span><br><span class="line">ans[u] = sum;</span><br><span class="line"><span class="keyword">if</span>(!keep)&#123;</span><br><span class="line"><span class="built_in">cunt</span>(u,fa,<span class="number">-1</span>); </span><br><span class="line">sum = maxn = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;color[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="built_in">add</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><del>最近沉迷stg无法自拔了</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tarjan算法学习笔记</title>
      <link href="/2020/08/12/tarjan%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/12/tarjan%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h1 id="缩点"><a href="#缩点" class="headerlink" title="缩点"></a><a href="https://www.luogu.com.cn/problem/P3387">缩点</a></h1><h2 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h2><ul><li><p>强连通：如果两个顶点可以相互通达，则称两个顶点强连通。</p></li><li><p>如果有向图$G$的每两个顶点都 强连通，称$G$是一个强连通图。</p></li><li><p>非强连通图有向图的极大强连通子图，称为强连通分量。</p></li></ul><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>定义两个数组,$dfn[ ]$和$low[]$</p><p>$dfn[u]$表示$u$节点第一次被$bfs$到的时间戳</p><p>$low[u]$表示$u$节点能”回溯”到的最早时间 </p><p>如果一个节点$u$的儿子$v$的$low[]$小于自己的$low[]$,说明该节点可以”回溯”到$u$之前,会产生一个强连通分量,记录这些点,将其合并成一个新点即可</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><ul><li><p>每$dfs$一个点$u$时,先把该点的$low[u]$和$dfn[u]$初始化成该点的时间戳,同时把这个点压入一个栈中</p></li><li><p>遍历其所有儿子,如果一个儿子没有被访问过,继续向下$dfs$,同时更新节点$u$的$low[u]$</p></li><li><p>反之,说明该儿子出现在$u$之前,无需再次$dfs$,直接更新节点$u$的$low[u]$即可</p></li><li><p>最后,如果一个节点的$dfn[]$跟$low$相等,说明该点是一个强连通分量中的起点,将栈中的所有该节点前的值全部取出,合并成一个新的节点</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;<span class="comment">//初始化</span></span><br><span class="line">s[++top] = u;<span class="comment">//压入栈</span></span><br><span class="line">vis[u] = <span class="number">1</span>;<span class="comment">//被访问过</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;<span class="comment">//遍历所有儿子</span></span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);<span class="comment">//向下遍历</span></span><br><span class="line">low[u] = <span class="built_in">min</span>(low[v] , low[u]);<span class="comment">//更新low</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;<span class="comment">//节点被访问过,直接更新</span></span><br><span class="line">low[u] = <span class="built_in">min</span>(low[v] , low[u]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[u]==dfn[u])&#123;<span class="comment">//如果是一个强连通分量的起点</span></span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(v = s[top--])&#123;</span><br><span class="line">vis[v] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(v==u) <span class="keyword">break</span>;<span class="comment">//将u前面的值全部取出</span></span><br><span class="line">w[u]+=w[v];<span class="comment">//合并点权</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="割点"><a href="#割点" class="headerlink" title="割点"></a><a href="https://www.luogu.com.cn/problem/P3388">割点</a></h1><h2 id="一些定义-1"><a href="#一些定义-1" class="headerlink" title="一些定义"></a>一些定义</h2><ul><li>割点:将一个无向图中的一个节点及与其相连的所有的边都删去后,整个图不再联通,则成该点为该图的一个割点</li></ul><h2 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h2><p>跟缩点大同小异的思路。</p><p>既然去除该点可以让整个图不再联通,说明其儿子与其上面的节点都无连接,也就是无法”回溯”到该点之前的点</p><p>直接用跟缩点一样的思路去写即可。</p><p>要注意的是 $:$ 这里的$low[u]$不再是直接更新成$low[v]$,而是更新为$dfn[v]$,在无向图中,每个点都有一条”返祖”边,这时把子节点的$low[]$值赋为父节点的$low[]$，就可能导致其$low[]&#x3D;&#x3D;$其父节点$low[]&lt;$其父节点$dfn[]$</p><h2 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程"></a>算法流程</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;<span class="comment">//初始化</span></span><br><span class="line"><span class="type">int</span> child = <span class="number">0</span>;<span class="comment">//根节点的儿子数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v,fa);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u] , low[v]);<span class="comment">//更新</span></span><br><span class="line"><span class="keyword">if</span>(low[v]&gt;=dfn[u]&amp;&amp;u!=fa)&#123;<span class="comment">//有一个子节点满足条件即可</span></span><br><span class="line">cut[u]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==fa) child++;<span class="comment">//如果是根节点,增加儿子数</span></span><br><span class="line">&#125;</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],dfn[v]);<span class="comment">//更新</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==fa&amp;&amp;child&gt;=<span class="number">2</span>) cut[u]=<span class="number">1</span>;<span class="comment">//如果根节点数量大于2,说明根节点可以成为割点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="缩点练习"><a href="#缩点练习" class="headerlink" title="缩点练习"></a>缩点练习</h1><p><a href="https://www.luogu.com.cn/problem/P2341">P2341 [USACO03FALL][HAOI2006]受欢迎的牛 G</a></p><p><a href="https://www.luogu.com.cn/problem/P2863">P2863 [USACO06JAN]The Cow Prom S</a></p><p><a href="https://www.luogu.com.cn/problem/P2746">P2746 [USACO5.3]校园网Network of Schools</a></p><p><a href="https://www.luogu.com.cn/problem/P1726">P1726 上白泽慧音</a></p><p><a href="https://www.luogu.com.cn/problem/P1262">P1262 间谍网络</a></p><p><a href="https://www.luogu.com.cn/problem/P5676">P5676 [GZOI2017]小z玩游戏</a></p><h2 id="P2341-USACO03FALL-受欢迎的牛-G"><a href="#P2341-USACO03FALL-受欢迎的牛-G" class="headerlink" title="P2341 [USACO03FALL]受欢迎的牛 G"></a>P2341 [USACO03FALL]受欢迎的牛 G</h2><p>$tarjan$经典题。</p><p>首先是缩点,将每个强联通分量都分成一个组,并记录这个组的出度和大小,如果只有一个组的出度为$0$,则说明该组中的所有奶牛都可以成为神犇(如果有两个组的出度均为零的话则说明%无法完全传递)</p><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;</span><br><span class="line">vis[u] = <span class="number">1</span>,s[++top] = u;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line">scc[u] = ++k;<span class="comment">//记录分组</span></span><br><span class="line"><span class="keyword">while</span>(v=s[top--])&#123;</span><br><span class="line">vis[v] = <span class="number">0</span>;</span><br><span class="line">scc[v] = k;<span class="comment">//记录分组</span></span><br><span class="line">size[k]++;<span class="comment">//记录大小</span></span><br><span class="line"><span class="keyword">if</span>(v==u) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P2863-USACO06JAN-The-Cow-Prom-S"><a href="#P2863-USACO06JAN-The-Cow-Prom-S" class="headerlink" title="[P2863 [USACO06JAN]The Cow Prom S]"></a>[P2863 [USACO06JAN]The Cow Prom S]</h2><p>简单的$tarjan$模板题。</p><p><del>实际上比模板题还要简单</del></p><p>判断栈头是否为$u$,若不为$u$,则说明有两个及以上的节点,若是,说明只有$u$一个节点</p><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;</span><br><span class="line">vis[u] = <span class="number">1</span>,s[++top] = u;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(s[top]!=u) ans++;<span class="comment">//特判</span></span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="keyword">while</span>(v=s[top--])&#123;</span><br><span class="line">vis[v] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(v==u) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="P2746-USACO5-3-校园网Network-of-Schools"><a href="#P2746-USACO5-3-校园网Network-of-Schools" class="headerlink" title="[P2746 [USACO5.3]校园网Network of Schools]"></a>[P2746 [USACO5.3]校园网Network of Schools]</h2><p> 给一张图,求:</p><ul><li><p>图中入度为零的点的个数</p></li><li><p>把整张图变成强连通图的最少添边值</p></li></ul><p> 第一问很简单,直接统计一下即可,对于第二问,由于强连通图中每个点的入度和出度都不为零,感性理解一下,可以先将那些出度为0的点和入度为0的点互补,由于出度为0的点的数量和入度为0的点数量可能不一致,因此最后还要将那些剩余的点和其他任意一个点相连</p><p> 最后的答案即为出度为零的点的数量和入读为零的点的数量中的最大值。</p><p> $code:$<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=head[i];j;j=e[j].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[j].to;</span><br><span class="line"><span class="keyword">if</span>(scc[i]!=scc[v])&#123;</span><br><span class="line">in[scc[v]]++;<span class="comment">//记录入度</span></span><br><span class="line">out[scc[i]]++;<span class="comment">//记录出度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ansin = <span class="number">0</span>,ansout = <span class="number">0</span>;<span class="comment">//出度数和入度数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i]==<span class="number">0</span>)&#123;<span class="comment">//记录入度</span></span><br><span class="line">ansin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(out[i]==<span class="number">0</span>)&#123;<span class="comment">//记录出度</span></span><br><span class="line">ansout++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;<span class="comment">//特判,如果该图已经是一个强连通图了,直接输出1和0即可</span></span><br><span class="line">    cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;ansin&lt;&lt;endl&lt;&lt;<span class="built_in">max</span>(ansin,ansout);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="P1726-上白泽慧音"><a href="#P1726-上白泽慧音" class="headerlink" title="P1726 上白泽慧音"></a>P1726 上白泽慧音</h2><p>车万题面好评</p><p>也是一道挺模板的题。</p><p>大致题意就是说求最大且字典序最小的那个强联通分量。</p><p>直接跑一遍$tarjan$记录每个点所在的强连通分量和该强联通分量的大小,然后一遍$for$循环求出最大的那个组,再将在那个组中的节点输出即可</p><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;</span><br><span class="line">vis[u] = <span class="number">1</span>,s[++top] = u;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">scc[u] = ++k;<span class="comment">//新分组</span></span><br><span class="line"><span class="keyword">while</span>(v=s[top--])&#123;</span><br><span class="line">vis[v] = <span class="number">0</span>;</span><br><span class="line">scc[v] = k;<span class="comment">//记录每个点所在的组</span></span><br><span class="line">size[k]++;<span class="comment">//记录该组的大小</span></span><br><span class="line"><span class="keyword">if</span>(v==u) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1262-间谍网络"><a href="#P1262-间谍网络" class="headerlink" title="P1262 间谍网络"></a>P1262 间谍网络</h2><p>直接跑一遍缩点，由于强连通分量中的每个点都是互相联通的,一个强联通分量中的最少花费资金也就是那个环里罪犯所需资金最小的</p><p>最后检查一下有无未访问的点,若有,直接输出$NO$,$return$,若无,那就接着记录每个点的入度,将入度为0的组的权值全部加起来即可</p><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;</span><br><span class="line">s[++top] = u;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[v] , low[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[v] , low[u]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line">tot++;</span><br><span class="line"><span class="keyword">while</span>(v = s[top--])&#123;</span><br><span class="line">vis[v] = <span class="number">0</span>;</span><br><span class="line">c[v] = tot;</span><br><span class="line">sum[tot] = <span class="built_in">min</span>(sum[tot],w[v]);<span class="comment">//取min</span></span><br><span class="line"><span class="keyword">if</span>(v==u) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P5676-GZOI2017-小z玩游戏"><a href="#P5676-GZOI2017-小z玩游戏" class="headerlink" title="P5676 [GZOI2017]小z玩游戏"></a>P5676 [GZOI2017]小z玩游戏</h2><p>对于这道题,首先想到的肯定是直接$n^2$建边</p><p>但会发现数据太大,复杂度接受不了</p><p>所以要考虑更优秀的建边方法</p><ul><li><p>建一个由有趣程度到游戏的边</p></li><li><p>建一个由游戏到兴趣程度的边</p></li><li><p>建立一个兴趣程度整数倍的边</p></li></ul><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//从有趣程度到该游戏</span></span><br><span class="line"><span class="type">int</span> u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;u);</span><br><span class="line"><span class="built_in">add</span>(n+u,i);</span><br><span class="line">maxn = <span class="built_in">max</span>(maxn , u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//从该游戏到兴趣程度</span></span><br><span class="line"><span class="type">int</span> u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;u);</span><br><span class="line"><span class="built_in">add</span>(i,n+u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxn;i++)&#123;<span class="comment">//兴趣程度的整数倍</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j*i&lt;=maxn;j++)&#123;</span><br><span class="line"><span class="built_in">add</span>(n+i,n+j*i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于那些存在兴趣程度整数倍的游戏,相当于是连上了两个游戏</p><p>而对于那些不存在的游戏,相当于是连了一个虚点,$rt$</p><p><img src="https://img2020.cnblogs.com/blog/2092833/202008/2092833-20200812155727508-655328923.png"></p><h1 id="割点练习"><a href="#割点练习" class="headerlink" title="割点练习"></a>割点练习</h1><p><a href="https://www.luogu.com.cn/problem/P5058">P5058 [ZJOI2004]嗅探器</a></p><p><a href="https://www.luogu.com.cn/problem/P3225">P3225 [HNOI2012]矿场搭建</a></p><h2 id="P5058-ZJOI2004-嗅探器"><a href="#P5058-ZJOI2004-嗅探器" class="headerlink" title="P5058 [ZJOI2004]嗅探器"></a><a href="https://www.luogu.com.cn/problem/P5058">P5058 [ZJOI2004]嗅探器</a></h2><p>要满足同时能收到$A$和$B$的信息的话要满足两个条件:</p><ul><li><p>$u$是割点</p></li><li><p>$A$或$B$在$v$子树内（包括$v$)且$B$或$A$不在$v$子树内(这样才能把$A$,$B$两个点的信号都收集到)</p></li></ul><p>因此,如果要成为满足条件的点,必须要满足:</p><ul><li>$dfn[v]&lt;&#x3D;dfn[a]$&amp;&amp;$dfn[v]&gt;dfn[b]$ ($A$在子树内,$B$不在)</li></ul><p>或</p><ul><li>$dfn[v]&lt;&#x3D;dfn[b]$&amp;&amp;dfn$[v]&gt;dfn[a]$($B$在子树内,$A$不在)</li></ul><p>$code:$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++Time;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(v,u);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[v] , low[u]);</span><br><span class="line"><span class="keyword">if</span>(low[v]&gt;=dfn[u]&amp;&amp;u!=a&amp;&amp;u!=b&amp;&amp;dfn[v]&lt;=dfn[a]&amp;&amp;dfn[v]&gt;dfn[b])&#123;<span class="comment">//第一种情况</span></span><br><span class="line">ans = <span class="built_in">min</span>(ans , u);<span class="comment">//取最小的点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[v]&gt;=dfn[u]&amp;&amp;u!=a&amp;&amp;u!=b&amp;&amp;dfn[v]&lt;=dfn[b]&amp;&amp;dfn[v]&gt;dfn[a])&#123;<span class="comment">//第二种情况</span></span><br><span class="line">ans = <span class="built_in">min</span>(ans , u);<span class="comment">//取最小的点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(v!=fa) low[u] = <span class="built_in">min</span>(low[u] , dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分学习笔记</title>
      <link href="/2020/08/07/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/07/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p> 树链剖分，就是将一颗树分成若干个编号连续的链,将树上问题转换为线性问题,降低问题的处理难度。</p><h2 id="模板题-P3384-【模板】轻重链剖分"><a href="#模板题-P3384-【模板】轻重链剖分" class="headerlink" title="模板题:P3384 【模板】轻重链剖分"></a>模板题:<a href="https://www.luogu.com.cn/problem/P3384">P3384 【模板】轻重链剖分</a></h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给一颗节点数为$n$的带点权树,有以下几种操作:</p><ul><li><p>将树从 $x$ 到 $y$ 结点最短路径上所有节点的值都加上 $z$</p></li><li><p>求从 $x$ 到 $y$ 节点最短路径上的所有 节点值之和</p></li><li><p>以 $x$ 为根节点的子树内所有节点值都加上 $z$。</p></li><li><p>求以 $x$ 为根节点的子树内所有节点值之和</p></li></ul><p>数据范围:$1\le N\le10^5$</p><h2 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h2><ul><li><p>重儿子：以一个非叶子节点中的一个儿子为根的子树最大的那一个儿子称为重儿子</p></li><li><p>轻儿子：一个非叶子节点中除了重儿子以外的儿子</p></li><li><p>重边：结点与其重儿子的边称为重边</p></li><li><p>轻边：结点与其轻儿子的边称为轻边</p></li><li><p>重链：由重边组成的路径</p></li><li><p>轻链：由轻边组成的路径</p></li></ul><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>首先是两次$DFS$</p><p>第一次求出子树大小,父节点,深度,重儿子这些之后要用的东西</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f,<span class="type">int</span> deep)</span></span>&#123;</span><br><span class="line">dep[u] = deep;<span class="comment">//深度</span></span><br><span class="line">fa[u] = f;<span class="comment">//父亲节点</span></span><br><span class="line">size[u] = <span class="number">1</span>;<span class="comment">//初始化子树大小</span></span><br><span class="line"><span class="type">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i = e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u,deep+<span class="number">1</span>);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line">    <span class="keyword">if</span>(size[v]&gt;maxson) son[u] = v,maxson = size[v];<span class="comment">//重儿子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次$dfs$则是将树上的节点重新编号,划分成若干条链</p><p><strong>每次都去选取自己的重儿子进行连接</strong>,这样可以尽可能的让一条链够长</p><p>其余的轻儿子则作为另一条链的开头</p><p>画成图的话大概是这样:</p><p>(ps:图中的红色节点均为重儿子)</p><p><img src="https://img2020.cnblogs.com/blog/2092833/202008/2092833-20200807180043859-1789457354.png"></p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;<span class="comment">//topf为一条链的头</span></span><br><span class="line">id[u] = ++tot;<span class="comment">//重新编号,赋值</span></span><br><span class="line">val[tot] = w[u];</span><br><span class="line">top[u] = topf;<span class="comment">//记录链头,之后有用</span></span><br><span class="line"><span class="keyword">if</span>(!son[u]) <span class="keyword">return</span>;<span class="comment">//为叶子节点</span></span><br><span class="line"><span class="built_in">dfs2</span>(son[u],topf);<span class="comment">//以重儿子向下继续连接</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;<span class="comment">//</span></span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);其余的边则作为新一条链的开头</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用线段树维护这些链</p><p>对于操作1跟操作2</p><p>每次查询和修改从u到v的路径时</p><p>只需将低的那个点跳到上条链的结尾,也就是自己所在的链的头的父节点,同时查询&#x2F;修改跳过的这段链的值即可</p><p><img src="https://img-blog.csdnimg.cn/20200807175445981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTc0NTMw,size_16,color_FFFFFF,t_70"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qb</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;<span class="comment">//操作1~5</span></span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])&#123;<span class="comment">//如果不在同一条链上</span></span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);<span class="comment">//跳高度低的那个</span></span><br><span class="line">ans+=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[u]],id[u]);<span class="comment">//查询该端的值,修改也同理</span></span><br><span class="line">ans%=mo;</span><br><span class="line">u = fa[top[u]];<span class="comment">//跳到链头的父节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">ans+=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[u],id[v]);<span class="comment">//操作6</span></span><br><span class="line">ans%=mo;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于操作$3,4$,由于是$dfs$,其子树的编号也一定是连续的</p><p>直接查询&#x2F;修改区间$[id[u],id[u]+size[u]-1]$即可</p><p>($id[u]$为该节点重组后的编号,$size[u]$为子树大小)</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson (node&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson (node&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> len (r-l+1)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,next;</span><br><span class="line">&#125;edge[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> w[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m,mo;</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">2</span>],cnt = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> dep[MAXN],fa[MAXN],son[MAXN],size[MAXN];</span><br><span class="line"><span class="type">int</span> id[MAXN],val[MAXN],top[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">edge[cnt].u=u;</span><br><span class="line">    edge[cnt].v=v;</span><br><span class="line">    edge[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> f,<span class="type">int</span> deep)</span></span>&#123;</span><br><span class="line">dep[x] = deep;</span><br><span class="line">fa[x] = f;</span><br><span class="line">size[x] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v= edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,x,deep+<span class="number">1</span>);</span><br><span class="line">size[x]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;maxson) son[x] = v,maxson = size[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">id[x] = ++tot;</span><br><span class="line">val[tot] = w[x];</span><br><span class="line">top[x] = topf;</span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(son[x],topf);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa[x]||v==son[x]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"><span class="type">int</span> tag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].sum = (tree[lson].sum + tree[rson].sum)%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].sum = val[l];</span><br><span class="line"><span class="keyword">if</span>(tree[node].sum&gt;mo) tree[node].sum%=mo;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[node].tag==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    tree[lson].tag+=tree[node].tag;</span><br><span class="line">    tree[rson].tag+=tree[node].tag;</span><br><span class="line">    tree[lson].sum+=tree[node].tag*(len-(len&gt;&gt;<span class="number">1</span>));</span><br><span class="line">    tree[rson].sum+=tree[node].tag*(len&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    tree[lson].tag%=mo;</span><br><span class="line">    tree[rson].tag%=mo;</span><br><span class="line">tree[lson].sum%=mo;</span><br><span class="line">tree[rson].sum%=mo;</span><br><span class="line">tree[node].tag = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;</span><br><span class="line">tree[node].tag+=k;</span><br><span class="line">tree[node].sum+=k*(r-l+<span class="number">1</span>);</span><br><span class="line">tree[node].tag%=mo;</span><br><span class="line">tree[node].sum%=mo;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node,l,r);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(lson,l,mid,x,y,k);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) <span class="built_in">change</span>(rson,mid+<span class="number">1</span>,r,x,y,k);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;</span><br><span class="line"><span class="keyword">return</span> tree[node].sum%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node,l,r);</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) res+=<span class="built_in">query</span>(lson,l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) res+=<span class="built_in">query</span>(rson,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">res%=mo;</span><br><span class="line"><span class="keyword">return</span> res%mo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;tree[node].sum&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;tree[node].tag&lt;&lt;endl;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">test</span>(lson,l,mid);</span><br><span class="line">    <span class="built_in">test</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qb</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">ans+=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[u]],id[u]);</span><br><span class="line">ans%=mo;</span><br><span class="line">u = fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">ans+=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[u],id[v]);</span><br><span class="line">ans%=mo;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ub</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[u]],id[u],k);</span><br><span class="line">u = fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[u],id[v],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> root;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;root,&amp;mo);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">    <span class="built_in">add</span>(u,v);</span><br><span class="line">    <span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(root,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(root,root);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout&lt;&lt;dep[i]&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;val[i]&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;size[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="type">int</span> k,x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line"><span class="built_in">ub</span>(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">qb</span>(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[x]+size[x]<span class="number">-1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[x]+size[x]<span class="number">-1</span>)%mo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><del>话说树剖的好多题都好裸啊</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础线段树</title>
      <link href="/2020/08/06/%E5%9F%BA%E7%A1%80%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2020/08/06/%E5%9F%BA%E7%A1%80%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="P3373-【模板】线段树-2"><a href="#P3373-【模板】线段树-2" class="headerlink" title="P3373 【模板】线段树 2"></a><a href="https://www.luogu.com.cn/problem/P3373">P3373 【模板】线段树 2</a></h2><p>设$mtag$为乘法标记,$atag$为加法标记</p><p>对于下放后的每一个区间来说,$x&#x3D;x<em>mtag+atag</em>len$(式$1$)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/tbtb4rli.png"></p><p>$x&#x3D;x\cdot mtag_2+len\cdot atag_2&#x3D;(x\cdot mtag_2+len\cdot atag_2)\cdot mtag_1+atag_1\cdot len$</p><p>$&#x3D;x\cdot mtag_2\cdot mtag_1+len*atag_2\cdot mtag_1+atag_1\cdot len$</p><p>$&#x3D;x\cdot (mtag_2\cdot mtag_1)+len\cdot (atag_2\cdot mtag_1+atag_1)$</p><p>再根据前面的式$1$,易得</p><p>$mtag_2 &#x3D; mtag_1\cdot mtag_2$</p><p>$atag_2&#x3D;atag_2\cdot mtag_1+atag_2$</p><p>核心(下放)代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(tree2 *tree,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree-&gt;lazym==<span class="number">1</span>&amp;&amp;tree-&gt;lazyp==<span class="number">0</span>||tree-&gt;lson==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tree-&gt;lson-&gt;x = (tree-&gt;lson-&gt;x*tree-&gt;lazym+(<span class="type">long</span> <span class="type">long</span>)tree-&gt;lazyp*(mid-l+<span class="number">1</span>))%mo;</span><br><span class="line">tree-&gt;rson-&gt;x = (tree-&gt;rson-&gt;x*tree-&gt;lazym+(<span class="type">long</span> <span class="type">long</span>)tree-&gt;lazyp*(r-mid))%mo;</span><br><span class="line">tree-&gt;lson-&gt;lazym = (tree-&gt;lazym*tree-&gt;lson-&gt;lazym)%mo;</span><br><span class="line">tree-&gt;rson-&gt;lazym = (tree-&gt;lazym*tree-&gt;rson-&gt;lazym)%mo;</span><br><span class="line">tree-&gt;lson-&gt;lazyp = (tree-&gt;lazym*tree-&gt;lson-&gt;lazyp+tree-&gt;lazyp)%mo;</span><br><span class="line">tree-&gt;rson-&gt;lazyp = (tree-&gt;lazym*tree-&gt;rson-&gt;lazyp+tree-&gt;lazyp)%mo;</span><br><span class="line">tree-&gt;lazym  = <span class="number">1</span>;</span><br><span class="line">tree-&gt;lazyp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基础练习题"><a href="#基础练习题" class="headerlink" title="基础练习题"></a>基础练习题</h1><p><strong><a href="https://www.luogu.com.cn/problem/P4145">P4145 上帝造题的七分钟2 &#x2F; 花神游历各国</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P6327">P6327 区间加区间sin和</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P1438">P1438 无聊的数列</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P4513">P4513 小白逛公园</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P4588">P4588 [TJOI2018]数学计算</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P2894">P2894 [USACO08FEB]Hotel G</a></strong></p><h2 id="P4145-上帝造题的七分钟2-x2F-花神游历各国"><a href="#P4145-上帝造题的七分钟2-x2F-花神游历各国" class="headerlink" title="P4145 上帝造题的七分钟2 &#x2F; 花神游历各国"></a>P4145 上帝造题的七分钟2 &#x2F; 花神游历各国</h2><p>照题里的这个数据范围来看,直接暴力开方肯定会T飞</p><p>通过观察,不难发现数据范围内最大的数也只需要$6$次开方就可以变为$1$</p><p>考虑剪枝优化：</p><p>当一个区间的最大值为$1$时,其整个区间的其他值肯定也为$1$</p><p>因此当区间内最大值等于$1$时,直接$return$掉</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> L = tree[node].l,R = tree[node].r;</span><br><span class="line"><span class="keyword">if</span>(L==R)&#123;</span><br><span class="line">tree[node].sum = <span class="built_in">sqrt</span>(tree[node].sum);</span><br><span class="line">tree[node].maxn = <span class="built_in">sqrt</span>(tree[node].maxn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid&amp;&amp;tree[lson].maxn&gt;<span class="number">1</span>)&#123;<span class="comment">//最大值大于1时在进行修改操作</span></span><br><span class="line"><span class="built_in">change</span>(lson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid&amp;&amp;tree[rson].maxn&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">change</span>(rson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P6327-区间加区间sin和"><a href="#P6327-区间加区间sin和" class="headerlink" title="P6327 区间加区间sin和"></a>P6327 区间加区间sin和</h2><p>挺好的一道题目,很适合线段树初学者练手</p><p>学过和差角公式的应该都能很快想出解法</p><p>$sin(a+x) &#x3D; sinacosx+cosasinx$</p><p>$cos(a+x) &#x3D; cosacosx-sinxsina$</p><p>只需要在线段树里维护一个$sinx$和一个$cosx$即可</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update2</span><span class="params">(<span class="type">int</span> node,<span class="type">double</span> sinv,<span class="type">double</span> cosv)</span></span>&#123;<span class="comment">//和差角公式</span></span><br><span class="line"><span class="type">double</span> cosa = tree[node].cosx;</span><br><span class="line">        <span class="type">double</span> sina = tree[node].sinx;</span><br><span class="line">tree[node].cosx = cosa*cosv-sina*sinv;</span><br><span class="line">tree[node].sinx = sina*cosv+cosa*sinv;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;<span class="comment">//下放</span></span><br><span class="line"><span class="keyword">if</span>(tree[node].tag)&#123;</span><br><span class="line"><span class="type">double</span> cosa = <span class="built_in">cos</span>(tree[node].tag),sina = <span class="built_in">sin</span>(tree[node].tag);</span><br><span class="line"><span class="built_in">update2</span>(lson,sina,cosa);<span class="comment">//更新儿子的值</span></span><br><span class="line"><span class="built_in">update2</span>(rson,sina,cosa);</span><br><span class="line">tree[lson].tag+=tree[node].tag;<span class="comment">//更新儿子的tag</span></span><br><span class="line">tree[rson].tag+=tree[node].tag;</span><br><span class="line">tree[node].tag = <span class="number">0</span>;b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;<span class="comment">//更新操作</span></span><br><span class="line"><span class="type">int</span> L = tree[node].l,R = tree[node].r;</span><br><span class="line"><span class="keyword">if</span>(R&lt;=r&amp;&amp;L&gt;=l)&#123;<span class="comment">//包围在区间内,直接修改</span></span><br><span class="line">tree[node].tag+=x;</span><br><span class="line"><span class="built_in">update2</span>(node,<span class="built_in">sin</span>(x),<span class="built_in">cos</span>(x));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node);<span class="comment">//下放</span></span><br><span class="line"><span class="type">int</span> mid = (L + R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) <span class="built_in">change</span>(lson,l,r,x);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) <span class="built_in">change</span>(rson,l,r,x);</span><br><span class="line"><span class="built_in">update</span>(node);<span class="comment">//上传更新</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1438-无聊的数列"><a href="#P1438-无聊的数列" class="headerlink" title="P1438 无聊的数列"></a>P1438 无聊的数列</h2><p>利用线段树来维护差分数组。</p><p>每当进行一个操作$1$时</p><p>将点$l$加上首相$k$</p><p>如果区间不是一个点的话,则将区间$[l+1,r]$上的点都加上公差$d$</p><p>如果$r&lt;n$,则在$r+1$的位置上加上$-(k+(r-l)\cdot d))$,便于差分</p><p>查询时,将区间$[1,k]$的值都加上即可,相当于查询操作</p><p>区间查询,区间修改,直接上线段树模板即可</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="type">int</span> mode,l,r,k,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;mode);</span><br><span class="line"><span class="keyword">if</span>(mode==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;k,&amp;d);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,l,k);<span class="comment">//修改左端点</span></span><br><span class="line"><span class="keyword">if</span>(l!=r) <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,l+<span class="number">1</span>,r,d);<span class="comment">//修改区间</span></span><br><span class="line"><span class="keyword">if</span>(r+<span class="number">1</span>&lt;=n) <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,r+<span class="number">1</span>,r+<span class="number">1</span>,-(k+(r-l)*d));<span class="comment">//修改右端点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,d)+a[d]);<span class="comment">//差分数组的值+原值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P4513-小白逛公园"><a href="#P4513-小白逛公园" class="headerlink" title="P4513 小白逛公园"></a>P4513 小白逛公园</h2><p>线段树经典题</p><p>维护一个从区间左端点开始的区间最大子段$maxl$,从右端点开始的区间最大子段$maxr$,总区间最大子段$maxx$,和一个区间和$sum$</p><p>对于$maxl$来说,其右端点的位置有两种可能:</p><ul><li><p>在左儿子中</p></li><li><p>在右儿子中</p></li></ul><p>得到方程:$tree.maxl &#x3D; max(lson.maxl,lson.sum+rson.maxl)$</p><p>$maxr$也同理</p><p>方程:$tree.maxr &#x3D; max(rson.maxr,rson.sum+lson.maxr)$</p><p>对于$maxx$来说，其区间范围有三种可能</p><ul><li><p>只在左儿子中</p></li><li><p>只在右儿子中</p></li><li><p>既在左儿子中也在右儿子中</p></li></ul><p>得到方程:$tree.maxx &#x3D; max(lson.maxx,rson.maxx,lson.maxr+rson.maxl))$</p><p>查询时只需输出区间$[l,r]$中的$maxx$即可</p><p>核心代码:</p><p>更新操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(tree2 *tree,tree2 *lson,tree2 *rson)</span></span>&#123;</span><br><span class="line">tree-&gt;sum = lson-&gt;sum+rson-&gt;sum;</span><br><span class="line">tree-&gt;maxl = <span class="built_in">max</span>(lson-&gt;maxl,lson-&gt;sum+rson-&gt;maxl);</span><br><span class="line">tree-&gt;maxr = <span class="built_in">max</span>(rson-&gt;maxr,rson-&gt;sum+lson-&gt;maxr);</span><br><span class="line">tree-&gt;maxX = <span class="built_in">max</span>(lson-&gt;maxX,<span class="built_in">max</span>(rson-&gt;maxX,lson-&gt;maxr+rson-&gt;maxl));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tree2 *<span class="title">query</span><span class="params">(tree2 *tree,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line"><span class="keyword">return</span> tree;</span><br><span class="line"><span class="type">int</span> mid = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tree2 *t1 = <span class="literal">NULL</span>,*t2 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) t1 = <span class="built_in">query</span>(tree-&gt;lson,l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) t2 = <span class="built_in">query</span>(tree-&gt;rson,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">if</span>(t1==<span class="literal">NULL</span>) <span class="keyword">return</span> t2;</span><br><span class="line"><span class="keyword">if</span>(t2==<span class="literal">NULL</span>) <span class="keyword">return</span> t1;</span><br><span class="line">tree2 *ret = &amp;dizhi[++t];</span><br><span class="line"><span class="built_in">update</span>(ret,t1,t2);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P4588-TJOI2018-数学计算"><a href="#P4588-TJOI2018-数学计算" class="headerlink" title="P4588 [TJOI2018]数学计算"></a>P4588 [TJOI2018]数学计算</h2><p>比较简单的一道题目。</p><p>仔细观察不难发现</p><p>所谓的操作$1$跟操作$2$其实就是在进行普通的单点修改操作而已</p><p>用一个线段树在记录一段区间内的总乘积</p><p>操作$1$是把点$i$的值从$1$修改为$i$</p><p>操作$2$则是把点$pos$的值修改为$1$</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].val = (tree[lson].val*tree[rson].val)%mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mid = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].val = y;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(lson,l,mid,x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">change</span>(rson,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h2 id="P2894-USACO08FEB-Hotel-G"><a href="#P2894-USACO08FEB-Hotel-G" class="headerlink" title="P2894 [USACO08FEB]Hotel G"></a>P2894 [USACO08FEB]Hotel G</h2><p>跟<a href="https://www.luogu.com.cn/problem/P4513"><strong>P4513 小白逛公园</strong></a>大同小异的思路</p><p>只是把单点修改操作换成了区间修改罢了</p><p>要注意的是这里不存在负值的情况</p><p>因此在上传操作时转移没那么复杂,只用判断$maxl$是否等于$sum$</p><p>若等于,说明左儿子中房间全为空,直接全部加上,再加上右儿子的$maxl$</p><p>若不等于,则为左儿子的$maxl$</p><p>$maxr$也同理</p><p>同时也要注意这里的查询查的是满足长度为$x$的最左的端点</p><p>因此在查询时要满足”能左则左”</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;<span class="comment">//上传</span></span><br><span class="line"><span class="keyword">if</span>(tree[lson].maxx==tree[lson].sum)&#123;<span class="comment">//如果左区间全为空房</span></span><br><span class="line">tree[node].lmax = tree[lson].sum+tree[rson].lmax;<span class="comment">//全部加上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tree[node].lmax = tree[lson].lmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[rson].maxx==tree[rson].sum)&#123;</span><br><span class="line">tree[node].rmax = tree[rson].sum+tree[lson].rmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tree[node].rmax = tree[rson].rmax;</span><br><span class="line">&#125;</span><br><span class="line">tree[node].maxx = <span class="built_in">max</span>(tree[lson].rmax+tree[rson].lmax,<span class="built_in">max</span>(tree[lson].maxx,tree[rson].maxx));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">tree[node].sum = tree[node].lmax = tree[node].rmax = tree[node].maxx =r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;<span class="comment">//下放</span></span><br><span class="line"><span class="keyword">if</span>(tree[node].lazy==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[node].lazy==<span class="number">1</span>)&#123;<span class="comment">//退房</span></span><br><span class="line">tree[lson].maxx = tree[lson].rmax = tree[lson].lmax = <span class="number">0</span>;</span><br><span class="line">tree[rson].maxx = tree[rson].rmax = tree[rson].lmax = <span class="number">0</span>;</span><br><span class="line">tree[lson].lazy = tree[rson].lazy = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[node].lazy==<span class="number">2</span>)&#123;<span class="comment">//开房</span></span><br><span class="line">tree[lson].maxx = tree[lson].rmax = tree[lson].lmax = tree[lson].sum;</span><br><span class="line">tree[rson].maxx = tree[rson].rmax = tree[rson].lmax = tree[rson].sum;</span><br><span class="line">tree[lson].lazy = tree[rson].lazy = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">tree[node].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> opt)</span></span>&#123;<span class="comment">//opt为1代表退房,为2代表开房</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) tree[node].maxx = tree[node].lmax = tree[node].rmax = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> tree[node].maxx = tree[node].lmax = tree[node].rmax = tree[node].sum;</span><br><span class="line"></span><br><span class="line">tree[node].lazy = opt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(node);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">change</span>(lson,l,mid,x,y,opt);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) <span class="built_in">change</span>(rson,mid+<span class="number">1</span>,r,x,y,opt);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;<span class="comment">//查询</span></span><br><span class="line"><span class="built_in">pushdown</span>(node);</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">if</span>(tree[lson].maxx&gt;=x)&#123;<span class="comment">//如果左区间的最大值大于x,直接查左边</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(lson,l,mid,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tree[lson].rmax+tree[rson].lmax&gt;=x)&#123;<span class="comment">//如果中间大于x</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+mid-tree[lson].rmax;左儿子的右最大值,也就是最靠近左边的端点</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(rson,mid+<span class="number">1</span>,r,x);<span class="comment">//否则查右边</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态开点"><a href="#动态开点" class="headerlink" title="动态开点"></a>动态开点</h2><p><strong><a href="https://www.luogu.com.cn/problem/P5459">P5459 [BJOI2016]回转寿司</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/CF915E">CF915E Physical Education Lessons</a></strong></p><p>$now ~ loading…$</p><h2 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h2><p><strong><a href="https://www.luogu.com.cn/problem/P5490">P5490 【模板】扫描线</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P1502">P1502 窗口的星星</a></strong></p><p>$now ~ loading…$</p><p>&#96;&#96;</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5459 [BJOI2016]回转寿司</title>
      <link href="/2020/08/05/p5459/"/>
      <url>/2020/08/05/p5459/</url>
      
        <content type="html"><![CDATA[<h1 id="P5459-BJOI2016-回转寿司-题解"><a href="#P5459-BJOI2016-回转寿司-题解" class="headerlink" title="P5459 [BJOI2016]回转寿司 题解"></a>P5459 [BJOI2016]回转寿司 题解</h1><h2 id="间隙"><a href="#间隙" class="headerlink" title="间隙"></a><a href="https://www.luogu.com.cn/problem/P5459">间隙</a></h2><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><h2 id="前缀和-权值线段树-动态开点"><a href="#前缀和-权值线段树-动态开点" class="headerlink" title="前缀和,权值线段树,动态开点"></a>前缀和,权值线段树,动态开点</h2></li></ul><p>如果您还不会权值线段树跟动态开点的话,推荐去看一下<a href="https://www.bilibili.com/video/BV1Zg4y1q7aY?t=1726"><strong>这个教程</strong></a></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个序列,现从中取出一段连续子序列,使其子序列内数值总和$a$满足$L\le a\le R$</p><p>求总方案数。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>区间求和,很容易先联想到前缀和</p><p>不妨先设$sum[i]$为前$i$个数的前缀和</p><p>易得式子:</p><p>$L \le sum[r] - sum[l-1] \le R$</p><p>移项一下</p><p>$sum[r]-L \le sum[l-1]  \le sum[r]-R $</p><p>这样原问题就转化为了<strong>在区间$[sum[r]-L,sum[r]-R]$中有多少个$sum[l-1]$($l \in[1,r]$ )</strong></p><p><strong>每一个$r$也就相当于是查询区间$[sum[r]-L,sum[r]-R]$中$sum[l-1]$的总和</strong>($l \in[1,r]$ )</p><p>可以使用权值线段树$+$动态开点来维护。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>从$1$~$n$枚举$r$的值,把每一个$r$当作一次”查询”</p><p>同时不要忘记在进行下一次”查询” 前把 $l$ 的值 “更新”(指插入新的值)</p><p>具体的注释里有讲</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> MAXN = <span class="number">1e10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum[N];<span class="comment">//前缀和 </span></span><br><span class="line"><span class="type">int</span> n,l,r;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,sum;<span class="comment">//左儿子,右儿子,总方案数 </span></span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;<span class="comment">//上传操作 </span></span><br><span class="line">tree[node].sum = tree[tree[node].l].sum+tree[tree[node].r].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;node,<span class="type">long</span> <span class="type">long</span> x,<span class="type">long</span> <span class="type">long</span> l = -MAXN , <span class="type">long</span> <span class="type">long</span> r = MAXN)</span></span>&#123;<span class="comment">//更新 注意,l的初始值要设成负数,一开始在这里卡了好久\kk </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!node) node = ++tot;<span class="comment">//动态开点 </span></span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;<span class="comment">//如果为根节点 </span></span><br><span class="line">tree[node].sum++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mid = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) <span class="built_in">update</span>(tree[node].l,x,l,mid);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(tree[node].r,x,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);<span class="comment">//更新父节点的值 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> &amp;node,<span class="type">long</span> <span class="type">long</span> x,<span class="type">long</span> <span class="type">long</span> y,<span class="type">long</span> <span class="type">long</span> l =-MAXN,<span class="type">long</span> <span class="type">long</span> r = MAXN)</span></span>&#123;<span class="comment">//查询操作 </span></span><br><span class="line"><span class="keyword">if</span>(!node) node = ++tot;<span class="comment">//动态开点 </span></span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;<span class="comment">//包含在查询范围内 </span></span><br><span class="line"><span class="keyword">return</span> tree[node].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) res+=<span class="built_in">query</span>(tree[node].l,x,y,l,mid); </span><br><span class="line"><span class="keyword">if</span>(y&gt;mid) res+=<span class="built_in">query</span>(tree[node].r,x,y,mid+<span class="number">1</span>,r); </span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;l,&amp;r);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">sum[i] = sum[i<span class="number">-1</span>] + a;<span class="comment">//前缀和 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">insert</span>(root,<span class="number">0</span>);<span class="comment">//不要忘记插入0,也就是说一个都不吃的情况 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans+=<span class="built_in">query</span>(root,sum[i] - r,sum[i] - l);<span class="comment">//加方案数 </span></span><br><span class="line"><span class="built_in">insert</span>(root,sum[i]);<span class="comment">//&quot;更新&quot;l的值 </span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3478 [POI2008]STA-Station</title>
      <link href="/2020/08/03/p3478/"/>
      <url>/2020/08/03/p3478/</url>
      
        <content type="html"><![CDATA[<h1 id="P3478-POI2008-STA-Station题解"><a href="#P3478-POI2008-STA-Station题解" class="headerlink" title="P3478 [POI2008]STA-Station题解"></a>P3478 [POI2008]STA-Station题解</h1><h2 id="原题面"><a href="#原题面" class="headerlink" title="原题面"></a><a href="https://www.luogu.com.cn/problem/P3478">原题面</a></h2><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>换根DP</li></ul><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给出一个 N 个点的树,找出一个点来,以这个点为根的树时,所有点的深度之和最大</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>换根DP的模板题。</p><p>如果您还不会换根DP的话,可以先去看看UltiMadow巨佬的文章:</p><p><a href="https://www.luogu.com.cn/discuss/show/47327">【日报#278】[学习笔记]换根dp</a>,我一开始也是从那里学的qwq</p><p>这里我们设</p><ul><li><p><strong>$size[i]$为以$1$为根节点时节点$i$的子树大小</strong></p></li><li><p><strong>$dep[i]$为以$1$为根节点时节点$i$的深度大小</strong></p></li><li><p><strong>$dp[i]$为以$i$为根节点时深度之和的大小</strong></p></li></ul><p>很明显,我们可以通过一遍DFS求出以$1$为根节点时的深度之和</p><p>如果一个个的去算的话</p><p>照这个数据范围,显然会T飞</p><p>这个时候就要用到换根DP了</p><h2 id="换根-DP-优化"><a href="#换根-DP-优化" class="headerlink" title="换根$DP$优化"></a>换根$DP$优化</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/o5nj1c7o.png"></p><p>可以看出,当我们把根节点从1换到3时</p><p>对子节点3的贡献由两部分组成</p><p>1.<strong>自己子树的贡献(图中的k)</strong></p><p>2.<strong>父亲节点$1$的贡献</strong></p><hr><h2 id="如何转移"><a href="#如何转移" class="headerlink" title="如何转移"></a>如何转移</h2><ul><li><p>首先是$k$,作为自己子树所产生的贡献肯定要加上</p></li><li><p>$dp[u]$为以$u$为根节点时的深度总值,在计算时,要减去$v$的子树所产生的贡献,不然就重复计算了,同时</p></li></ul><p><strong>在以 $u$为根时,v节点及其子树内的所有节点的深度都增加了$1$</strong>,需要减去</p><p><strong>(图中红色的节点)</strong></p><p>合起来就是$dp[u]-(size[v]+k)$</p><ul><li>除v子树外的其他节点也一样</li></ul><p><strong>在以$v$为根时，除$v$节点及其子树外的其他节点的深度都增加了$1$</strong></p><p><strong>(图中蓝色的节点)</strong></p><p>合起来就是$(size[1]-size[v])$</p><p>得到转移方程</p><ul><li>$dp[v] &#x3D; k+(dp[u]-(k+size[v]))+(size[1]-size[v])$</li></ul><p>化简一下</p><ul><li>$dp[v] &#x3D; dp[u]-2size[v]+size[1]$</li></ul><p>转移方程推出来了,代码部分就不难实现了,两遍dfs,一次dfs统计子树内的节点对当前节点的贡献<br>一次dfs换根</p><p>贴个代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN  = <span class="number">100010</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[MAXN],dep[MAXN],size[MAXN];</span><br><span class="line"><span class="type">int</span> vis[MAXN];</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; son[MAXN];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">size[x] = <span class="number">1</span>;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">dep[v] = dep[x] +<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v);</span><br><span class="line">size[x]+=size[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">dp[v] = dp[x] +size[<span class="number">1</span>] - <span class="number">2</span>*size[v];</span><br><span class="line"><span class="built_in">dfs2</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">son[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">son[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dp[<span class="number">1</span>]+=dep[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">-0x3f</span>;</span><br><span class="line"><span class="type">int</span> jd =<span class="number">999</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans &lt; dp[i]) ans = dp[i], jd = i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;jd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划-换根dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1453 城市环路</title>
      <link href="/2020/08/03/p1453/"/>
      <url>/2020/08/03/p1453/</url>
      
        <content type="html"><![CDATA[<h1 id="P1453-城市环路-题解"><a href="#P1453-城市环路-题解" class="headerlink" title="P1453 城市环路 题解"></a>P1453 城市环路 题解</h1><h2 id="间隙"><a href="#间隙" class="headerlink" title="间隙"></a><a href="https://www.luogu.com.cn/problem/P1453">间隙</a></h2><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><h3 id="树形dp-基环树"><a href="#树形dp-基环树" class="headerlink" title="树形dp,基环树"></a>树形dp,基环树</h3></li></ul><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一颗含有点权的基环外向树</p><p>假如两个点之间有一条边连接,如果选择了其中一端的节点,那另一段的节点则不可选择</p><p>求:最大贡献</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先讲一下什么是基环树。</p><p>基环树,简单来说就是多了一条边的树,产生了一个环形结构,环上的每个节点都是一颗树的根</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/g8bnch8r.png"></p><p>画成图的话大概是这个样子(基环外向树)</p><p>一般来说,这种题目的做法都是先找到环,断开环中的一条边,<br>把它当成一般的树形$DP$来做。</p><h3 id="如何找环"><a href="#如何找环" class="headerlink" title="如何找环?"></a>如何找环?</h3><p>一般有$dfs$跟并查集两种方法 , 这里我采用的是并查集的做法</p><p>一开始每个节点都是一个独立的集合</p><p>每连接一条边,就把这两个点合并到一个集合中</p><p>如果在连接一条边之前,两个节点就已经在一个集合中了,说明这<strong>两个节点已经联通了,再连接这条边必然会产生环的情况</strong></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/53vb8z0u.png"></p><h3 id="如何转移"><a href="#如何转移" class="headerlink" title="如何转移?"></a>如何转移?</h3><p>找到了环之后,只需要将环上的这条边断开即可</p><p>这样的话就可以当作普通的树形$DP$来做了</p><p>设$f[i][0]$为选第$i$个节点产生的最大贡献</p><p>$f[i][1]$为不选第$i$个节点产生的最大贡献</p><p>如果选了第$i$个节点,那它的儿子肯定都不能选</p><p>反之,儿子可以选择选,也可以选择不选</p><p>得到转移方程:</p><p>$f[u][0] &#x3D; \sum f[v][0]$</p><p>$f[u][1] &#x3D; \sum max(f[v][1],f[v][0])$</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>思路明白了代码实现应该就不难了</p><p>要注意的是环上的两个点都可以作为树的根节点,因此在$DP$的时候要把两个点都跑一遍</p><p>具体的细节注释有写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;<span class="comment">//存图 </span></span><br><span class="line"><span class="type">int</span> v,next;</span><br><span class="line">&#125;e[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> f[MAXN][<span class="number">2</span>],w[MAXN];<span class="comment">//dp数组,点权 </span></span><br><span class="line"><span class="type">double</span> k; </span><br><span class="line"><span class="type">int</span> fa[MAXN];</span><br><span class="line"><span class="type">int</span> head[MAXN&lt;&lt;<span class="number">1</span>],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> root1,root2;<span class="comment">//环上的两个点 </span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;<span class="comment">//前向星 </span></span><br><span class="line">e[++cnt].v = v;</span><br><span class="line">e[cnt].next = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//查找集合 </span></span><br><span class="line"><span class="keyword">if</span>(fa[x]==x)&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">circle</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;<span class="comment">//树形dp </span></span><br><span class="line">f[u][<span class="number">1</span>] = w[u],f[u][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//初始化 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v!=fa)&#123; </span><br><span class="line"><span class="built_in">circle</span>(v,u);</span><br><span class="line">f[u][<span class="number">0</span>]+=<span class="built_in">max</span>(f[v][<span class="number">1</span>],f[v][<span class="number">0</span>]);<span class="comment">//转移 </span></span><br><span class="line">f[u][<span class="number">1</span>]+=f[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">fa[i] = i;<span class="comment">//初始化集合 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">u++,v++;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(u)==<span class="built_in">find</span>(v))&#123;<span class="comment">//如果在加边前就在一个集合中了,说明找到了环 </span></span><br><span class="line">        root1 = u,root2 = v;<span class="comment">//记录环上的两个点 </span></span><br><span class="line">        <span class="keyword">continue</span>;<span class="comment">//直接跳过加边操作,相当于断开这条边 </span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="built_in">add</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(v,u);</span><br><span class="line">fa[<span class="built_in">find</span>(v)] = <span class="built_in">find</span>(u);<span class="comment">//合并集合 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;k);</span><br><span class="line"><span class="built_in">circle</span>(root1,<span class="number">0</span>);</span><br><span class="line"><span class="type">double</span> r1 = f[root1][<span class="number">0</span>];<span class="comment">//选root1 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">circle</span>(root2,<span class="number">0</span>);</span><br><span class="line"><span class="type">double</span> r2 = f[root2][<span class="number">0</span>];<span class="comment">//选root2 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1lf&quot;</span>,<span class="built_in">max</span>(r1,r2)*k);<span class="comment">//取最大 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划-树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础树形dp</title>
      <link href="/2020/08/02/%E6%A0%91%E5%BD%A2dp/"/>
      <url>/2020/08/02/%E6%A0%91%E5%BD%A2dp/</url>
      
        <content type="html"><![CDATA[<p>曾经的黑历史(</p><p>有空了重构一下</p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="P1352-没有上司的舞会"><a href="#P1352-没有上司的舞会" class="headerlink" title="P1352 没有上司的舞会"></a>P1352 没有上司的舞会</h2><p>树状$dp$模板题。</p><p>设$f[i][0]$为第$i$个人来了的方案数</p><p>$f[i][1]$为第$i$和人没来的方案数</p><p>若第$i$个人来了,那么其下属均不回来</p><p>若不来,其下属则有来和不来两种选择</p><p>因此状态转移方程为:</p><ul><li><p>$f[i][0]+&#x3D;f[son][1]$</p></li><li><p>$f[i][1]+&#x3D;max(f[son][0],f[son][1])$</p></li></ul><h2 id="P2015-二叉苹果树"><a href="#P2015-二叉苹果树" class="headerlink" title="P2015 二叉苹果树"></a>P2015 二叉苹果树</h2><p>树上背包模板题</p><p>每一个枝条都有”剪”和”不剪”两种可能</p><p>把每一个儿子都看成一个”分组背包”</p><p>设$dp[i][j]$表示第$i$个子树保留$j$条边</p><p>每加入一个”儿子”后,枚举该”儿子”保留的边数,如图<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/bl7hi1vj.png"></p><h5 id="ps-这里i-k后面还要减1是因为还要多保留从u-gt-v这条边"><a href="#ps-这里i-k后面还要减1是因为还要多保留从u-gt-v这条边" class="headerlink" title="(ps:这里i-k后面还要减1是因为还要多保留从u-&gt;v这条边)"></a>(ps:这里i-k后面还要减1是因为还要多保留从u-&gt;v这条边)</h5><p>故状态转移方程为:</p><ul><li>$f[u][i]&#x3D;max(f[v][i-k-1]+f[u][k]+w[u][v])(i\in[1,m+1)]$</li></ul><hr><h1 id="树上背包"><a href="#树上背包" class="headerlink" title="树上背包"></a>树上背包</h1><p><strong><a href="https://www.luogu.com.cn/problem/P2014">P2014 [CTSC1997]选课</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P1273">P1273 有线电视网</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P1270">P1270 “访问”美术馆</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P1272">P1272 重建道路</a></strong></p><hr><h2 id="P2014-CTSC1997-选课"><a href="#P2014-CTSC1997-选课" class="headerlink" title="P2014 [CTSC1997]选课"></a>P2014 [CTSC1997]选课</h2><p>和二叉苹果树一样的套路。</p><p>把每一个子课程都看作是一个”分组背包”,倒序枚举即可</p><p>由于题目中可能有多棵树</p><p>因此多开一个节点把所有”树根”连在一起</p><p>同时,在倒序枚举时也要把这个新节点算进去</p><p>转移方程:</p><ul><li>$f[u][i]&#x3D;max(f[v][i-k-1]+f[u][k]+w[v])(i\in[1,m+1])$</li></ul><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">vis[k]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[k].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[son[k][i]]!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">dp</span>(son[k][i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=m+<span class="number">1</span>;v&gt;=<span class="number">1</span>;v--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> K=<span class="number">0</span>;K&lt;v;K++)&#123;</span><br><span class="line"> f[k][v]=<span class="built_in">max</span>(f[k][v],w[son[k][i]]+f[son[k][i]][K]+f[k][v-K<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1273-有线电视网"><a href="#P1273-有线电视网" class="headerlink" title="P1273 有线电视网"></a>P1273 有线电视网</h2><p>也是比较经典的一个树上背包问题</p><p>题目中要求的是在不亏本的情况下最多的观看用户个数</p><p>设$f[i][j]$表示第$i$个站传输给$j$个用户观看最终剩余的钱数</p><p>若最终剩余钱数大于等于0,则说明未亏本</p><p>反之,则说明亏本</p><p>转移方程则为:</p><ul><li>$f[u][i]&#x3D;max(f[v][k]+f[u][i-k]-w[u][v])$</li></ul><p>$dp$完后从总人数开始倒序判断是否亏本即可</p><p>贴个核心代码:</p><p>$dp部分$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">dp[x][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(val[x])&#123;<span class="comment">//如果是根节点</span></span><br><span class="line">size[x]=<span class="number">1</span>;<span class="comment">//人数加一</span></span><br><span class="line">dp[x][<span class="number">1</span>]=val[x];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(son[x][i]);</span><br><span class="line">size[x]+=size[son[x][i]];<span class="comment">//计算x节点下的人数总和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=size[x];j&gt;=<span class="number">0</span>;j--)&#123;<span class="comment">//滚动数组,倒序枚举</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=size[son[x][i]];k++)&#123;<span class="comment">//枚举子树传输的观众数量</span></span><br><span class="line">dp[x][j]=<span class="built_in">max</span>(dp[x][j],dp[x][j-k]+dp[son[x][i]][k]-W[x][son[x][i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$判断部分$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=m;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[<span class="number">1</span>][i]&gt;=<span class="number">0</span>)&#123;<span class="comment">//如果不亏本</span></span><br><span class="line">cout&lt;&lt;i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1270-“访问”美术馆"><a href="#P1270-“访问”美术馆" class="headerlink" title="P1270 “访问”美术馆"></a>P1270 “访问”美术馆</h2><p>跟P1273 有线电视网一样的套路</p><p>设$f[i][j]$为在第$i$个节点下偷$j$幅画所需要的最小总时间</p><p>状态转移方程也就呼之欲出了</p><ul><li>$f[u][i]&#x3D;min(f[v][k]+f[u][i-k]-2w[u][v])$</li></ul><p>这里$w[u][v]$要乘2是因为要进出各一趟</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(paint[x]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> paint[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">dfs</span>(v);</span><br><span class="line">s+=t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j =s;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=t;k++)&#123;</span><br><span class="line">dp[x][j] = <span class="built_in">min</span>(dp[x][j] , dp[v][k] + dp[x][j-k]+w[x][v]*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1272-重建道路"><a href="#P1272-重建道路" class="headerlink" title="P1272 重建道路"></a>P1272 重建道路</h2><p>同样也是一道比较经典的树上背包问题</p><p>设$f[i][j]$为第$i$个节点断出一个大小为$j$的子树所需要的断开总数</p><p>状态转移方程:</p><ul><li>$f[u][i]&#x3D;min(f[v][k]+f[u][i-k]-1)$</li></ul><p>($v$为根的子树提供$k$个节点,$u$和其他儿子提供$j-k$个节点)</p><p>同时,由于一开始时一个子树都没有加进来</p><p>即把$u$的所有”儿子”都切断了<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/rawfxbhz.png"></p><p>因此当把$v$儿子加进来的时候要把之前那段减去的边加回来</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">size[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!is_son[x])&#123;</span><br><span class="line">dp[x][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">size[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">size[x]+=size[v];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = size[x];j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k&lt;=size[v];k++)&#123;<span class="comment">//这里题解里很多人都写成了&lt;j,问题是子树可能本身就没有这么多子节点,感觉有些问题</span></span><br><span class="line">dp[x][j] = <span class="built_in">min</span>(dp[x][j],dp[x][j-k]+dp[v][k]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="普通树形-DP"><a href="#普通树形-DP" class="headerlink" title="普通树形$DP$"></a>普通树形$DP$</h1><p><strong><a href="https://www.luogu.com.cn/problem/P2016">P2016 战略游戏</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P2458">P2458 [SDOI2006]保安站岗 题解</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P4084">P4084 [USACO17DEC]Barn Painting G</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P2585">P2585 [ZJOI] 三色二叉树</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P2279">P2279 消防局的设立</a></strong></p><hr><h2 id="P2016-战略游戏"><a href="#P2016-战略游戏" class="headerlink" title="P2016 战略游戏"></a>P2016 战略游戏</h2><p>带了点贪心思想的树形$DP$</p><p>如果父节点放了一个守卫</p><p>那其子节点就都不用放守卫了</p><p>反之,子节点都要放一个守卫</p><p>转移方程:</p><ul><li>$f[u][0]+&#x3D;f[v][1]$</li><li>$f[u][1]+&#x3D;min(f[v][1],f[v][0])$</li></ul><p>为什么不用儿子的儿子(“孙子”)节点来看守儿子节点?</p><p><strong>如果一个节点不是叶子节点,那他的子节点数必定大于或等于$1$</strong>,因此如果<strong>用儿子节点来看守其父节点,花费的数量肯定会更多</strong>(或不变)。</p><h6 id="遗憾的是题解里似乎没人说正确性的证明-还是说太简单了都懒得证了"><a href="#遗憾的是题解里似乎没人说正确性的证明-还是说太简单了都懒得证了" class="headerlink" title="遗憾的是题解里似乎没人说正确性的证明?,还是说太简单了都懒得证了"></a>遗憾的是题解里似乎没人说正确性的证明?,<del>还是说太简单了都懒得证了</del></h6><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(x!=<span class="number">1509</span>)</span><br><span class="line">dp[x][<span class="number">1</span>]=<span class="number">1</span>,dp[x][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(son[x][i]);</span><br><span class="line">dp[x][<span class="number">0</span>]+=dp[son[x][i]][<span class="number">1</span>];</span><br><span class="line">dp[x][<span class="number">1</span>]+=<span class="built_in">min</span>(dp[son[x][i]][<span class="number">1</span>],dp[son[x][i]][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这道题目的带点权版:</p><h2 id="P2458-SDOI2006-保安站岗"><a href="#P2458-SDOI2006-保安站岗" class="headerlink" title="P2458 [SDOI2006]保安站岗"></a>P2458 [SDOI2006]保安站岗</h2><h2 id="题解链接"><a href="#题解链接" class="headerlink" title="题解链接"></a><a href="https://www.luogu.com.cn/blog/xcxc82/p2458-sdoi2006-bao-an-zhan-gang-ti-xie-yes">题解链接</a></h2><h2 id="P4084-USACO17DEC-Barn-Painting-G"><a href="#P4084-USACO17DEC-Barn-Painting-G" class="headerlink" title="P4084 [USACO17DEC]Barn Painting G"></a>P4084 [USACO17DEC]Barn Painting G</h2><p>树上$DP$求方案数。</p><p>还算是比较简单的题目吧…</p><p>设:</p><p>$f[i][0]$为第$i$个节点涂红色的方案数</p><p>$f[i][1]$为第$i$个节点涂绿色的方案数</p><p>$f[i][2]$为第$i$个节点涂蓝色的方案数</p><p>假设第$i$号节点涂了红色,那么它的上一个节点就只能涂绿色和蓝色</p><p>其他情况也同理</p><p>用乘法定理乘一下即可。</p><p>转移方程:</p><ul><li>$\begin{cases}f[u][1]&#x3D;f[u][1]<em>((f[v][2]+f[v][3]))\f[u][2]&#x3D;f[u][2]</em>((f[v][1]+f[v][3]))\f[u][3]&#x3D;f[u][3]*((f[v][1]+f[v][2]))\end{cases}$</li></ul><hr><h1 id="换根-DP"><a href="#换根-DP" class="headerlink" title="换根$DP$"></a>换根$DP$</h1><p>一种形式十分优美的树形$DP$</p><p><strong><a href="https://www.luogu.com.cn/problem/P3478">P3478 [POI2008]STA-Station</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P2986">P2986 [USACO10MAR]Great Cow Gathering G</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/P3047">P3047 [Nearby Cows G]Great Cow Gathering G</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/CF708C">CF708C Centroids</a></strong></p><p><strong><a href="https://www.luogu.com.cn/problem/CF1187E">CF1187E Tree Painting</a></strong></p><hr><h2 id="P3478-POI2008-STA-Station"><a href="#P3478-POI2008-STA-Station" class="headerlink" title="P3478 [POI2008]STA-Station"></a>P3478 [POI2008]STA-Station</h2><p>换根DP的模板题。</p><p>这里我们设</p><ul><li><p><strong>$size[i]$为以$1$为根节点时节点$i$的子树大小</strong></p></li><li><p><strong>$dep[i]$为以$1$为根节点时节点$i$的深度大小</strong></p></li><li><p><strong>$dp[i]$为以$i$为根节点时深度之和的大小</strong></p></li></ul><p>很明显,我们可以通过一遍DFS求出以$1$为根节点时的深度之和</p><p>如果一个个的去算的话</p><p>照这个数据范围,显然会T飞</p><p>这个时候就要用到换根DP了</p><h2 id="换根-DP-优化"><a href="#换根-DP-优化" class="headerlink" title="换根$DP$优化"></a>换根$DP$优化</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/o5nj1c7o.png"></p><p>可以看出,当我们把根节点从1换到3时</p><p>对子节点3的贡献由两部分组成</p><p>1.<strong>自己子树的贡献(图中的k)</strong></p><p>2.<strong>父亲节点$1$的贡献</strong></p><hr><h2 id="如何转移"><a href="#如何转移" class="headerlink" title="如何转移"></a>如何转移</h2><ul><li><p>首先是$k$,作为自己子树所产生的贡献肯定要加上</p></li><li><p>$dp[u]$为以$u$为根节点时的深度总值,在计算时,要减去$v$的子树所产生的贡献,不然就重复计算了,同时</p></li></ul><p><strong>在以 $u$为根时,v节点及其子树内的所有节点的深度都增加了$1$</strong>,需要减去</p><p><strong>(图中红色的节点)</strong></p><p>合起来就是$dp[u]-(size[v]+k)$</p><ul><li>除v子树外的其他节点也一样</li></ul><p><strong>在以$v$为根时，除$v$节点及其子树外的其他节点的深度都增加了$1$</strong></p><p><strong>(图中蓝色的节点)</strong></p><p>合起来就是$(size[1]-size[v])$</p><p>得到转移方程</p><ul><li>$dp[v] &#x3D; k+(dp[u]-(k+size[v]))+(size[1]-size[v])$</li></ul><p>化简一下</p><ul><li>$dp[v] &#x3D; dp[u]-2size[v]+size[1]$</li></ul><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">size[x] = <span class="number">1</span>;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">dep[v] = dep[x] +<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v);</span><br><span class="line">size[x]+=size[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">dp[v] = dp[x] +size[<span class="number">1</span>] - <span class="number">2</span>*size[v];</span><br><span class="line"><span class="built_in">dfs2</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P2986-USACO10MAR-Great-Cow-Gathering-G"><a href="#P2986-USACO10MAR-Great-Cow-Gathering-G" class="headerlink" title="P2986 [USACO10MAR]Great Cow Gathering G"></a>P2986 [USACO10MAR]Great Cow Gathering G</h2><p>前面那道题目的带权值版</p><p>一模一样的思路,只需要把状态转移方程转换一下即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line">    <span class="type">int</span> v =edge[i].v;</span><br><span class="line">    <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(v,u);</span><br><span class="line">    size[u] += size[v];</span><br><span class="line">    sum[u]+=(sum[v]+edge[i].w*size[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line">       <span class="type">int</span> v =edge[i].v;</span><br><span class="line">   <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">f[v] = <span class="number">1LL</span>*f[u] + AN*edge[i].w - <span class="number">2</span>*size[v]*edge[i].w;</span><br><span class="line">ans = <span class="built_in">min</span>(ans,f[v]);</span><br><span class="line"><span class="built_in">dp</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P3047-Nearby-Cows-G"><a href="#P3047-Nearby-Cows-G" class="headerlink" title="P3047 [Nearby Cows G]"></a>P3047 [Nearby Cows G]</h2><h3 id="1-状态表示"><a href="#1-状态表示" class="headerlink" title="1.$状态表示$"></a>1.$状态表示$</h3><p>设$size[i][j]$为第i个节点向下$j$层所包含的点权和</p><p>$f[i][j]$为第$i$个点距离它不超过 $j$的所有节点权值和</p><h3 id="2-状态转移"><a href="#2-状态转移" class="headerlink" title="2.状态转移"></a>2.状态转移</h3><p>对于$size[i][j]:$</p><p>$size[u][j] &#x3D;\sum\ size[v][j-1]$ 自己向下$j$层即为儿子向下$j-1$</p><p>对于$f[i][j]:$</p><p>儿子对它的贡献:</p><p>$size[v][j]$</p><p>自己向下$j$层,儿子节点肯定也要向下$j$层</p><p>父亲对它的贡献:</p><p>$f[u][j-1]-size[v][j-2]$</p><p>父亲节点扩展$j-1$层的值减去和儿子节点的值所重复包含的$j-2$层值</p><p>转移方程:</p><p>$f[v][j] &#x3D; f[u][j-1]+size[v][j]-size[v][j-2]$</p><p>核心代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v =edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v,u);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">size[u][i]+=size[v][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=edge[i].next)&#123;</span><br><span class="line"><span class="type">int</span> v=edge[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i<span class="number">-2</span>&gt;=<span class="number">0</span>)</span><br><span class="line">f[v][i] = size[v][i]+f[u][i<span class="number">-1</span>] - size[v][i<span class="number">-2</span>];</span><br><span class="line"><span class="keyword">else</span> f[v][i] = size[v][i]+f[u][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dp</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="CF708C-Centroids"><a href="#CF708C-Centroids" class="headerlink" title="CF708C Centroids"></a>CF708C Centroids</h2><p>一道做起来比较麻烦的换根$DP$</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先对于一个节点来说,大小大于$n&#x2F;2$的节点肯定只有一个，这个显而易见</p><p>再来看如何改造</p><p>如果说该节点本身的重儿子就小于$n&#x2F;2$,那肯定可以成为树的重心</p><p>反之,肯定要在重儿子里找出一个重量最大的且小于等于$n&#x2F;2$的子树,并将其断开,连接到根节点上(相当于删去这颗子树)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/c18i92y5.png"></p><p>如果重儿子的大小减去被删去儿子的大小小于等于$n&#x2F;2$,则说明可以改造</p><p>反之,无法改造</p><h3 id="如何转移-1"><a href="#如何转移-1" class="headerlink" title="如何转移"></a>如何转移</h3><p>分两种情况来讨论</p><p>$1$.该节点不是其父亲节点重儿子</p><p>其父节点的重儿子不会被改变,只需要判断该节点的重儿子是否改成其父节点即可</p><p>$2$.该节点是其父亲节点的重儿子</p><p>其父亲节点的重儿子会变为其”次大”儿子,其儿子节点的重儿子不会改变</p><p>核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line">size[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[u][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v] &gt; size[maxson[u]])</span><br><span class="line">maxson[u] = v;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span>(maxson[u]!=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(size[maxson[u]]&lt;=n/<span class="number">2</span>) dp[u] = size[maxson[u]]; </span><br><span class="line"><span class="keyword">else</span> dp[u] = dp[maxson[u]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exchange</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">        size[u] = size[u] - size[v];</span><br><span class="line">size[v] = size[v] + size[u];</span><br><span class="line"><span class="keyword">if</span>(v==maxson[u])&#123;</span><br><span class="line">maxson[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> V = son[u][i];</span><br><span class="line"><span class="keyword">if</span>(V!=v&amp;&amp;size[V] &gt; size[maxson[u]])&#123;</span><br><span class="line">maxson[u] = V;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxson[u]!=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(size[maxson[u]]&lt;=n/<span class="number">2</span>) dp[u] = size[maxson[u]];</span><br><span class="line"><span class="keyword">else</span> dp[u] = dp[maxson[u]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(size[maxson[v]]&lt;size[u])&#123;</span><br><span class="line">maxson[v] = u;</span><br><span class="line"><span class="keyword">if</span>(maxson[v]!=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(size[maxson[v]]&lt;=n/<span class="number">2</span>) dp[v] = size[maxson[v]];</span><br><span class="line"><span class="keyword">else</span> dp[v] = dp[maxson[v]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u]  = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">if</span>(size[maxson[u]]&lt;=n/<span class="number">2</span>||size[maxson[u]] - dp[maxson[u]]&lt;=n/<span class="number">2</span>) ans[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[u][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line"><span class="built_in">exchange</span>(u,v);</span><br><span class="line"><span class="built_in">dfs2</span>(v);</span><br><span class="line"><span class="built_in">exchange</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end.</p><p>基环树部分还是先缓缓吧,暂时还未完全掌握</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP2713 GSS4</title>
      <link href="/2020/08/01/sp2713/"/>
      <url>/2020/08/01/sp2713/</url>
      
        <content type="html"><![CDATA[<h1 id="SP2713-GSS4-题解"><a href="#SP2713-GSS4-题解" class="headerlink" title="SP2713 GSS4  题解"></a>SP2713 GSS4  题解</h1><h2 id="间隙"><a href="#间隙" class="headerlink" title="间隙"></a><a href="https://www.luogu.com.cn/problem/SP2713">间隙</a></h2><h2 id="双倍经验"><a href="#双倍经验" class="headerlink" title="双倍经验"></a><a href="https://www.luogu.com.cn/problem/P4145">双倍经验</a></h2><h2 id="前置知识-线段树"><a href="#前置知识-线段树" class="headerlink" title="前置知识:线段树"></a>前置知识:线段树</h2><p>如果您还不会线段树的话,推荐去看一下<a href="https://www.cnblogs.com/jason2003/p/9676729.html"><strong>这篇文章</strong></a>,我一开始也是在那里学的</p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一堆数,有以下两个操作:</p><ul><li><p>给出一个区间$[L,R]$,把该区间内的每个数都开平方</p></li><li><p>给出一个区间$[L,R]$,查询这个区间的每个数的和</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先看一下这个数据范围,$1e18$,直接暴力的话肯定会T飞</p><p>求和操作很简单,相信学过线段树的人应该都会</p><p>难点在于这个开方操作,我们没法像线段树模板那样打个懒标记来进行下传操作</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/72ur96tc.png"></p><p>通过观察$\sqrt x$函数图像缓慢的增长率或者其他性质不难发现,很多开方操作是不必要的,考虑减枝优化:</p><ul><li>不难发现,<strong>当一个区间内的所有数都是$1$时,再对该区间进行开方操作对该区间内的总值造成不了任何改变</strong>($\sqrt{1} &#x3D; 1$)</li></ul><p>因此代码实现方面只要在区间内总值均为1的情况下加一个小剪枝即可</p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>思路理解了代码实现难度就不高了,但还是有几个坑点…具体的注释里有写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson (node&lt;&lt;1)<span class="comment">//左儿子</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson (node&lt;&lt;1|1)<span class="comment">//右儿子</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long <span class="comment">//记得开long long</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;<span class="comment">//左右端点</span></span><br><span class="line">ll sum;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">ll a[MAXN];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">tree[node].sum = tree[lson].sum + tree[rson].sum;<span class="comment">//合并操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//建树</span></span><br><span class="line">tree[node].l = l;</span><br><span class="line">tree[node].r = r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[node].sum = a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(lson,l,mid);</span><br><span class="line"><span class="built_in">build</span>(rson,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> L = tree[node].l,R = tree[node].r;</span><br><span class="line"><span class="keyword">if</span>(tree[node].sum==R-L+<span class="number">1</span>) <span class="keyword">return</span>;<span class="comment">//如果总和为区间长度,也就是所有值均为1时,直接剪枝掉</span></span><br><span class="line"><span class="keyword">if</span>(L==R)&#123;</span><br><span class="line">tree[node].sum = <span class="built_in">sqrt</span>(tree[node].sum);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)&#123;</span><br><span class="line"><span class="built_in">change</span>(lson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)&#123;</span><br><span class="line"><span class="built_in">change</span>(rson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> node,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//查询</span></span><br><span class="line"><span class="type">int</span> L = tree[node].l,R = tree[node].r;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R)&#123;<span class="comment">//包含在查询区间内,直接返回sum值</span></span><br><span class="line"><span class="keyword">return</span> tree[node].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)&#123;</span><br><span class="line">ans+=<span class="built_in">query</span>(lson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)&#123;</span><br><span class="line">ans+=<span class="built_in">query</span>(rson,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);<span class="comment">//不加貌似会TLE?</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> Case=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>,++Case);<span class="comment">//注意,样例里那个case是要输出的,一开始被这里卡了好久...</span></span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));<span class="comment">//记得要先memset</span></span><br><span class="line"><span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="built_in">sizeof</span>(tree));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="type">int</span> mode,left,right;</span><br><span class="line">cin&gt;&gt;mode&gt;&gt;left&gt;&gt;right;</span><br><span class="line"><span class="keyword">if</span>(left &gt; right)&#123;</span><br><span class="line"><span class="built_in">swap</span>(left,right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mode==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>,left,right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,left,right));</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//记得换行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1187E Tree Painting</title>
      <link href="/2020/07/26/cf1187e/"/>
      <url>/2020/07/26/cf1187e/</url>
      
        <content type="html"><![CDATA[<h1 id="CF1187E-Tree-Painting-题解"><a href="#CF1187E-Tree-Painting-题解" class="headerlink" title="CF1187E Tree Painting 题解"></a>CF1187E Tree Painting 题解</h1><h2 id="原题面"><a href="#原题面" class="headerlink" title="原题面"></a><a href="https://www.luogu.com.cn/problem/CF1187E">原题面</a></h2><h2 id="前置知识-换根-DP"><a href="#前置知识-换根-DP" class="headerlink" title="前置知识: 换根$DP$"></a>前置知识: 换根$DP$</h2><p>换根$DP$模板题</p><p>如果您还不会换根$DP$的话,可以先去看看UM巨佬的日报:</p><p><a href="https://sflsrick.blog.luogu.org/note-how-to-change-root">#278[UltiMadow] [学习笔记]换根dp</a></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给定一棵n个点的树 初始全是白点</p><p>要求你做n步操作，每一次选定一个与一个黑点相隔一条边的白点，将它染成黑点，然后获得该白点被染色前所在的白色联通块大小的权值。</p><p>求可获得的最大权值</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>几乎是一道裸的模板题了…</p><p>和P3478几乎一摸一样,只是需要一个微小的结论</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/h4z3mf0i.png"></p><h5 id="PS-图中节点的编号有一点微小的错误-不过并不影响阅读"><a href="#PS-图中节点的编号有一点微小的错误-不过并不影响阅读" class="headerlink" title="PS:图中节点的编号有一点微小的错误,不过并不影响阅读"></a>PS:图中节点的编号有一点微小的错误,不过并不影响阅读</h5><p>假如说我们选了图中的1号节点作为第一个涂色的点（图中蓝色的点)</p><p>那下一个涂色的节点肯定就能选择它的几个儿子了(图中深红色的点)</p><p>同时,<strong>由于父亲节点已经被涂色了,其子节点不可能再和上面的”祖先”辈节点有联通了</strong><br><strong>能对其产生贡献的只有自己的子树</strong></p><p>因此当一个父亲节点被涂色后,其所有子树都是<strong>相对”独立”的</strong>，涂色顺序的变化对总贡献值无任何影响</p><p>故当<strong>第一个节点被涂色后,剩下节点的涂色顺序均无法对总贡献值产生影响</strong></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>单纯的暴力枚举每个根的位置的话照这个数据范围肯定会T飞</p><p>考虑换根DP</p><p>应该很容易状态转移方程推出:</p><ul><li>$dp[v] &#x3D; dp[u]-2size[v]+size[1]$</li></ul><p>具体这个方程怎么来的,我之前写的P3478的<a href="https://www.luogu.com.cn/blog/xcxc82/p3478-poi2008sta-station-ti-xie">题解</a>跟前面UM巨佬的日报里也有讲</p><p>套上换根$DP$的板子即可</p><p>贴上丑陋的代码:（其实只要把P3478的代码改一行就可以了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">200010</span>;</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; son[MAXN];</span><br><span class="line"><span class="type">int</span> vis[MAXN],n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> size[MAXN];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">size[u] = <span class="number">1</span>;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[u][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[u][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">f[v] = f[u] + size[<span class="number">1</span>] - <span class="number">2</span>*size[v];</span><br><span class="line"><span class="built_in">dp</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">son[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">son[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">f[<span class="number">1</span>]+=size[i];</span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">   <span class="built_in">dp</span>(<span class="number">1</span>);</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> ans = <span class="number">-0x3f</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans , f[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划-换根dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2458 [SDOI2006]保安站岗</title>
      <link href="/2020/07/20/p2458/"/>
      <url>/2020/07/20/p2458/</url>
      
        <content type="html"><![CDATA[<h1 id="P2458-SDOI2006-保安站岗-题解"><a href="#P2458-SDOI2006-保安站岗-题解" class="headerlink" title="P2458 [SDOI2006]保安站岗 题解"></a><strong>P2458 [SDOI2006]保安站岗 题解</strong></h1><h2 id="间隙-原题面"><a href="#间隙-原题面" class="headerlink" title="间隙(原题面)"></a><a href="https://www.luogu.com.cn/problem/P2458">间隙(原题面)</a></h2><ul><li>前排声明:蒟蒻刚学OI没多久,讲的可能比较啰嗦,望见谅</li></ul><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一颗树,每个点都可以花费一定的价格来放置一名”保安”</p><p>每个保安都可以看管他本身所在的点和所有与他所站的点相邻的点</p><p>求:看管所有点所需要的最小花费</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>树形dp。</p><p>先来说一种错误的做法,也是我一开始想到的做法</p><p>每个点都有”放置”和”不放置”两种选择</p><p><strong>设$dp[i][0]$为第$i$个点”不放置”保安所需要的最小花费</strong></p><p><strong>$dp[i][1]$为第$i$个点“放置”保安所需要的最小花费</strong></p><p>如果第$i$个点”放置”了保安</p><p>那它的下一个节点则可以选择”放或不放”两种决策</p><p>反之,下一个节点必须都”放置”一名保安</p><p><del>很明显是错的</del></p><p>放张图应该就明白了<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/c3ommepj.png"></p><p>(下一个节点不一定要由父亲或自己来看管,也可以由自己的”儿子”来看管)</p><p>也就是说,每个点的看管对象都有:</p><ul><li><strong>自己</strong></li><li><strong>父亲</strong></li><li><strong>儿子</strong></li></ul><p><strong>三种可能</strong></p><h2 id="如何转移"><a href="#如何转移" class="headerlink" title="如何转移"></a>如何转移</h2><p>设$dp[i][0]$为该点<strong>由自己看管</strong>所产生的最有解</p><p>$dp[i][1]$为该点<strong>由父亲看管</strong>所产生的最优解</p><p>$dp[i][2]$为该点<strong>由儿子看管</strong>所产生的最优解</p><ul><li><strong>1.由“自己”看管</strong></li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ywr3v3nc.png"></p><p>自己的位置上已经”放置了”一个点</p><p>那么它的所有儿子就都会被自己所”看管”住</p><p>显然儿子可以选择任意一种决策</p><ul><li>得到转移方程:$dp[i][0]&#x3D;\sum min(dp[son][0],dp[son][1],dp[son][2])+w[i]$</li></ul><p>($w[i]$为父亲节点”放置”守卫所需要的价值)</p><ul><li><strong>2.由“父亲”看管</strong></li></ul><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/75jddbxl.png"></p><p>自己由父亲看管,说明自己所在的点上<strong>未”放置”门卫</strong>,那儿子肯定<strong>只能由自己的儿子看管或由自己看管</strong></p><ul><li><p>得到方程:$dp[i][1]&#x3D;\sum min(dp[son][0],dp[son][2])$</p></li><li><p>3.<strong>由“儿子”看管</strong></p></li></ul><p>（图中红蓝分别为两种可能情况）</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/b7rw1758.png"></p><p>既然是由自己的儿子看管</p><p>儿子的决策也有两种可能</p><p>1.由儿子的”儿子”看管</p><p>2.由自己看管</p><ul><li>得到方程:$dp[i][2]&#x3D;\sum min(dp[son][2],dp[son][0])$</li></ul><p>有一种极端情况,如果全部都选了$dp[son][2]$</p><p>“自己”就会产生无人看管的情况</p><p>因此要在这里加一个小特判,具体代码里有解释</p><p>这里做了个简陋的gif,不懂的可以结合代码看一下</p><p><img src="https://img-blog.csdnimg.cn/20200720102214607.gif"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1510</span>;</span><br><span class="line"><span class="type">int</span> n,dp[MAXN][<span class="number">4</span>],w[MAXN];</span><br><span class="line"><span class="type">int</span> is_head[MAXN];</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; son[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">bool</span> is_cs = <span class="literal">false</span>;<span class="comment">//用来判断有无极端情况</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> minn = <span class="number">0x3ffffff</span>;<span class="comment">//用来求极端情况的最小值 </span></span><br><span class="line">dp[x][<span class="number">0</span>] = w[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="type">int</span> v = son[x][i];</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">dp[x][<span class="number">0</span>]+=<span class="built_in">min</span>(<span class="built_in">min</span>(dp[v][<span class="number">0</span>],dp[v][<span class="number">1</span>]),dp[v][<span class="number">2</span>]);<span class="comment">//由自己看守 </span></span><br><span class="line">dp[x][<span class="number">1</span>]+=<span class="built_in">min</span>(dp[v][<span class="number">2</span>],dp[v][<span class="number">0</span>]);<span class="comment">//由父亲看守 </span></span><br><span class="line"><span class="comment">//由儿子看守 ↓ </span></span><br><span class="line"><span class="keyword">if</span>(dp[v][<span class="number">0</span>]&lt;dp[v][<span class="number">2</span>])&#123; </span><br><span class="line">dp[x][<span class="number">2</span>]+=dp[v][<span class="number">0</span>];<span class="comment">//如果儿子放置守卫花费的钱更少,那就直接在儿子的点上放置一个守卫 </span></span><br><span class="line">is_cs=<span class="literal">true</span>;<span class="comment">//既然儿子的位置上已经放置守卫了,无极端情况存在 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//否则在儿子的儿子上放置守卫 </span></span><br><span class="line">minn = <span class="built_in">min</span>( minn , dp[v][<span class="number">0</span>]-dp[v][<span class="number">2</span>]);<span class="comment">//计算最小所需值 </span></span><br><span class="line">dp[x][<span class="number">2</span>]+=dp[v][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!is_cs) dp[x][<span class="number">2</span>]+=minn;<span class="comment">//如果存在极端情况,则加上差值,相当于是消掉dp[-][2],加上dp[-][0] </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;m);</span><br><span class="line">w[u]=m;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">is_head[v]++;</span><br><span class="line">son[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!is_head[i])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">cout&lt;&lt;<span class="built_in">min</span>(dp[i][<span class="number">0</span>],dp[i][<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划-树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF607B Zuma</title>
      <link href="/2020/07/09/cf607b/"/>
      <url>/2020/07/09/cf607b/</url>
      
        <content type="html"><![CDATA[<h1 id="CF607B-Zuma-题解"><a href="#CF607B-Zuma-题解" class="headerlink" title="CF607B Zuma 题解"></a>CF607B Zuma 题解</h1><h2 id="间隙-原题面"><a href="#间隙-原题面" class="headerlink" title="间隙(原题面)"></a><a href="https://www.luogu.com.cn/problem/CF607B">间隙(原题面)</a></h2><ul><li>前排声明:蒟蒻刚学oi没多久,而且是自学的,写的可能会比较累赘,望见谅。</li></ul><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>基础区间dp</li></ul><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个长度为n的串,每次都可以挑选一个回文的连续字串进行消除,删除后，剩余的串将连接在一起，形成一个新的串,求把串全部删除完需要的最小次数</p><hr><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/k3ezz757.png"></p><p>可以看出每一个区间的的求解都可以分为更小的两个区间的求解</p><p>联想到区间dp</p><p>设$dp[l][r]$为左端点为l,右端点为r时的最优解</p><p>不难推出<del>比较套路的</del>状态转移方程</p><ul><li>$dp[l][r]&#x3D;min(dp[l][r],dp[l][k]+dp[k+1][r]).(l&lt;&#x3D;k&lt;r)$</li></ul><p>同时,这里还有一个区间的回文判断</p><p>假设我们把总区间划分为两个区间</p><p>$[1,4,5,3,4,1,3,2]$和$[3,2]$</p><p>其中$[1,4,5,3,4,1,3,2]$包含一个回文部分</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/teqq2yqh.png"></p><p>此时我们只要直接将回文部分删去即可</p><p>即$dp[l][r]&#x3D;dp[l+1][r-1]$</p><p>这其实是一个类似于预处理的东西(个人看法,可能有误)</p><p>如果一个区间包含回文部分</p><p>则先把$dp[l][r]$给预处理成它不进行划分可以产生的最小值</p><p>再去和划分成两个区间所产生的最小值进行比较</p><ul><li>即$if(a[l]&#x3D;&#x3D;a[r])$<br>$dp[l[[r]&#x3D;dp[l+1][r-1]$</li></ul><p>贴上丑陋的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n,a[MAXN],dp[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//预处理长度为1的区间</span></span><br><span class="line">dp[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">1</span>;len&lt;n;len++)&#123;<span class="comment">//枚举长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>;l&lt;=n&amp;&amp;l+len&lt;=n;l++)&#123;<span class="comment">//枚举左右断点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> r=l+len;</span><br><span class="line">dp[l][r]=inf;</span><br><span class="line"><span class="keyword">if</span>(a[l]==a[r])&#123;<span class="comment">//如果包含回文部分</span></span><br><span class="line"><span class="keyword">if</span>(r==l+<span class="number">1</span>)&#123;<span class="comment">//注意,这里是区间长度为2的特判</span></span><br><span class="line">dp[l][r]=dp[l+<span class="number">1</span>][r<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> dp[l][r]=dp[l+<span class="number">1</span>][r<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=l;k&lt;r;k++)&#123;<span class="comment">//枚举断点</span></span><br><span class="line">dp[l][r]=<span class="built_in">min</span>(dp[l][r],dp[l][k]+dp[k+<span class="number">1</span>][r]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[<span class="number">1</span>][n];</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>如有错误欢迎大佬们指出QwQ</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划-区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3800 power收集</title>
      <link href="/2020/07/07/p3800/"/>
      <url>/2020/07/07/p3800/</url>
      
        <content type="html"><![CDATA[<h1 id="P3800-Power收集-题解"><a href="#P3800-Power收集-题解" class="headerlink" title="P3800 Power收集 题解"></a>P3800 Power收集 题解</h1><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a><a href="https://www.luogu.com.cn/problem/P3800">传送门</a></h2><p>前排声明:蒟蒻刚学oi没多久,写的可能比较粗糙,望谅解</p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给一个$N×M$大小的矩阵</p><p>其中有k个点包含一个带有价值的P点</p><p>每一行中的一个格子i都可以从上一行中的第$[i-t,i+t]$个格子中转移过来</p><p>求可以获得的最大价值</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>大致思路和<a href="https://www.luogu.com.cn/problem/P1725">P1725 琪露诺</a>很像,只是换了一种形式而已</p><p>既然每一个格子$i$都可以从上一行中的第$ [i-t,i+t] $个格子中转移过来</p><p>我们<strong>设$a[i][j]$为第$i$行第$j$个点的价值大小</strong></p><p>容易得到状态转移方程:</p><ul><li><p>$dp[i][j]&#x3D;max(dp[i-1][k])+a[i][j] (j-T&lt;&#x3D;k&lt;&#x3D;j+T)$</p></li><li><p>因此,对于每一个$dp[i][j]$来说</p></li></ul><p>他的值均是由上一行中$[j-t,j+t]$区间中的最大值转移过来的</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/f400j4mf.png"></p><h6 id="懒得找城管的图了-只好拿之前cirno的图改了一下"><a href="#懒得找城管的图了-只好拿之前cirno的图改了一下" class="headerlink" title="(懒得找城管的图了,只好拿之前cirno的图改了一下)"></a>(<del>懒得找城管的图了,只好拿之前cirno的图改了一下</del>)</h6><p>可以看出这是一个滑动区间求最值的问题</p><p>可以考虑用单调队列来优化</p><p>在进行第$i$行第$j$列的转移前</p><p>利用滑动窗口将第$i-1$行中$[j-t,j+t]$的最大值来求出来</p><p>这里<del>闲着无聊</del>做了个$gif$</p><p><img src="https://img-blog.csdnimg.cn/20200707134646322.gif"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>开一个数组 $q$ 模拟队列,用来滑动求最值</p><p>首先初始化第一行的$dp[i][j]$</p><p>第2~n行则利用$q$来求上一行的最大值进行转移</p><ul><li><strong>swp函数</strong></li></ul><p>实现队列初始化功能</p><p>将前 $t$ 个数加入队列</p><ul><li><strong>swi函数</strong></li></ul><p>当插入新元素时</p><p>先判断队列是否在$[1,m]$的区间内(不判会RE)</p><p>如果在区间内:</p><p>$1$.调整队列单调性</p><p>$2$.入队</p><p>反之,超出范围,不入队</p><p>$3$.去掉”超时”元素</p><p>贴上丑陋的代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 4010</span></span><br><span class="line"><span class="type">int</span> tail=<span class="number">0</span>,head=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,t,ans; </span><br><span class="line"><span class="type">int</span> q[MAXN],a[MAXN][MAXN],dp[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">queue_empty</span><span class="params">()</span></span>&#123;<span class="comment">//清空窗口 </span></span><br><span class="line">tail=<span class="number">0</span>,head=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swi</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span>&#123;<span class="comment">//插入元素</span></span><br><span class="line">   <span class="keyword">if</span>(x+t&lt;=m)&#123;<span class="comment">//判断是否超过边界,不加会RE </span></span><br><span class="line">   <span class="keyword">while</span>(dp[last][x+t]&gt;dp[last][q[tail]]&amp;&amp;tail&gt;=head)&#123;<span class="comment">//单调队列 </span></span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">q[++tail]=x+t;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q[head]+t&lt;x) head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swp</span><span class="params">(<span class="type">int</span> last)</span></span>&#123;<span class="comment">//初始化窗口 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(dp[last][i]&gt;dp[last][q[tail]]&amp;&amp;tail&gt;=head)&#123;</span><br><span class="line">tail--;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">q[++tail] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k,&amp;t);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">a[x][y] = z;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//第一行初始化</span></span><br><span class="line">   dp[<span class="number">1</span>][i]=a[<span class="number">1</span>][i];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">   <span class="built_in">swp</span>(i<span class="number">-1</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">swi</span>(j,i<span class="number">-1</span>);</span><br><span class="line">   </span><br><span class="line">  dp[i][j]=dp[i<span class="number">-1</span>][q[head]]+a[i][j]; </span><br><span class="line">  </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">queue_empty</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(dp[n][i],ans);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有错误欢迎dalao们指出qwq</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划-区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5239 回忆京都</title>
      <link href="/2020/07/05/p5239/"/>
      <url>/2020/07/05/p5239/</url>
      
        <content type="html"><![CDATA[<h1 id="P5239-回忆京都题解"><a href="#P5239-回忆京都题解" class="headerlink" title="P5239 回忆京都题解"></a>P5239 回忆京都题解</h1><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a><a href="https://www.luogu.com.cn/problem/P5239">传送门</a></h2><p>前排声明:题解写的比较累赘…把一些基本的恒等式都讲了一遍…(部分证明借鉴了《具体数学》一书)</p><p>如果您已经掌握了这些基础的话建议还是去看其他dalao们的题解吧qwq…</p><h2 id="1-基本恒等式"><a href="#1-基本恒等式" class="headerlink" title="1.基本恒等式"></a>1.基本恒等式</h2><p>我们把$\dbinom{n}{k}$符号读作”<strong>n选取k</strong>“</p><p>即<strong>从n个元素的集合中选取k个元素</strong>作为子集的方案总数</p><p>对于该集合的第一个元素的可能,有n种选择</p><p>对第二个元素,有n-1种选择,3,4,5…..也同理</p><p>同时,<strong>对于每k个元素组成的子集都恰好有$k!$种不同的排序</strong></p><p>根据乘法原理</p><p>得到公式</p><p>$\dbinom{n}{k}&#x3D;{\dfrac{n*(n-1)…*(n-k+1)}{k!}}$ </p><p>(<strong>基本恒等式</strong>)</p><hr><h2 id="2-对称恒等式"><a href="#2-对称恒等式" class="headerlink" title="2.对称恒等式"></a>2.对称恒等式</h2><p>先来看个图</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/a9xmsi5c.png"></p><p>观察一下不难发现规律</p><p>$\dbinom{n}{k}&#x3D;\dbinom{n}{n-k}$</p><p>(<strong>对称恒等式</strong>)</p><p>至于正确性也显而易见</p><p><strong>从n个物品中选k个物品就相当于指定的n-k种物品不被选取</strong></p><hr><h2 id="3-吸收恒等式"><a href="#3-吸收恒等式" class="headerlink" title="3.吸收恒等式"></a>3.吸收恒等式</h2><p>我们知道,二项式系数的基本恒等式为</p><p>$\dbinom{n}{k}&#x3D;{\dfrac{n*(n-1)…*(n-k+1)}{k!}}$ </p><p>可以将式子转化为</p><p>$\dbinom{n}{k}&#x3D;{\dfrac{n}{k}<em>\dfrac{(n-1)…</em>(n-k+1)}{(k-1)!}}$ </p><p>得到式子$\dbinom{n}{k}&#x3D;\dfrac{n}{k}\dbinom{n-1}{k-1}$</p><p>两边同乘k,得$k\dbinom{n}{k}&#x3D;n\dbinom{n-1}{k-1}$<strong>恒等式1</strong></p><p>根据这个式子,再利用之前的恒等式1</p><p>还可以得到式子</p><p>$(n-k)\dbinom{n}{k}&#x3D;(n-k)\dbinom{n}{n-k}$(根据对称性)</p><p>$&#x3D;n\dbinom{n-1}{n-1-k}$(根据恒等式1)</p><p>$&#x3D;n\dbinom{n-1}{k}$—(根据对称性)<strong>恒等式2</strong> </p><hr><h2 id="4-加法公式"><a href="#4-加法公式" class="headerlink" title="4.加法公式"></a>4.加法公式</h2><p>观察一下前面的那张表,不难发现一个规律:</p><p>$\dbinom{n}{k}&#x3D;\dbinom{n-1}{k-1}+\dbinom{n-1}{k}$</p><p>推导的话也很简单</p><p>根据之前吸收恒等式里的恒等式1和恒等式2</p><p>得出</p><p>$\dbinom{n}{k}&#x3D;(n-k)\dbinom{n}{k}+k\dbinom{n}{k}&#x3D;n\dbinom{n-1}{k}+n\dbinom{n-1}{k-1}$</p><hr><h2 id="5-题目"><a href="#5-题目" class="headerlink" title="5.题目"></a>5.题目</h2><h3 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意:"></a>大致题意:</h3><p>q次询问,每次都给一个m跟n,求</p><p>$\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^mC^i_j$</p><hr><p>根据前面的加法公式,很容易可以解出这题</p><p>一共有n次询问，如果一次一次的去加的话肯定会超时</p><p>可以考虑使用二维前缀和来优化</p><p>至于二维前缀和怎么用,前面的dalao们已经写的很清楚了,为了<del>让题解看起来不是那么的水</del>,彩笔这里就再粗糙的写一遍吧</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ez5vvkji.png"></p><p>从图中不难看出,对于每一个sum[i][j],都有</p><p>sum[i][j]&#x3D;sum[i][j-1]+sum[i-1][j]+a[i][j]-sum[i-1][j-1]</p><p>因为这里面有一个对$1926081719260817$取模操作</p><p>相减可能会产生负数</p><p>比如说我们取模后$sum[i][j-1]+sum[i-1][j]+a[i][j]&#x3D;1$</p><p>而$sum[i-1][j-1]&#x3D;1926081719260816$</p><p>很明显,相减为负</p><p>至于如何避免其实也很简单,只要再加上一个模数就可以了,相当于是加上之前那个被模掉的部分</p><hr><p>贴上丑陋的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mo=<span class="number">19260817</span>;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">      a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1002</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">1002</span>;j++)&#123;</span><br><span class="line">a[i][<span class="number">0</span>]=a[i][i]=<span class="number">1</span>;</span><br><span class="line">a[i][j]=(a[i<span class="number">-1</span>][j]+a[i<span class="number">-1</span>][j<span class="number">-1</span>])%mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1002</span>;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">1002</span>;j++)&#123;</span><br><span class="line">sum[i][j]=(sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]+a[i][j]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>]+mo)%mo;</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">cout&lt;&lt;sum[r][l]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有错误还请大佬们指出</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>p4838 P哥破解密码</title>
      <link href="/2020/06/26/p4838/"/>
      <url>/2020/06/26/p4838/</url>
      
        <content type="html"><![CDATA[<h1 id="P4838-P哥破解密码题解"><a href="#P4838-P哥破解密码题解" class="headerlink" title="P4838 P哥破解密码题解"></a>P4838 P哥破解密码题解</h1><ul><li><h2 id="原题面"><a href="#原题面" class="headerlink" title="原题面"></a><a href="https://www.luogu.com.cn/problem/P4838">原题面</a></h2></li></ul><p><strong>思路貌似跟dalao们的有点不一样</strong></p><ul><li><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2></li></ul><hr><p>给一串长度为n的字符串,<strong>当且仅当串只由A和B构成</strong>，且没有连续的3个A时,该串合法,求方案总数</p><hr><p>感觉跟P4910帕秋莉的手环那道题目差不多吧….都是线性递推,貌似dalao们都是用动态规划来做的,<del>蒟蒻不太会,所以只好用比较sb的递推来做qwq</del></p><ul><li><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2>既然每个字符只有A和B两种可能,,如果字符串没有任何限制的话,很容易看出方 案总数为 : $2^n$</li></ul><p>但这里加了一个<strong>不能有没有连续的3个A</strong>出现的限制条件</p><p>不妨先来画个图来看一下,更加直观一点<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/en3d9md2.png"><br>图中为n&#x3D;6的时候的情况</p><p>我们用$f_i$来表示长度为i的字符串的<strong>不合法方案总数</strong>(<strong>注意,是不合法方案总数</strong>)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/axtxuhus.png"></p><p>先来看第一个字符选A情况</p><p>这里我们可以把每一个B看作是一个”<strong>断点</strong>“</p><p>不难看出,每出现一个断点后</p><p>该断点下面的情况就可以从之前的$f_i$递推过来</p><p>而当出现连续3个A时,相当于是把下面的所有情况都”<strong>截断</strong>“了</p><p>也就是$2^{n-3}$种情况</p><p>第一个字符选”B”也同理</p><p>相当于是在第一个点的时候就把该串给”<strong>截断</strong>“了</p><p>容易推出当N&#x3D;6时,合法方案总数为</p><p>$2^6-(f_{5}+f_{4}+f_{3}+2^3)$</p><p>其他n&gt;3的情况也同理</p><p>得到式子</p><p>方案总数&#x3D;$2^n-(f_{n-1}+f_{n-2}+f_{n-3}+2^{n-3})$</p><p>&#x3D;$7*2^{n-3}-(f_{n-1}+f_{n-2}+f_{n-3})$</p><p>&#x3D;$(2^{n-1}+2^{n-2}+2^{n-3})-(f_{n-1}+f_{n-2}+f_{n-3})$</p><p>设$s_i$为方案总数</p><p>则$s_i&#x3D;s_{i-1}+s_{i-2}+s_{i-3}$</p><p>得到最终式子<br>$\begin{cases}2(n&#x3D;1)\4 (n&#x3D;2)\7 (n&#x3D;3)\s_i&#x3D;s_{i-1}+s_{i-2}+s_{i-3}(n&gt;3)\end{cases}$ </p><p>贴个丑陋的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> mo=<span class="number">19260817</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">&#125;ans,a;</span><br><span class="line">matrix <span class="keyword">operator</span> *(<span class="type">const</span> matrix &amp;x,<span class="type">const</span> matrix &amp;y)&#123;</span><br><span class="line">matrix z;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">z.a[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">z.a[i][j]=(z.a[i][j]+(x.a[i][k]*y.a[k][j])%mo)%mo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">4</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">7</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)&#123;</span><br><span class="line">a.a[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i==j) ans.a[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ans.a[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a.a[<span class="number">1</span>][<span class="number">1</span>]=a.a[<span class="number">1</span>][<span class="number">2</span>]=a.a[<span class="number">1</span>][<span class="number">3</span>]=a.a[<span class="number">2</span>][<span class="number">1</span>]=a.a[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans=ans*a;</span><br><span class="line">n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">a=a*a;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;((ans.a[<span class="number">1</span>][<span class="number">1</span>]+ans.a[<span class="number">2</span>][<span class="number">1</span>])%mo+ans.a[<span class="number">3</span>][<span class="number">1</span>])%mo&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>貌似是蒟蒻的第一次不看题解做出(比较水的)紫题?</del></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划-线性dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>p1725 琪露诺</title>
      <link href="/2020/06/25/p1725/"/>
      <url>/2020/06/25/p1725/</url>
      
        <content type="html"><![CDATA[<h1 id="P1725-琪露诺"><a href="#P1725-琪露诺" class="headerlink" title="P1725 琪露诺"></a><a href="https://www.luogu.com.cn/problem/P1725"></a>P1725 琪露诺</h1><p><a href="https://www.luogu.com.cn/problem/P1725">原题面</a></p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h2><p>给编号为0~N的N+1个数,每个格子都有一个冰冻指数ice[i]</p><p>每一个格子都可以转移到区间[i+l,i+r]上,求ice[i]总和的最大值</p><hr><p>很明显可以看出这是一道dp的题</p><p>我们不妨先把转移方程写出来</p><p>题目中说<strong>每一个格子都可以转移到区间[i+l,i+r]上</strong></p><p>不难推出转移方程:</p><ul><li><h3 id="dp-i-x3D-max-dp-i-r-dp-i-r-1-…dp-i-l-1-dp-i-l-ice-i"><a href="#dp-i-x3D-max-dp-i-r-dp-i-r-1-…dp-i-l-1-dp-i-l-ice-i" class="headerlink" title="$~~~~~~~~~~~~~~~~dp_i&#x3D;max(dp_{i-r},dp_{i-r+1},…dp_{i-l-1},dp_{i-l})+ice[i]$"></a>$~~~~~~~~~~~~~~~~dp_i&#x3D;max(dp_{i-r},dp_{i-r+1},…dp_{i-l-1},dp_{i-l})+ice[i]$</h3></li></ul><p>(放张图 样例是自造的,此图为i&#x3D;4的情况)<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/ai7jcjuq.png"><br>因此,对于每一个$dp_i$来说</p><p>他的值均是由[$dp_{i-l}$~$dp_{i-r}$]区间中的最大值转移过来的(前面方程也说了)</p><p>而且这个区间是不断滑动的</p><p>滑动区间求最值,很容易联想到<strong>单调队列</strong></p><p>照题目里的数据范围普通的dp肯定会超时</p><p>因此我们可以用单调队列来优化它</p><p>做了一个比较粗糙的过程动态图qwq<br><img src="https://img-blog.csdnimg.cn/2020062520104327.gif"><br>补几张gif跳的比较快的图</p><p>$dp_1$</p><ul><li><img src="https://cdn.luogu.com.cn/upload/image_hosting/3h0hzail.png"><br>$dp_2$</li><li><img src="https://cdn.luogu.com.cn/upload/image_hosting/9osayz2u.png"><br>以此类推,均由[$dp_{i-l}$~$dp_{i-r}$]区间中的最大值转移过来</li><li><img src="https://cdn.luogu.com.cn/upload/image_hosting/pq2le485.png"></li></ul><hr><p>写的貌似有点累赘…</p><p>如有错误还请dalao们指出qwq,<del>话说没人会来看这么辣鸡的题解吧</del></p><p>贴个丑陋的代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> ice[<span class="number">300010</span>],dp[<span class="number">300010</span>],q[<span class="number">300010</span>];</span><br><span class="line"><span class="type">int</span> l,n,r,ans=<span class="number">-1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findmax</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=n;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(head&lt;=tail&amp;&amp;dp[q[tail]]&lt;dp[i-l]) tail--;<span class="comment">//单调队列 </span></span><br><span class="line"><span class="keyword">while</span>(head&lt;=tail&amp;&amp;q[head]&lt;i-r) head++;<span class="comment">//滑动区间 </span></span><br><span class="line">q[++tail]=i-l;</span><br><span class="line">dp[i]=dp[q[head]]+ice[i];<span class="comment">//转移 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i&gt;=n-r+<span class="number">1</span>) ans=<span class="built_in">max</span>(ans,dp[i]);<span class="comment">//在开始移动的时候求最大值 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ice[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));dp[<span class="number">0</span>]=<span class="number">0</span>;<span class="comment">//注意,ice的值可能为负,所以要把dp跟ans的值赋为无穷小,一开始在这里卡了好久... </span></span><br><span class="line"><span class="built_in">findmax</span>();</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划-单调队列优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P6524 「Wdoi-1」托卡马克</title>
      <link href="/2020/06/20/p6524/"/>
      <url>/2020/06/20/p6524/</url>
      
        <content type="html"><![CDATA[<h1 id="P6524-「Wdoi-1」托卡马克-题解"><a href="#P6524-「Wdoi-1」托卡马克-题解" class="headerlink" title="P6524 「Wdoi-1」托卡马克 题解"></a>P6524 「Wdoi-1」托卡马克 题解</h1><p>大致思路和上面那位dalao的差不多,有个错误也是看了上面那位dalao的题解才发现的qwq</p><h2 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a><strong>大致题意</strong></h2><p>在<strong>n</strong>个点中选<strong>m</strong>个点进行<strong>两两相连</strong>,两个点相连所产生的费用为两点距离之差的绝对值<br>求<strong>严格第k大费用值(即不存在并列情况的第 k 大方案）</strong></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先来看一下这个数据范围,<strong>k&lt;&#x3D;2</strong></p><p>也就是说只有<strong>第一大</strong>和<strong>第二大</strong>两种可能</p><p>先来看一下k&#x3D;1的时候的情况:</p><h1 id="k-x3D-1"><a href="#k-x3D-1" class="headerlink" title="k&#x3D;1"></a>k&#x3D;1</h1><p>我们假设a1~a8是递增的,且n&#x3D;8,m&#x3D;6,k&#x3D;1</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/8kfaz7oq.png"></p><p>先假设我们选取了$a_1$,$a_2$,$a_{3}$,$a_{6}$,$a_{7}$,$a_{8}$这几个数</p><p>总费用值&#x3D;$\sum\limits_{i&#x3D;1,j&#x3D;i+1}^{n-1,n}a_j-a_i$ </p><p>通过观察可以发现有些值是可以进行拼接的</p><p>如$a_1$<del>$a_8$&#x3D;$a_1$</del>$a_3$+$a_3$<del>$a_8$&#x3D;$a_1$</del>$a_6$+$a_6$~$a_8$&#x3D;…</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/d2lcgwxn.png"></p><p>我们可以把这个拼接看成是在这一段的<strong>哪个位置断开</strong></p><p>这样一轮下来就相当于把开头为1和结尾为8的所有段数全部加完了 这样我们就不用再考虑1和8了<br>可以将图简化成下面这个样子</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7xhv1f3q.png"></p><p>(如图)</p><p>同样<br>$a_2$~$a_7$这段也一样,以此类推,直到缩小到不能再缩的时候停下就可以了</p><p>(大致过程)<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/chk50fh5.png"></p><p>根据断点数量的规律</p><p>不难推出费用值&#x3D;$\sum\limits_{i&#x3D;1}^\frac{m}{2}(m-2(i-1)-1)*(a_{n-i+1}*a_i)$</p><p>把$(m-2(i-1)-1)<em>(a_{n-i+1}<em>a_i)$看成一个**组</em></em></p><p>根据贪心原则</p><p>当k&#x3D;1时</p><p>每次只需要分别取原数列排序后<strong>最大和最小的两个值形成的组</strong>,即可</p><p>如图(n&#x3D;8,m&#x3D;6)</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ycwc66og.png"></p><p>这样k&#x3D;1的情况就做完了</p><p>下面来看k&#x3D;2的情况</p><h1 id="k-x3D-2"><a href="#k-x3D-2" class="headerlink" title="k&#x3D;2"></a>k&#x3D;2</h1><p>也就是次大的费用值</p><p>根据前面那个式子</p><p>很明显可以看出,如果要得到次小费用值,就要取改变最靠近中间的那个点</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/i0frh7yc.png"><br>(左右两种方向)</p><p>但从图中的数据明显可以看出,当中间的所有值和最靠近中间的那个值相等时,是无法改变总数值的</p><p>因此在最靠中间的那个值无法对总数值进行改变时</p><p>就只能去考虑改变第二靠近中间的值了,以此类推</p><p>如果不管怎么移动都无法改变总数值</p><p>即各项均相等或n&#x3D;&#x3D;m时</p><p>输出-1</p><p>贴上丑陋不堪的代码和大致流程图<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/7h357q80.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,m,k,a[<span class="number">300010</span>],ans,ansL,ansR;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m/<span class="number">2</span>;i++)&#123;</span><br><span class="line">ans+=(m<span class="number">-2</span>(i<span class="number">-1</span>)<span class="number">-1</span>)*(a[n-i+<span class="number">1</span>]-a[i]);<span class="comment">//求第1大和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>) cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==m||a[<span class="number">1</span>]==a[n])&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=m/<span class="number">2</span>+<span class="number">1</span>;i&lt;=n-m/<span class="number">2</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i]!=a[m/<span class="number">2</span>])&#123;</span><br><span class="line">ansL=a[i]-a[m/<span class="number">2</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i==n-m/<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=m/<span class="number">2</span><span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[j]!=a[m/<span class="number">2</span>])&#123;</span><br><span class="line">                    ansL=(m<span class="number">-2</span>*j+<span class="number">1</span>)*(a[m/<span class="number">2</span>]-a[j]);<span class="comment">//算差值</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n-m/<span class="number">2</span>;i&gt;=m/<span class="number">2</span>+<span class="number">1</span>;i--)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i]!=a[n-m/<span class="number">2</span>+<span class="number">1</span>])&#123;</span><br><span class="line">ansR=a[n-m/<span class="number">2</span>+<span class="number">1</span>]-a[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==m/<span class="number">2</span>+<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m/<span class="number">2</span>+<span class="number">2</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j]!=a[n-m/<span class="number">2</span>+<span class="number">1</span>])&#123;</span><br><span class="line"></span><br><span class="line">                    ansR=(<span class="number">2</span>*(j-n)+m<span class="number">-1</span>)*(a[j]-a[n-m/<span class="number">2</span>+<span class="number">1</span>]);<span class="comment">//化简了一下 </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">max</span>(ans-ansL,ans-ansR);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4910 帕秋莉的手环</title>
      <link href="/2020/06/11/p4910/"/>
      <url>/2020/06/11/p4910/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f2e352b6c25ad8d0163baee160506d2ce4b78df10de609f6c2171d9f958485d5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划-线性dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2018/01/05/hello-world/"/>
      <url>/2018/01/05/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8a0d4dd5c597967ad94b1e2154a7074f8e43f43a1e81a1c3c932ff646a44c1d4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
